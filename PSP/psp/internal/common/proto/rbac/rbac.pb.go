// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rbac/rbac.proto

package rbac

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RoleType int32

const (
	RoleType_CUSTOM           RoleType = 0
	RoleType_ROLE_SUPER_ADMIN RoleType = 1
)

var RoleType_name = map[int32]string{
	0: "CUSTOM",
	1: "ROLE_SUPER_ADMIN",
}

var RoleType_value = map[string]int32{
	"CUSTOM":           0,
	"ROLE_SUPER_ADMIN": 1,
}

func (x RoleType) String() string {
	return proto.EnumName(RoleType_name, int32(x))
}

func (RoleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{0}
}

type ObjectType int32

const (
	ObjectType_USER ObjectType = 0
)

var ObjectType_name = map[int32]string{
	0: "USER",
}

var ObjectType_value = map[string]int32{
	"USER": 0,
}

func (x ObjectType) String() string {
	return proto.EnumName(ObjectType_name, int32(x))
}

func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{1}
}

type AddRoleReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Comment              string   `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	Perms                []int64  `protobuf:"varint,3,rep,packed,name=perms,proto3" json:"perms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *AddRoleReq) Reset()         { *m = AddRoleReq{} }
func (m *AddRoleReq) String() string { return proto.CompactTextString(m) }
func (*AddRoleReq) ProtoMessage()    {}
func (*AddRoleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{0}
}

func (m *AddRoleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRoleReq.Unmarshal(m, b)
}
func (m *AddRoleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRoleReq.Marshal(b, m, deterministic)
}
func (m *AddRoleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRoleReq.Merge(m, src)
}
func (m *AddRoleReq) XXX_Size() int {
	return xxx_messageInfo_AddRoleReq.Size(m)
}
func (m *AddRoleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRoleReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddRoleReq proto.InternalMessageInfo

func (m *AddRoleReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddRoleReq) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *AddRoleReq) GetPerms() []int64 {
	if m != nil {
		return m.Perms
	}
	return nil
}

type UpdateRoleReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment              string   `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Perms                []int64  `protobuf:"varint,4,rep,packed,name=perms,proto3" json:"perms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *UpdateRoleReq) Reset()         { *m = UpdateRoleReq{} }
func (m *UpdateRoleReq) String() string { return proto.CompactTextString(m) }
func (*UpdateRoleReq) ProtoMessage()    {}
func (*UpdateRoleReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{1}
}

func (m *UpdateRoleReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateRoleReq.Unmarshal(m, b)
}
func (m *UpdateRoleReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateRoleReq.Marshal(b, m, deterministic)
}
func (m *UpdateRoleReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateRoleReq.Merge(m, src)
}
func (m *UpdateRoleReq) XXX_Size() int {
	return xxx_messageInfo_UpdateRoleReq.Size(m)
}
func (m *UpdateRoleReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateRoleReq.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateRoleReq proto.InternalMessageInfo

func (m *UpdateRoleReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateRoleReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRoleReq) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *UpdateRoleReq) GetPerms() []int64 {
	if m != nil {
		return m.Perms
	}
	return nil
}

type ListQuery struct {
	NameFilter string `protobuf:"bytes,1,opt,name=name_filter,json=nameFilter,proto3" json:"name_filter,omitempty"`
	Page       int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	// return all records when page_size <= 0
	// think three times before use
	PageSize             int64    `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Desc                 bool     `protobuf:"varint,4,opt,name=desc,proto3" json:"desc,omitempty"`
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *ListQuery) Reset()         { *m = ListQuery{} }
func (m *ListQuery) String() string { return proto.CompactTextString(m) }
func (*ListQuery) ProtoMessage()    {}
func (*ListQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{2}
}

func (m *ListQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListQuery.Unmarshal(m, b)
}
func (m *ListQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListQuery.Marshal(b, m, deterministic)
}
func (m *ListQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListQuery.Merge(m, src)
}
func (m *ListQuery) XXX_Size() int {
	return xxx_messageInfo_ListQuery.Size(m)
}
func (m *ListQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_ListQuery.DiscardUnknown(m)
}

var xxx_messageInfo_ListQuery proto.InternalMessageInfo

func (m *ListQuery) GetNameFilter() string {
	if m != nil {
		return m.NameFilter
	}
	return ""
}

func (m *ListQuery) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *ListQuery) GetPageSize() int64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListQuery) GetDesc() bool {
	if m != nil {
		return m.Desc
	}
	return false
}

func (m *ListQuery) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

type RoleName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *RoleName) Reset()         { *m = RoleName{} }
func (m *RoleName) String() string { return proto.CompactTextString(m) }
func (*RoleName) ProtoMessage()    {}
func (*RoleName) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{3}
}

func (m *RoleName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleName.Unmarshal(m, b)
}
func (m *RoleName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleName.Marshal(b, m, deterministic)
}
func (m *RoleName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleName.Merge(m, src)
}
func (m *RoleName) XXX_Size() int {
	return xxx_messageInfo_RoleName.Size(m)
}
func (m *RoleName) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleName.DiscardUnknown(m)
}

var xxx_messageInfo_RoleName proto.InternalMessageInfo

func (m *RoleName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RoleIDs struct {
	Ids                  []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *RoleIDs) Reset()         { *m = RoleIDs{} }
func (m *RoleIDs) String() string { return proto.CompactTextString(m) }
func (*RoleIDs) ProtoMessage()    {}
func (*RoleIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{4}
}

func (m *RoleIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleIDs.Unmarshal(m, b)
}
func (m *RoleIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleIDs.Marshal(b, m, deterministic)
}
func (m *RoleIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleIDs.Merge(m, src)
}
func (m *RoleIDs) XXX_Size() int {
	return xxx_messageInfo_RoleIDs.Size(m)
}
func (m *RoleIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleIDs.DiscardUnknown(m)
}

var xxx_messageInfo_RoleIDs proto.InternalMessageInfo

func (m *RoleIDs) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type RoleID struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *RoleID) Reset()         { *m = RoleID{} }
func (m *RoleID) String() string { return proto.CompactTextString(m) }
func (*RoleID) ProtoMessage()    {}
func (*RoleID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{5}
}

func (m *RoleID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleID.Unmarshal(m, b)
}
func (m *RoleID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleID.Marshal(b, m, deterministic)
}
func (m *RoleID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleID.Merge(m, src)
}
func (m *RoleID) XXX_Size() int {
	return xxx_messageInfo_RoleID.Size(m)
}
func (m *RoleID) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleID.DiscardUnknown(m)
}

var xxx_messageInfo_RoleID proto.InternalMessageInfo

func (m *RoleID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Role struct {
	// id will be ignored when adding
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Comment              string   `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	Type                 RoleType `protobuf:"varint,4,opt,name=type,proto3,enum=rbac.RoleType" json:"type,omitempty"`
	Perms                []int64  `protobuf:"varint,5,rep,packed,name=perms,proto3" json:"perms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *Role) Reset()         { *m = Role{} }
func (m *Role) String() string { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()    {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{6}
}

func (m *Role) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Role.Unmarshal(m, b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Role.Marshal(b, m, deterministic)
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return xxx_messageInfo_Role.Size(m)
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *Role) GetType() RoleType {
	if m != nil {
		return m.Type
	}
	return RoleType_CUSTOM
}

func (m *Role) GetPerms() []int64 {
	if m != nil {
		return m.Perms
	}
	return nil
}

type Roles struct {
	Roles                []*Role  `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	Total                int64    `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *Roles) Reset()         { *m = Roles{} }
func (m *Roles) String() string { return proto.CompactTextString(m) }
func (*Roles) ProtoMessage()    {}
func (*Roles) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{7}
}

func (m *Roles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Roles.Unmarshal(m, b)
}
func (m *Roles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Roles.Marshal(b, m, deterministic)
}
func (m *Roles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Roles.Merge(m, src)
}
func (m *Roles) XXX_Size() int {
	return xxx_messageInfo_Roles.Size(m)
}
func (m *Roles) XXX_DiscardUnknown() {
	xxx_messageInfo_Roles.DiscardUnknown(m)
}

var xxx_messageInfo_Roles proto.InternalMessageInfo

func (m *Roles) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Roles) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type RoleDetail struct {
	Role                 *Role       `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Perms                []*Resource `protobuf:"bytes,2,rep,name=perms,proto3" json:"perms,omitempty"`
	Objects              []*ObjectID `protobuf:"bytes,3,rep,name=objects,proto3" json:"objects,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte      `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32       `json:"-" yaml:"-" xml:"-"`
}

func (m *RoleDetail) Reset()         { *m = RoleDetail{} }
func (m *RoleDetail) String() string { return proto.CompactTextString(m) }
func (*RoleDetail) ProtoMessage()    {}
func (*RoleDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{8}
}

func (m *RoleDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RoleDetail.Unmarshal(m, b)
}
func (m *RoleDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RoleDetail.Marshal(b, m, deterministic)
}
func (m *RoleDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleDetail.Merge(m, src)
}
func (m *RoleDetail) XXX_Size() int {
	return xxx_messageInfo_RoleDetail.Size(m)
}
func (m *RoleDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleDetail.DiscardUnknown(m)
}

var xxx_messageInfo_RoleDetail proto.InternalMessageInfo

func (m *RoleDetail) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *RoleDetail) GetPerms() []*Resource {
	if m != nil {
		return m.Perms
	}
	return nil
}

func (m *RoleDetail) GetObjects() []*ObjectID {
	if m != nil {
		return m.Objects
	}
	return nil
}

type RolePerms struct {
	Role                 *RoleID  `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Perms                []int64  `protobuf:"varint,2,rep,packed,name=perms,proto3" json:"perms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *RolePerms) Reset()         { *m = RolePerms{} }
func (m *RolePerms) String() string { return proto.CompactTextString(m) }
func (*RolePerms) ProtoMessage()    {}
func (*RolePerms) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{9}
}

func (m *RolePerms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RolePerms.Unmarshal(m, b)
}
func (m *RolePerms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RolePerms.Marshal(b, m, deterministic)
}
func (m *RolePerms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RolePerms.Merge(m, src)
}
func (m *RolePerms) XXX_Size() int {
	return xxx_messageInfo_RolePerms.Size(m)
}
func (m *RolePerms) XXX_DiscardUnknown() {
	xxx_messageInfo_RolePerms.DiscardUnknown(m)
}

var xxx_messageInfo_RolePerms proto.InternalMessageInfo

func (m *RolePerms) GetRole() *RoleID {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *RolePerms) GetPerms() []int64 {
	if m != nil {
		return m.Perms
	}
	return nil
}

type ObjectID struct {
	Id                   string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 ObjectType `protobuf:"varint,2,opt,name=type,proto3,enum=rbac.ObjectType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte     `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32      `json:"-" yaml:"-" xml:"-"`
}

func (m *ObjectID) Reset()         { *m = ObjectID{} }
func (m *ObjectID) String() string { return proto.CompactTextString(m) }
func (*ObjectID) ProtoMessage()    {}
func (*ObjectID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{10}
}

func (m *ObjectID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectID.Unmarshal(m, b)
}
func (m *ObjectID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectID.Marshal(b, m, deterministic)
}
func (m *ObjectID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectID.Merge(m, src)
}
func (m *ObjectID) XXX_Size() int {
	return xxx_messageInfo_ObjectID.Size(m)
}
func (m *ObjectID) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectID.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectID proto.InternalMessageInfo

func (m *ObjectID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ObjectID) GetType() ObjectType {
	if m != nil {
		return m.Type
	}
	return ObjectType_USER
}

type ObjectIDs struct {
	Ids                  []*ObjectID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte      `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32       `json:"-" yaml:"-" xml:"-"`
}

func (m *ObjectIDs) Reset()         { *m = ObjectIDs{} }
func (m *ObjectIDs) String() string { return proto.CompactTextString(m) }
func (*ObjectIDs) ProtoMessage()    {}
func (*ObjectIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{11}
}

func (m *ObjectIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectIDs.Unmarshal(m, b)
}
func (m *ObjectIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectIDs.Marshal(b, m, deterministic)
}
func (m *ObjectIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectIDs.Merge(m, src)
}
func (m *ObjectIDs) XXX_Size() int {
	return xxx_messageInfo_ObjectIDs.Size(m)
}
func (m *ObjectIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectIDs.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectIDs proto.InternalMessageInfo

func (m *ObjectIDs) GetIds() []*ObjectID {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ObjectRoles struct {
	Id                   *ObjectID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Roles                []int64   `protobuf:"varint,2,rep,packed,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte    `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32     `json:"-" yaml:"-" xml:"-"`
}

func (m *ObjectRoles) Reset()         { *m = ObjectRoles{} }
func (m *ObjectRoles) String() string { return proto.CompactTextString(m) }
func (*ObjectRoles) ProtoMessage()    {}
func (*ObjectRoles) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{12}
}

func (m *ObjectRoles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ObjectRoles.Unmarshal(m, b)
}
func (m *ObjectRoles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ObjectRoles.Marshal(b, m, deterministic)
}
func (m *ObjectRoles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectRoles.Merge(m, src)
}
func (m *ObjectRoles) XXX_Size() int {
	return xxx_messageInfo_ObjectRoles.Size(m)
}
func (m *ObjectRoles) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectRoles.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectRoles proto.InternalMessageInfo

func (m *ObjectRoles) GetId() *ObjectID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ObjectRoles) GetRoles() []int64 {
	if m != nil {
		return m.Roles
	}
	return nil
}

type ListObjectsRolesReq struct {
	Ids                  []*ObjectID `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
	NeedImplicitRoles    bool        `protobuf:"varint,2,opt,name=need_implicit_roles,json=needImplicitRoles,proto3" json:"need_implicit_roles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte      `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32       `json:"-" yaml:"-" xml:"-"`
}

func (m *ListObjectsRolesReq) Reset()         { *m = ListObjectsRolesReq{} }
func (m *ListObjectsRolesReq) String() string { return proto.CompactTextString(m) }
func (*ListObjectsRolesReq) ProtoMessage()    {}
func (*ListObjectsRolesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{13}
}

func (m *ListObjectsRolesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListObjectsRolesReq.Unmarshal(m, b)
}
func (m *ListObjectsRolesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListObjectsRolesReq.Marshal(b, m, deterministic)
}
func (m *ListObjectsRolesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListObjectsRolesReq.Merge(m, src)
}
func (m *ListObjectsRolesReq) XXX_Size() int {
	return xxx_messageInfo_ListObjectsRolesReq.Size(m)
}
func (m *ListObjectsRolesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListObjectsRolesReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListObjectsRolesReq proto.InternalMessageInfo

func (m *ListObjectsRolesReq) GetIds() []*ObjectID {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ListObjectsRolesReq) GetNeedImplicitRoles() bool {
	if m != nil {
		return m.NeedImplicitRoles
	}
	return false
}

// ObjectRoles is connection of object and role, just id to id
// role info is in roles
// all role id in ObjectRoles will have role info in roles
type ListObjectsRolesResp struct {
	ObjectRolesList         []*ObjectRoles `protobuf:"bytes,1,rep,name=object_roles_list,json=objectRolesList,proto3" json:"object_roles_list,omitempty"`
	ObjectImplicitRolesList []*ObjectRoles `protobuf:"bytes,3,rep,name=object_implicit_roles_list,json=objectImplicitRolesList,proto3" json:"object_implicit_roles_list,omitempty"`
	Roles                   []*Role        `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}       `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized        []byte         `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache           int32          `json:"-" yaml:"-" xml:"-"`
}

func (m *ListObjectsRolesResp) Reset()         { *m = ListObjectsRolesResp{} }
func (m *ListObjectsRolesResp) String() string { return proto.CompactTextString(m) }
func (*ListObjectsRolesResp) ProtoMessage()    {}
func (*ListObjectsRolesResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{14}
}

func (m *ListObjectsRolesResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListObjectsRolesResp.Unmarshal(m, b)
}
func (m *ListObjectsRolesResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListObjectsRolesResp.Marshal(b, m, deterministic)
}
func (m *ListObjectsRolesResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListObjectsRolesResp.Merge(m, src)
}
func (m *ListObjectsRolesResp) XXX_Size() int {
	return xxx_messageInfo_ListObjectsRolesResp.Size(m)
}
func (m *ListObjectsRolesResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ListObjectsRolesResp.DiscardUnknown(m)
}

var xxx_messageInfo_ListObjectsRolesResp proto.InternalMessageInfo

func (m *ListObjectsRolesResp) GetObjectRolesList() []*ObjectRoles {
	if m != nil {
		return m.ObjectRolesList
	}
	return nil
}

func (m *ListObjectsRolesResp) GetObjectImplicitRolesList() []*ObjectRoles {
	if m != nil {
		return m.ObjectImplicitRolesList
	}
	return nil
}

func (m *ListObjectsRolesResp) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

type PermissionID struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *PermissionID) Reset()         { *m = PermissionID{} }
func (m *PermissionID) String() string { return proto.CompactTextString(m) }
func (*PermissionID) ProtoMessage()    {}
func (*PermissionID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{15}
}

func (m *PermissionID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermissionID.Unmarshal(m, b)
}
func (m *PermissionID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermissionID.Marshal(b, m, deterministic)
}
func (m *PermissionID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionID.Merge(m, src)
}
func (m *PermissionID) XXX_Size() int {
	return xxx_messageInfo_PermissionID.Size(m)
}
func (m *PermissionID) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionID.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionID proto.InternalMessageInfo

func (m *PermissionID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PermissionIDs struct {
	Ids                  []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *PermissionIDs) Reset()         { *m = PermissionIDs{} }
func (m *PermissionIDs) String() string { return proto.CompactTextString(m) }
func (*PermissionIDs) ProtoMessage()    {}
func (*PermissionIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{16}
}

func (m *PermissionIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermissionIDs.Unmarshal(m, b)
}
func (m *PermissionIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermissionIDs.Marshal(b, m, deterministic)
}
func (m *PermissionIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermissionIDs.Merge(m, src)
}
func (m *PermissionIDs) XXX_Size() int {
	return xxx_messageInfo_PermissionIDs.Size(m)
}
func (m *PermissionIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_PermissionIDs.DiscardUnknown(m)
}

var xxx_messageInfo_PermissionIDs proto.InternalMessageInfo

func (m *PermissionIDs) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

// one of resource_name or resource_id should be set
// if resource have id, like resource stored in db, set resource_id
// if resource don't have id or id in db is not int64, set resource_name
// (resource_type, resource_name, resource_id) is unique. one resource type should only
// use (resource_type, resource_name) or (resource_type, resource_id)
type Resource struct {
	// id will be ignored when adding
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// name is like "sys_view_all_job", "internal_modify_user", if empty set ""
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Action      string `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	// resource_type is resource type, like: job_sub_app, remote_app, internal, system, shared_path
	ResourceType string `protobuf:"bytes,4,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// display_name is permission name for display
	ResourceName string `protobuf:"bytes,5,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// -1 false 1-true
	Custom int32 `protobuf:"varint,6,opt,name=custom,proto3" json:"custom,omitempty"`
	// if empty set 0
	ResourceId int64 `protobuf:"varint,7,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// if empty set 0
	ParentId             int64    `protobuf:"varint,8,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{17}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Resource) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Resource) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Resource) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *Resource) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *Resource) GetCustom() int32 {
	if m != nil {
		return m.Custom
	}
	return 0
}

func (m *Resource) GetResourceId() int64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *Resource) GetParentId() int64 {
	if m != nil {
		return m.ParentId
	}
	return 0
}

type Permissions struct {
	Perms                []*Resource `protobuf:"bytes,1,rep,name=perms,proto3" json:"perms,omitempty"`
	Total                int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte      `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32       `json:"-" yaml:"-" xml:"-"`
}

func (m *Permissions) Reset()         { *m = Permissions{} }
func (m *Permissions) String() string { return proto.CompactTextString(m) }
func (*Permissions) ProtoMessage()    {}
func (*Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{18}
}

func (m *Permissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permissions.Unmarshal(m, b)
}
func (m *Permissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permissions.Marshal(b, m, deterministic)
}
func (m *Permissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permissions.Merge(m, src)
}
func (m *Permissions) XXX_Size() int {
	return xxx_messageInfo_Permissions.Size(m)
}
func (m *Permissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Permissions.DiscardUnknown(m)
}

var xxx_messageInfo_Permissions proto.InternalMessageInfo

func (m *Permissions) GetPerms() []*Resource {
	if m != nil {
		return m.Perms
	}
	return nil
}

func (m *Permissions) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type CheckPermissionsRequest struct {
	Id                   *ObjectID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PermissionIds        []int64   `protobuf:"varint,2,rep,packed,name=permission_ids,json=permissionIds,proto3" json:"permission_ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte    `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32     `json:"-" yaml:"-" xml:"-"`
}

func (m *CheckPermissionsRequest) Reset()         { *m = CheckPermissionsRequest{} }
func (m *CheckPermissionsRequest) String() string { return proto.CompactTextString(m) }
func (*CheckPermissionsRequest) ProtoMessage()    {}
func (*CheckPermissionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{19}
}

func (m *CheckPermissionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckPermissionsRequest.Unmarshal(m, b)
}
func (m *CheckPermissionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckPermissionsRequest.Marshal(b, m, deterministic)
}
func (m *CheckPermissionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckPermissionsRequest.Merge(m, src)
}
func (m *CheckPermissionsRequest) XXX_Size() int {
	return xxx_messageInfo_CheckPermissionsRequest.Size(m)
}
func (m *CheckPermissionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckPermissionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckPermissionsRequest proto.InternalMessageInfo

func (m *CheckPermissionsRequest) GetId() *ObjectID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CheckPermissionsRequest) GetPermissionIds() []int64 {
	if m != nil {
		return m.PermissionIds
	}
	return nil
}

type ListObjectResourcesRequest struct {
	Id                   *ObjectID `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ResourceType         []string  `protobuf:"bytes,2,rep,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte    `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32     `json:"-" yaml:"-" xml:"-"`
}

func (m *ListObjectResourcesRequest) Reset()         { *m = ListObjectResourcesRequest{} }
func (m *ListObjectResourcesRequest) String() string { return proto.CompactTextString(m) }
func (*ListObjectResourcesRequest) ProtoMessage()    {}
func (*ListObjectResourcesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{20}
}

func (m *ListObjectResourcesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListObjectResourcesRequest.Unmarshal(m, b)
}
func (m *ListObjectResourcesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListObjectResourcesRequest.Marshal(b, m, deterministic)
}
func (m *ListObjectResourcesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListObjectResourcesRequest.Merge(m, src)
}
func (m *ListObjectResourcesRequest) XXX_Size() int {
	return xxx_messageInfo_ListObjectResourcesRequest.Size(m)
}
func (m *ListObjectResourcesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListObjectResourcesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListObjectResourcesRequest proto.InternalMessageInfo

func (m *ListObjectResourcesRequest) GetId() *ObjectID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ListObjectResourcesRequest) GetResourceType() []string {
	if m != nil {
		return m.ResourceType
	}
	return nil
}

type ResourceID struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *ResourceID) Reset()         { *m = ResourceID{} }
func (m *ResourceID) String() string { return proto.CompactTextString(m) }
func (*ResourceID) ProtoMessage()    {}
func (*ResourceID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{21}
}

func (m *ResourceID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceID.Unmarshal(m, b)
}
func (m *ResourceID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceID.Marshal(b, m, deterministic)
}
func (m *ResourceID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceID.Merge(m, src)
}
func (m *ResourceID) XXX_Size() int {
	return xxx_messageInfo_ResourceID.Size(m)
}
func (m *ResourceID) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceID.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceID proto.InternalMessageInfo

func (m *ResourceID) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ResourceID) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ResourceName struct {
	Type                 string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *ResourceName) Reset()         { *m = ResourceName{} }
func (m *ResourceName) String() string { return proto.CompactTextString(m) }
func (*ResourceName) ProtoMessage()    {}
func (*ResourceName) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{22}
}

func (m *ResourceName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceName.Unmarshal(m, b)
}
func (m *ResourceName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceName.Marshal(b, m, deterministic)
}
func (m *ResourceName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceName.Merge(m, src)
}
func (m *ResourceName) XXX_Size() int {
	return xxx_messageInfo_ResourceName.Size(m)
}
func (m *ResourceName) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceName.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceName proto.InternalMessageInfo

func (m *ResourceName) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ResourceName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResourceName) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

// For Gopher:
//
//	make ResourceIdentity by
//	```
//	import (
//	    rbacCommon "yuansuan.cn/onpremise/rbac/common"
//	)
//	ResourceIdentityByName(res_type, res_name)
//	ResourceIdentityByID(res_type, res_id)
//	ResourceIdentity(res_type, res_name or res_id)
//	ResourceIdentities(res_type1, res_name1, res_type2, res_id2, ...)
//	```
type ResourceIdentity struct {
	// Types that are valid to be assigned to Identity:
	//	*ResourceIdentity_Id
	//	*ResourceIdentity_Name
	Identity             isResourceIdentity_Identity `protobuf_oneof:"identity"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte                      `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32                       `json:"-" yaml:"-" xml:"-"`
}

func (m *ResourceIdentity) Reset()         { *m = ResourceIdentity{} }
func (m *ResourceIdentity) String() string { return proto.CompactTextString(m) }
func (*ResourceIdentity) ProtoMessage()    {}
func (*ResourceIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{23}
}

func (m *ResourceIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceIdentity.Unmarshal(m, b)
}
func (m *ResourceIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceIdentity.Marshal(b, m, deterministic)
}
func (m *ResourceIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceIdentity.Merge(m, src)
}
func (m *ResourceIdentity) XXX_Size() int {
	return xxx_messageInfo_ResourceIdentity.Size(m)
}
func (m *ResourceIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceIdentity proto.InternalMessageInfo

type isResourceIdentity_Identity interface {
	isResourceIdentity_Identity()
}

type ResourceIdentity_Id struct {
	Id *ResourceID `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type ResourceIdentity_Name struct {
	Name *ResourceName `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*ResourceIdentity_Id) isResourceIdentity_Identity() {}

func (*ResourceIdentity_Name) isResourceIdentity_Identity() {}

func (m *ResourceIdentity) GetIdentity() isResourceIdentity_Identity {
	if m != nil {
		return m.Identity
	}
	return nil
}

func (m *ResourceIdentity) GetId() *ResourceID {
	if x, ok := m.GetIdentity().(*ResourceIdentity_Id); ok {
		return x.Id
	}
	return nil
}

func (m *ResourceIdentity) GetName() *ResourceName {
	if x, ok := m.GetIdentity().(*ResourceIdentity_Name); ok {
		return x.Name
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*ResourceIdentity) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*ResourceIdentity_Id)(nil),
		(*ResourceIdentity_Name)(nil),
	}
}

type CheckResourcesPermRequest struct {
	Id                   *ObjectID           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Resources            []*ResourceIdentity `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte              `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32               `json:"-" yaml:"-" xml:"-"`
}

func (m *CheckResourcesPermRequest) Reset()         { *m = CheckResourcesPermRequest{} }
func (m *CheckResourcesPermRequest) String() string { return proto.CompactTextString(m) }
func (*CheckResourcesPermRequest) ProtoMessage()    {}
func (*CheckResourcesPermRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{24}
}

func (m *CheckResourcesPermRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckResourcesPermRequest.Unmarshal(m, b)
}
func (m *CheckResourcesPermRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckResourcesPermRequest.Marshal(b, m, deterministic)
}
func (m *CheckResourcesPermRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckResourcesPermRequest.Merge(m, src)
}
func (m *CheckResourcesPermRequest) XXX_Size() int {
	return xxx_messageInfo_CheckResourcesPermRequest.Size(m)
}
func (m *CheckResourcesPermRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckResourcesPermRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckResourcesPermRequest proto.InternalMessageInfo

func (m *CheckResourcesPermRequest) GetId() *ObjectID {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *CheckResourcesPermRequest) GetResources() []*ResourceIdentity {
	if m != nil {
		return m.Resources
	}
	return nil
}

type SimpleResource struct {
	ResourceType string `protobuf:"bytes,2,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// omit when resource_name is set
	ResourceId int64 `protobuf:"varint,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// if resource_name is "" will use resource_id
	ResourceName         string   `protobuf:"bytes,4,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	ResourceAction       string   `protobuf:"bytes,5,opt,name=resource_action,json=resourceAction,proto3" json:"resource_action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *SimpleResource) Reset()         { *m = SimpleResource{} }
func (m *SimpleResource) String() string { return proto.CompactTextString(m) }
func (*SimpleResource) ProtoMessage()    {}
func (*SimpleResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{25}
}

func (m *SimpleResource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleResource.Unmarshal(m, b)
}
func (m *SimpleResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleResource.Marshal(b, m, deterministic)
}
func (m *SimpleResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResource.Merge(m, src)
}
func (m *SimpleResource) XXX_Size() int {
	return xxx_messageInfo_SimpleResource.Size(m)
}
func (m *SimpleResource) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResource.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResource proto.InternalMessageInfo

func (m *SimpleResource) GetResourceType() string {
	if m != nil {
		return m.ResourceType
	}
	return ""
}

func (m *SimpleResource) GetResourceId() int64 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *SimpleResource) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *SimpleResource) GetResourceAction() string {
	if m != nil {
		return m.ResourceAction
	}
	return ""
}

type SimpleResources struct {
	Resources            []*SimpleResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte            `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32             `json:"-" yaml:"-" xml:"-"`
}

func (m *SimpleResources) Reset()         { *m = SimpleResources{} }
func (m *SimpleResources) String() string { return proto.CompactTextString(m) }
func (*SimpleResources) ProtoMessage()    {}
func (*SimpleResources) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{26}
}

func (m *SimpleResources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleResources.Unmarshal(m, b)
}
func (m *SimpleResources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleResources.Marshal(b, m, deterministic)
}
func (m *SimpleResources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleResources.Merge(m, src)
}
func (m *SimpleResources) XXX_Size() int {
	return xxx_messageInfo_SimpleResources.Size(m)
}
func (m *SimpleResources) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleResources.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleResources proto.InternalMessageInfo

func (m *SimpleResources) GetResources() []*SimpleResource {
	if m != nil {
		return m.Resources
	}
	return nil
}

type PermCheckResponse struct {
	Pass                 bool     `protobuf:"varint,1,opt,name=pass,proto3" json:"pass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *PermCheckResponse) Reset()         { *m = PermCheckResponse{} }
func (m *PermCheckResponse) String() string { return proto.CompactTextString(m) }
func (*PermCheckResponse) ProtoMessage()    {}
func (*PermCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f078eeaf14d87ab3, []int{27}
}

func (m *PermCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PermCheckResponse.Unmarshal(m, b)
}
func (m *PermCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PermCheckResponse.Marshal(b, m, deterministic)
}
func (m *PermCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PermCheckResponse.Merge(m, src)
}
func (m *PermCheckResponse) XXX_Size() int {
	return xxx_messageInfo_PermCheckResponse.Size(m)
}
func (m *PermCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PermCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PermCheckResponse proto.InternalMessageInfo

func (m *PermCheckResponse) GetPass() bool {
	if m != nil {
		return m.Pass
	}
	return false
}

func init() {
	proto.RegisterEnum("rbac.RoleType", RoleType_name, RoleType_value)
	proto.RegisterEnum("rbac.ObjectType", ObjectType_name, ObjectType_value)
	proto.RegisterType((*AddRoleReq)(nil), "rbac.AddRoleReq")
	proto.RegisterType((*UpdateRoleReq)(nil), "rbac.UpdateRoleReq")
	proto.RegisterType((*ListQuery)(nil), "rbac.ListQuery")
	proto.RegisterType((*RoleName)(nil), "rbac.RoleName")
	proto.RegisterType((*RoleIDs)(nil), "rbac.RoleIDs")
	proto.RegisterType((*RoleID)(nil), "rbac.RoleID")
	proto.RegisterType((*Role)(nil), "rbac.Role")
	proto.RegisterType((*Roles)(nil), "rbac.Roles")
	proto.RegisterType((*RoleDetail)(nil), "rbac.RoleDetail")
	proto.RegisterType((*RolePerms)(nil), "rbac.RolePerms")
	proto.RegisterType((*ObjectID)(nil), "rbac.ObjectID")
	proto.RegisterType((*ObjectIDs)(nil), "rbac.ObjectIDs")
	proto.RegisterType((*ObjectRoles)(nil), "rbac.ObjectRoles")
	proto.RegisterType((*ListObjectsRolesReq)(nil), "rbac.ListObjectsRolesReq")
	proto.RegisterType((*ListObjectsRolesResp)(nil), "rbac.ListObjectsRolesResp")
	proto.RegisterType((*PermissionID)(nil), "rbac.PermissionID")
	proto.RegisterType((*PermissionIDs)(nil), "rbac.PermissionIDs")
	proto.RegisterType((*Resource)(nil), "rbac.Resource")
	proto.RegisterType((*Permissions)(nil), "rbac.Permissions")
	proto.RegisterType((*CheckPermissionsRequest)(nil), "rbac.CheckPermissionsRequest")
	proto.RegisterType((*ListObjectResourcesRequest)(nil), "rbac.ListObjectResourcesRequest")
	proto.RegisterType((*ResourceID)(nil), "rbac.ResourceID")
	proto.RegisterType((*ResourceName)(nil), "rbac.ResourceName")
	proto.RegisterType((*ResourceIdentity)(nil), "rbac.ResourceIdentity")
	proto.RegisterType((*CheckResourcesPermRequest)(nil), "rbac.CheckResourcesPermRequest")
	proto.RegisterType((*SimpleResource)(nil), "rbac.SimpleResource")
	proto.RegisterType((*SimpleResources)(nil), "rbac.SimpleResources")
	proto.RegisterType((*PermCheckResponse)(nil), "rbac.PermCheckResponse")
}

func init() { proto.RegisterFile("rbac/rbac.proto", fileDescriptor_f078eeaf14d87ab3) }

var fileDescriptor_f078eeaf14d87ab3 = []byte{
	// 1455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xdd, 0x72, 0xdb, 0xb6,
	0x12, 0xd6, 0xaf, 0x25, 0xad, 0xac, 0x3f, 0x44, 0xb1, 0x15, 0x65, 0xc6, 0x51, 0x70, 0x92, 0x89,
	0x26, 0x93, 0xc8, 0x27, 0x3a, 0xa7, 0x9d, 0x69, 0x93, 0x4c, 0x63, 0x5b, 0x6e, 0xa2, 0xa9, 0xe3,
	0xb8, 0x54, 0x7c, 0xd3, 0x1b, 0x95, 0x16, 0x61, 0x97, 0x2d, 0x45, 0x32, 0x04, 0xd5, 0x19, 0x65,
	0x3a, 0x7d, 0x82, 0xde, 0xf5, 0x15, 0xfa, 0x2e, 0x7d, 0xa2, 0xf6, 0xba, 0x03, 0x80, 0x20, 0x41,
	0x8a, 0x52, 0x52, 0xe7, 0xc6, 0x06, 0x16, 0xbb, 0xdf, 0x2e, 0xf6, 0x0f, 0x4b, 0x41, 0xc3, 0xbb,
	0xd0, 0x67, 0xfb, 0xec, 0xcf, 0xc0, 0xf5, 0x1c, 0xdf, 0x41, 0x05, 0xb6, 0xee, 0xde, 0xbe, 0x72,
	0x9c, 0x2b, 0x8b, 0xec, 0x73, 0xda, 0xc5, 0xe2, 0x72, 0x9f, 0xcc, 0x5d, 0x7f, 0x29, 0x58, 0xf0,
	0x19, 0xc0, 0x81, 0x61, 0x68, 0x8e, 0x45, 0x34, 0xf2, 0x0e, 0x21, 0x28, 0xd8, 0xfa, 0x9c, 0x74,
	0xb2, 0xbd, 0x6c, 0xbf, 0xa2, 0xf1, 0x35, 0xea, 0x40, 0x69, 0xe6, 0xcc, 0xe7, 0xc4, 0xf6, 0x3b,
	0x39, 0x4e, 0x96, 0x5b, 0xd4, 0x86, 0xa2, 0x4b, 0xbc, 0x39, 0xed, 0xe4, 0x7b, 0xf9, 0x7e, 0x5e,
	0x13, 0x1b, 0x3c, 0x83, 0xda, 0xb9, 0x6b, 0xe8, 0x3e, 0x91, 0xa0, 0x75, 0xc8, 0x99, 0x06, 0x87,
	0xcc, 0x6b, 0x39, 0xd3, 0x08, 0x95, 0xe4, 0xd2, 0x95, 0xe4, 0xd7, 0x28, 0x29, 0xa8, 0x4a, 0x7e,
	0xcb, 0x42, 0xe5, 0xc4, 0xa4, 0xfe, 0xb7, 0x0b, 0xe2, 0x2d, 0xd1, 0x1d, 0xa8, 0x32, 0x94, 0xe9,
	0xa5, 0x69, 0xf9, 0xc4, 0x0b, 0xac, 0x07, 0x46, 0xfa, 0x9a, 0x53, 0x98, 0x4a, 0x57, 0xbf, 0x12,
	0x2a, 0xf3, 0x1a, 0x5f, 0xa3, 0xdb, 0x50, 0x61, 0xff, 0xa7, 0xd4, 0x7c, 0x4f, 0xb8, 0xd2, 0xbc,
	0x56, 0x66, 0x84, 0x89, 0xf9, 0x9e, 0x30, 0x01, 0x83, 0xd0, 0x59, 0xa7, 0xd0, 0xcb, 0xf6, 0xcb,
	0x1a, 0x5f, 0xa3, 0x5b, 0x50, 0x76, 0x3c, 0x83, 0x78, 0xd3, 0x8b, 0x65, 0xa7, 0x28, 0x8c, 0xe4,
	0xfb, 0xc3, 0x25, 0xde, 0x83, 0x32, 0xbb, 0xed, 0x29, 0xbb, 0x4a, 0x8a, 0x0f, 0xf1, 0x6d, 0x28,
	0xb1, 0xf3, 0xf1, 0x88, 0xa2, 0x26, 0xe4, 0x4d, 0x83, 0x76, 0xb2, 0xfc, 0x36, 0x6c, 0x89, 0x3b,
	0xb0, 0x25, 0x0e, 0x93, 0x9e, 0xc2, 0xbf, 0x42, 0x81, 0x9d, 0x7c, 0xa2, 0x07, 0x31, 0x14, 0xfc,
	0xa5, 0x4b, 0xf8, 0x5d, 0xea, 0xc3, 0xfa, 0x80, 0x27, 0x08, 0xc3, 0x7d, 0xbb, 0x74, 0x89, 0xc6,
	0xcf, 0x22, 0x2f, 0x17, 0x55, 0x2f, 0x7f, 0x05, 0x45, 0xc6, 0x47, 0x51, 0x0f, 0x8a, 0x1e, 0x5b,
	0x70, 0xb3, 0xab, 0x43, 0x88, 0x30, 0x34, 0x71, 0xc0, 0x00, 0x7c, 0xc7, 0xd7, 0xad, 0xc0, 0xc5,
	0x62, 0x83, 0x7f, 0x01, 0x60, 0x4c, 0x23, 0xe2, 0xeb, 0xa6, 0x85, 0xf6, 0xa0, 0xc0, 0x98, 0xf9,
	0x45, 0xe2, 0x20, 0x9c, 0x8e, 0xee, 0x49, 0x23, 0x72, 0x5c, 0x8b, 0xb4, 0x94, 0x50, 0x67, 0xe1,
	0xcd, 0x48, 0x60, 0x14, 0xea, 0x43, 0xc9, 0xb9, 0xf8, 0x91, 0xcc, 0x7c, 0x91, 0x77, 0x21, 0xdf,
	0x1b, 0x4e, 0x1c, 0x8f, 0x34, 0x79, 0x8c, 0x8f, 0xa0, 0xc2, 0xd0, 0xcf, 0xb8, 0x58, 0x2f, 0xa6,
	0x7c, 0x3b, 0x52, 0x3e, 0x1e, 0x05, 0xea, 0xdb, 0xaa, 0xfa, 0xd0, 0x07, 0x2f, 0xa0, 0x2c, 0x91,
	0x95, 0x38, 0x54, 0x78, 0x1c, 0xee, 0x05, 0x9e, 0xcd, 0x71, 0xcf, 0x36, 0x55, 0x3b, 0x22, 0xdf,
	0xe2, 0xc7, 0x50, 0x91, 0x08, 0xcc, 0x8c, 0x30, 0xfc, 0xab, 0x96, 0xf3, 0x74, 0x38, 0x82, 0xaa,
	0x20, 0x08, 0xd7, 0xef, 0x85, 0x3a, 0x57, 0xf9, 0x99, 0x0d, 0x6d, 0x19, 0x9a, 0xc0, 0x6a, 0xbe,
	0xc1, 0x57, 0x70, 0x83, 0x95, 0x87, 0xe0, 0xa4, 0x1c, 0x89, 0x95, 0xe2, 0x07, 0xb5, 0xa3, 0x01,
	0xdc, 0xb0, 0x09, 0x31, 0xa6, 0xe6, 0xdc, 0xb5, 0xcc, 0x99, 0xe9, 0x4f, 0x25, 0x38, 0xab, 0x83,
	0x16, 0x3b, 0x1a, 0x07, 0x27, 0x1c, 0x14, 0xff, 0x99, 0x85, 0xf6, 0xaa, 0x26, 0xea, 0xa2, 0xe7,
	0xd0, 0x12, 0x71, 0x10, 0x08, 0x53, 0xcb, 0xa4, 0x7e, 0xa0, 0xb8, 0xa5, 0x2a, 0x16, 0x12, 0x0d,
	0x27, 0xda, 0x30, 0x38, 0x74, 0x0a, 0xdd, 0x40, 0x3c, 0x6e, 0x89, 0xc0, 0xc9, 0xaf, 0xc3, 0xd9,
	0x15, 0x42, 0x31, 0x1b, 0x39, 0x5e, 0x4f, 0x75, 0x53, 0x5a, 0x06, 0xe3, 0x3d, 0xd8, 0x66, 0x99,
	0x62, 0x52, 0x6a, 0x3a, 0x76, 0x4a, 0x31, 0xde, 0x85, 0x9a, 0x7a, 0x9e, 0x56, 0xc9, 0x7f, 0x65,
	0xa1, 0x2c, 0xd3, 0x75, 0xa5, 0x68, 0xef, 0xc2, 0xb6, 0x61, 0x52, 0xd7, 0xd2, 0x97, 0x53, 0xa5,
	0x78, 0xab, 0x01, 0x8d, 0xb7, 0x8e, 0x1d, 0xd8, 0xd2, 0x67, 0xbe, 0xe9, 0xd8, 0x41, 0x09, 0x07,
	0x3b, 0xf4, 0x1f, 0xa8, 0x79, 0x01, 0xec, 0x34, 0x2c, 0xe5, 0x8a, 0xb6, 0x2d, 0x89, 0x2c, 0xd9,
	0x62, 0x4c, 0x5c, 0x41, 0x31, 0xce, 0x24, 0x35, 0xcc, 0x16, 0xd4, 0x77, 0xe6, 0x9d, 0xad, 0x5e,
	0xb6, 0x5f, 0xd4, 0x82, 0x1d, 0xeb, 0xa0, 0xa1, 0xb0, 0x69, 0x74, 0x4a, 0xdc, 0x6a, 0x90, 0xa4,
	0xb1, 0x21, 0xba, 0xa5, 0x47, 0x6c, 0x9f, 0x1d, 0x97, 0x65, 0xb7, 0x64, 0x84, 0xb1, 0x81, 0xc7,
	0x50, 0x8d, 0x5c, 0x43, 0xa3, 0x3a, 0xce, 0x6e, 0xaa, 0xe3, 0xf4, 0x8e, 0xf1, 0x3d, 0xec, 0x1e,
	0xfd, 0x40, 0x66, 0x3f, 0x29, 0x78, 0x1a, 0x79, 0xb7, 0x20, 0xd4, 0xff, 0x60, 0x25, 0xdc, 0x87,
	0xba, 0x1b, 0x4a, 0x4d, 0x59, 0x68, 0x44, 0x49, 0xd4, 0x22, 0xea, 0xd8, 0xa0, 0x58, 0x87, 0x6e,
	0x94, 0xb0, 0xd2, 0xa8, 0x8f, 0x56, 0xb2, 0x12, 0x0a, 0xa6, 0x23, 0x11, 0x0a, 0xfc, 0x5f, 0x00,
	0x09, 0x3c, 0x1e, 0xb1, 0x6e, 0xcd, 0x39, 0x83, 0x07, 0x81, 0xf7, 0x5b, 0x91, 0x1c, 0xb9, 0x30,
	0xb9, 0x4e, 0x61, 0x5b, 0x53, 0xe3, 0x94, 0x26, 0x93, 0xd6, 0xf5, 0xd7, 0x64, 0x0c, 0xb6, 0xa0,
	0x19, 0x5a, 0x60, 0x10, 0xdb, 0x37, 0xfd, 0x25, 0xc2, 0xca, 0xd5, 0x9a, 0xf1, 0x98, 0x8c, 0x47,
	0xaf, 0x32, 0xfc, 0x7a, 0x7d, 0x45, 0x47, 0x75, 0x88, 0xe2, 0x5c, 0xcc, 0xb2, 0x57, 0x19, 0xa1,
	0xf9, 0x10, 0xa0, 0x6c, 0x06, 0xc8, 0xf8, 0x1d, 0xdc, 0xe2, 0x41, 0x0b, 0xbd, 0xc9, 0xa2, 0xf7,
	0xb1, 0x1e, 0xfd, 0x3f, 0x54, 0xa4, 0xf3, 0x64, 0x75, 0xee, 0x24, 0xac, 0x0b, 0xf4, 0x68, 0x11,
	0x23, 0xfe, 0x23, 0x0b, 0xf5, 0x09, 0x6b, 0x0d, 0x24, 0x2c, 0xb8, 0x94, 0xd0, 0xac, 0x56, 0x49,
	0x22, 0xd1, 0xf3, 0x2b, 0x89, 0xbe, 0x52, 0x46, 0x85, 0x94, 0x32, 0x7a, 0x00, 0x8d, 0x90, 0x29,
	0xf0, 0xbf, 0xa8, 0xb6, 0xba, 0x24, 0x1f, 0x88, 0x38, 0x1c, 0x43, 0x23, 0x6e, 0x25, 0x45, 0x43,
	0xf5, 0xbe, 0xa2, 0x42, 0xda, 0xe2, 0xbe, 0x71, 0x4e, 0xf5, 0xb6, 0x0f, 0xa0, 0xc5, 0x5c, 0x2a,
	0x9d, 0xec, 0x3a, 0x36, 0x25, 0x62, 0xa8, 0xa1, 0x94, 0xbb, 0xb6, 0xac, 0xf1, 0xf5, 0xc3, 0x47,
	0x62, 0x10, 0xe1, 0x57, 0x05, 0xd8, 0x3a, 0x3a, 0x9f, 0xbc, 0x7d, 0xf3, 0xba, 0x99, 0x41, 0x6d,
	0x68, 0x6a, 0x6f, 0x4e, 0x8e, 0xa7, 0x93, 0xf3, 0xb3, 0x63, 0x6d, 0x7a, 0x30, 0x7a, 0x3d, 0x3e,
	0x6d, 0x66, 0x1f, 0xee, 0x00, 0x44, 0xaf, 0x15, 0x2a, 0x43, 0xe1, 0x7c, 0x72, 0xac, 0x35, 0x33,
	0xc3, 0xbf, 0x4b, 0x50, 0x65, 0x30, 0xaf, 0x75, 0x5b, 0xbf, 0x22, 0x1e, 0xba, 0x0f, 0xa5, 0x97,
	0x84, 0x37, 0x53, 0x14, 0x7b, 0x38, 0xbb, 0x4a, 0x1b, 0xc5, 0x19, 0xd4, 0x87, 0x72, 0xc0, 0x46,
	0x51, 0x4d, 0xe5, 0xa3, 0xdd, 0x6a, 0xb4, 0xa5, 0x38, 0x83, 0x1e, 0x43, 0x2d, 0xe0, 0x3c, 0x14,
	0x9d, 0x4f, 0x99, 0x4a, 0xd8, 0x3e, 0x01, 0xfc, 0x05, 0x6c, 0x07, 0x43, 0xaa, 0x78, 0xcb, 0x1b,
	0xd1, 0x29, 0x27, 0x74, 0x77, 0x06, 0x62, 0xc6, 0x1d, 0xc8, 0x19, 0x77, 0x70, 0xcc, 0x66, 0x5c,
	0x9c, 0x41, 0xcf, 0xa0, 0x11, 0x4d, 0xa3, 0xd7, 0x91, 0xd6, 0xc8, 0xdc, 0xf9, 0xf9, 0x7a, 0xd2,
	0x07, 0xd0, 0x36, 0x6d, 0x9f, 0x78, 0xb6, 0x6e, 0x5d, 0xd7, 0xfc, 0x11, 0xec, 0x4a, 0x88, 0x4f,
	0x30, 0xe4, 0x39, 0xd4, 0x0f, 0x0c, 0x43, 0x9d, 0x2a, 0x56, 0x9f, 0xce, 0x0d, 0xe2, 0xdf, 0x40,
	0x33, 0xf9, 0xc4, 0xa3, 0x5b, 0x02, 0x20, 0x65, 0xc8, 0xe8, 0x76, 0xd7, 0x1d, 0x51, 0x17, 0x67,
	0xd0, 0x0b, 0x68, 0x89, 0x80, 0x5c, 0xdb, 0x9c, 0x17, 0xd0, 0x12, 0xbe, 0xb8, 0x36, 0xc2, 0x10,
	0x5a, 0x61, 0xfa, 0x45, 0xc3, 0x5d, 0xbc, 0x37, 0x25, 0x53, 0xf6, 0x33, 0x28, 0x05, 0x41, 0x44,
	0x41, 0xf3, 0x8c, 0xbe, 0x9b, 0x36, 0xa8, 0x7a, 0x0a, 0x10, 0xe5, 0x1f, 0xba, 0x21, 0x24, 0x63,
	0xdf, 0x47, 0x1b, 0x84, 0x9f, 0x40, 0x69, 0x44, 0xac, 0x94, 0xba, 0xdb, 0x94, 0xb1, 0x68, 0x42,
	0xfc, 0x13, 0x43, 0x77, 0xcf, 0x29, 0xf1, 0x46, 0xe4, 0xf2, 0xdf, 0x48, 0x0f, 0x7f, 0xdf, 0x12,
	0x8d, 0x46, 0xbc, 0x96, 0xb2, 0xfc, 0x9f, 0x40, 0xed, 0xc0, 0x30, 0x22, 0x3a, 0x4a, 0xbc, 0xe8,
	0xdd, 0xc4, 0x9e, 0x7b, 0x8b, 0x15, 0xb8, 0x22, 0x12, 0x3c, 0x25, 0xea, 0x04, 0x95, 0x22, 0xf6,
	0x25, 0xd4, 0x63, 0x62, 0x54, 0x7a, 0x2c, 0x36, 0x79, 0x75, 0x5b, 0x49, 0x22, 0xe5, 0x9e, 0x6e,
	0xb0, 0xa0, 0x06, 0x60, 0xec, 0x0c, 0xad, 0x79, 0x47, 0x52, 0x14, 0x3f, 0x83, 0xa6, 0x08, 0xca,
	0x86, 0x5b, 0x6e, 0xca, 0xc8, 0xe6, 0x88, 0x58, 0x24, 0x26, 0x9d, 0x76, 0xe1, 0xf5, 0x08, 0x9f,
	0x43, 0x9d, 0xd5, 0x8b, 0x22, 0xdf, 0x88, 0xaa, 0x88, 0x7f, 0xe4, 0xa6, 0x5f, 0xfa, 0x44, 0x9d,
	0xf3, 0xa3, 0x37, 0xa6, 0x97, 0x2c, 0xc1, 0xe4, 0x9c, 0x93, 0x8e, 0xf6, 0x0c, 0x6e, 0x46, 0x22,
	0x6a, 0x14, 0x92, 0xb5, 0x91, 0x2a, 0x7d, 0x06, 0x68, 0x75, 0x0a, 0x40, 0x77, 0x04, 0xeb, 0xda,
	0xf9, 0xa0, 0xbb, 0x1b, 0x61, 0xc5, 0xde, 0x37, 0x9c, 0x41, 0xaf, 0xa0, 0xcd, 0x49, 0x13, 0x62,
	0x5d, 0xaa, 0xe6, 0xdc, 0x4c, 0x7b, 0x2f, 0xe9, 0x26, 0xa4, 0xa7, 0xd0, 0x7e, 0x49, 0x64, 0x3b,
	0x3a, 0x5c, 0x86, 0x33, 0xc3, 0xca, 0x1c, 0xd4, 0x6d, 0xc4, 0xaf, 0x4a, 0x71, 0xe6, 0xf0, 0xd1,
	0x77, 0x0f, 0x97, 0x0b, 0xdd, 0xa6, 0x0b, 0xdd, 0x1e, 0xcc, 0xec, 0x7d, 0x97, 0xba, 0xfb, 0xb2,
	0x29, 0xef, 0xb3, 0x8f, 0x6c, 0xc7, 0x16, 0xbf, 0xad, 0xf0, 0x9f, 0x5e, 0x2e, 0xb6, 0xf8, 0xfa,
	0x7f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xdc, 0x06, 0xc0, 0x8e, 0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RoleManagerClient is the client API for RoleManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoleManagerClient interface {
	GetRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*Role, error)
	GetRoles(ctx context.Context, in *RoleIDs, opts ...grpc.CallOption) (*Roles, error)
	GetRoleByName(ctx context.Context, in *RoleName, opts ...grpc.CallOption) (*Role, error)
	// ROLE <-> PERM
	AddRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InternalAddRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InternalRemoveRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ROLE <-> OBJECT
	AddObjectRoles(ctx context.Context, in *ObjectRoles, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListObjectsRoles(ctx context.Context, in *ListObjectsRolesReq, opts ...grpc.CallOption) (*ListObjectsRolesResp, error)
	UpdateObjectRoles(ctx context.Context, in *ObjectRoles, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveObjectRoles(ctx context.Context, in *ObjectRoles, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRoleByObjectID(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*Roles, error)
	AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DelRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetLdapUserDefRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type roleManagerClient struct {
	cc *grpc.ClientConn
}

func NewRoleManagerClient(cc *grpc.ClientConn) RoleManagerClient {
	return &roleManagerClient{cc}
}

func (c *roleManagerClient) GetRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) GetRoles(ctx context.Context, in *RoleIDs, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) GetRoleByName(ctx context.Context, in *RoleName, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/GetRoleByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) AddRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/AddRolePerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) UpdateRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/UpdateRolePerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) RemoveRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/RemoveRolePerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) InternalAddRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/internalAddRolePerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) InternalRemoveRolePerms(ctx context.Context, in *RolePerms, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/internalRemoveRolePerms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) AddObjectRoles(ctx context.Context, in *ObjectRoles, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/AddObjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) ListObjectsRoles(ctx context.Context, in *ListObjectsRolesReq, opts ...grpc.CallOption) (*ListObjectsRolesResp, error) {
	out := new(ListObjectsRolesResp)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/ListObjectsRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) UpdateObjectRoles(ctx context.Context, in *ObjectRoles, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/UpdateObjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) RemoveObjectRoles(ctx context.Context, in *ObjectRoles, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/RemoveObjectRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) GetRoleByObjectID(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*Roles, error) {
	out := new(Roles)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/GetRoleByObjectID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) AddRole(ctx context.Context, in *AddRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) UpdateRole(ctx context.Context, in *UpdateRoleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) DelRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/DelRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleManagerClient) SetLdapUserDefRole(ctx context.Context, in *RoleID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.RoleManager/SetLdapUserDefRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleManagerServer is the server API for RoleManager service.
type RoleManagerServer interface {
	GetRole(context.Context, *RoleID) (*Role, error)
	GetRoles(context.Context, *RoleIDs) (*Roles, error)
	GetRoleByName(context.Context, *RoleName) (*Role, error)
	// ROLE <-> PERM
	AddRolePerms(context.Context, *RolePerms) (*emptypb.Empty, error)
	UpdateRolePerms(context.Context, *RolePerms) (*emptypb.Empty, error)
	RemoveRolePerms(context.Context, *RolePerms) (*emptypb.Empty, error)
	InternalAddRolePerms(context.Context, *RolePerms) (*emptypb.Empty, error)
	InternalRemoveRolePerms(context.Context, *RolePerms) (*emptypb.Empty, error)
	// ROLE <-> OBJECT
	AddObjectRoles(context.Context, *ObjectRoles) (*emptypb.Empty, error)
	ListObjectsRoles(context.Context, *ListObjectsRolesReq) (*ListObjectsRolesResp, error)
	UpdateObjectRoles(context.Context, *ObjectRoles) (*emptypb.Empty, error)
	RemoveObjectRoles(context.Context, *ObjectRoles) (*emptypb.Empty, error)
	GetRoleByObjectID(context.Context, *ObjectID) (*Roles, error)
	AddRole(context.Context, *AddRoleReq) (*emptypb.Empty, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*emptypb.Empty, error)
	DelRole(context.Context, *RoleID) (*emptypb.Empty, error)
	SetLdapUserDefRole(context.Context, *RoleID) (*emptypb.Empty, error)
}

// UnimplementedRoleManagerServer can be embedded to have forward compatible implementations.
type UnimplementedRoleManagerServer struct {
}

func (*UnimplementedRoleManagerServer) GetRole(ctx context.Context, req *RoleID) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedRoleManagerServer) GetRoles(ctx context.Context, req *RoleIDs) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (*UnimplementedRoleManagerServer) GetRoleByName(ctx context.Context, req *RoleName) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByName not implemented")
}
func (*UnimplementedRoleManagerServer) AddRolePerms(ctx context.Context, req *RolePerms) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolePerms not implemented")
}
func (*UnimplementedRoleManagerServer) UpdateRolePerms(ctx context.Context, req *RolePerms) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRolePerms not implemented")
}
func (*UnimplementedRoleManagerServer) RemoveRolePerms(ctx context.Context, req *RolePerms) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRolePerms not implemented")
}
func (*UnimplementedRoleManagerServer) InternalAddRolePerms(ctx context.Context, req *RolePerms) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalAddRolePerms not implemented")
}
func (*UnimplementedRoleManagerServer) InternalRemoveRolePerms(ctx context.Context, req *RolePerms) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InternalRemoveRolePerms not implemented")
}
func (*UnimplementedRoleManagerServer) AddObjectRoles(ctx context.Context, req *ObjectRoles) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObjectRoles not implemented")
}
func (*UnimplementedRoleManagerServer) ListObjectsRoles(ctx context.Context, req *ListObjectsRolesReq) (*ListObjectsRolesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectsRoles not implemented")
}
func (*UnimplementedRoleManagerServer) UpdateObjectRoles(ctx context.Context, req *ObjectRoles) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObjectRoles not implemented")
}
func (*UnimplementedRoleManagerServer) RemoveObjectRoles(ctx context.Context, req *ObjectRoles) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveObjectRoles not implemented")
}
func (*UnimplementedRoleManagerServer) GetRoleByObjectID(ctx context.Context, req *ObjectID) (*Roles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByObjectID not implemented")
}
func (*UnimplementedRoleManagerServer) AddRole(ctx context.Context, req *AddRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (*UnimplementedRoleManagerServer) UpdateRole(ctx context.Context, req *UpdateRoleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (*UnimplementedRoleManagerServer) DelRole(ctx context.Context, req *RoleID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRole not implemented")
}
func (*UnimplementedRoleManagerServer) SetLdapUserDefRole(ctx context.Context, req *RoleID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLdapUserDefRole not implemented")
}

func RegisterRoleManagerServer(s *grpc.Server, srv RoleManagerServer) {
	s.RegisterService(&_RoleManager_serviceDesc, srv)
}

func _RoleManager_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).GetRole(ctx, req.(*RoleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).GetRoles(ctx, req.(*RoleIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_GetRoleByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).GetRoleByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/GetRoleByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).GetRoleByName(ctx, req.(*RoleName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_AddRolePerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePerms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).AddRolePerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/AddRolePerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).AddRolePerms(ctx, req.(*RolePerms))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_UpdateRolePerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePerms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).UpdateRolePerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/UpdateRolePerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).UpdateRolePerms(ctx, req.(*RolePerms))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_RemoveRolePerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePerms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).RemoveRolePerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/RemoveRolePerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).RemoveRolePerms(ctx, req.(*RolePerms))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_InternalAddRolePerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePerms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).InternalAddRolePerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/InternalAddRolePerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).InternalAddRolePerms(ctx, req.(*RolePerms))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_InternalRemoveRolePerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RolePerms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).InternalRemoveRolePerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/InternalRemoveRolePerms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).InternalRemoveRolePerms(ctx, req.(*RolePerms))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_AddObjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).AddObjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/AddObjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).AddObjectRoles(ctx, req.(*ObjectRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_ListObjectsRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectsRolesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).ListObjectsRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/ListObjectsRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).ListObjectsRoles(ctx, req.(*ListObjectsRolesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_UpdateObjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).UpdateObjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/UpdateObjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).UpdateObjectRoles(ctx, req.(*ObjectRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_RemoveObjectRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectRoles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).RemoveObjectRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/RemoveObjectRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).RemoveObjectRoles(ctx, req.(*ObjectRoles))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_GetRoleByObjectID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).GetRoleByObjectID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/GetRoleByObjectID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).GetRoleByObjectID(ctx, req.(*ObjectID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).AddRole(ctx, req.(*AddRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).UpdateRole(ctx, req.(*UpdateRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_DelRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).DelRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/DelRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).DelRole(ctx, req.(*RoleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleManager_SetLdapUserDefRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleManagerServer).SetLdapUserDefRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.RoleManager/SetLdapUserDefRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleManagerServer).SetLdapUserDefRole(ctx, req.(*RoleID))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.RoleManager",
	HandlerType: (*RoleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _RoleManager_GetRole_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _RoleManager_GetRoles_Handler,
		},
		{
			MethodName: "GetRoleByName",
			Handler:    _RoleManager_GetRoleByName_Handler,
		},
		{
			MethodName: "AddRolePerms",
			Handler:    _RoleManager_AddRolePerms_Handler,
		},
		{
			MethodName: "UpdateRolePerms",
			Handler:    _RoleManager_UpdateRolePerms_Handler,
		},
		{
			MethodName: "RemoveRolePerms",
			Handler:    _RoleManager_RemoveRolePerms_Handler,
		},
		{
			MethodName: "internalAddRolePerms",
			Handler:    _RoleManager_InternalAddRolePerms_Handler,
		},
		{
			MethodName: "internalRemoveRolePerms",
			Handler:    _RoleManager_InternalRemoveRolePerms_Handler,
		},
		{
			MethodName: "AddObjectRoles",
			Handler:    _RoleManager_AddObjectRoles_Handler,
		},
		{
			MethodName: "ListObjectsRoles",
			Handler:    _RoleManager_ListObjectsRoles_Handler,
		},
		{
			MethodName: "UpdateObjectRoles",
			Handler:    _RoleManager_UpdateObjectRoles_Handler,
		},
		{
			MethodName: "RemoveObjectRoles",
			Handler:    _RoleManager_RemoveObjectRoles_Handler,
		},
		{
			MethodName: "GetRoleByObjectID",
			Handler:    _RoleManager_GetRoleByObjectID_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _RoleManager_AddRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleManager_UpdateRole_Handler,
		},
		{
			MethodName: "DelRole",
			Handler:    _RoleManager_DelRole_Handler,
		},
		{
			MethodName: "SetLdapUserDefRole",
			Handler:    _RoleManager_SetLdapUserDefRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac/rbac.proto",
}

// PermissionManagerClient is the client API for PermissionManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PermissionManagerClient interface {
	// AddPermission : don't pass id, will ignore
	AddPermission(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Resource, error)
	GetPermission(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*Resource, error)
	GetPermissions(ctx context.Context, in *PermissionIDs, opts ...grpc.CallOption) (*Permissions, error)
	GetResourcePerm(ctx context.Context, in *ResourceIdentity, opts ...grpc.CallOption) (*Resource, error)
	// UpdatePermission : identify by Permission.ID, and update other fields
	UpdatePermission(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePermission(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPermission(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (*Permissions, error)
	// PERM <-> OBJECT
	// 获取所有者的权限列表
	// 和ListObjectPermissions区别主要在于可通过resource_type筛选
	ListObjectResources(ctx context.Context, in *ListObjectResourcesRequest, opts ...grpc.CallOption) (*Permissions, error)
	ListObjectPermissions(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*Permissions, error)
	// if permission not found, ErrRBACPermNotFound(60100) will return
	// 权限校验
	CheckResourcesPerm(ctx context.Context, in *CheckResourcesPermRequest, opts ...grpc.CallOption) (*PermCheckResponse, error)
	CheckSelfPermissions(ctx context.Context, in *SimpleResources, opts ...grpc.CallOption) (*PermCheckResponse, error)
	// 获取拥有指定权限的所有者列表
	GetObjectsByResource(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*ObjectIDs, error)
}

type permissionManagerClient struct {
	cc *grpc.ClientConn
}

func NewPermissionManagerClient(cc *grpc.ClientConn) PermissionManagerClient {
	return &permissionManagerClient{cc}
}

func (c *permissionManagerClient) AddPermission(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/AddPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) GetPermission(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/GetPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) GetPermissions(ctx context.Context, in *PermissionIDs, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) GetResourcePerm(ctx context.Context, in *ResourceIdentity, opts ...grpc.CallOption) (*Resource, error) {
	out := new(Resource)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/GetResourcePerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) UpdatePermission(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/UpdatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) DeletePermission(ctx context.Context, in *PermissionID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) ListPermission(ctx context.Context, in *ListQuery, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/ListPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) ListObjectResources(ctx context.Context, in *ListObjectResourcesRequest, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/ListObjectResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) ListObjectPermissions(ctx context.Context, in *ObjectID, opts ...grpc.CallOption) (*Permissions, error) {
	out := new(Permissions)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/ListObjectPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) CheckResourcesPerm(ctx context.Context, in *CheckResourcesPermRequest, opts ...grpc.CallOption) (*PermCheckResponse, error) {
	out := new(PermCheckResponse)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/CheckResourcesPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) CheckSelfPermissions(ctx context.Context, in *SimpleResources, opts ...grpc.CallOption) (*PermCheckResponse, error) {
	out := new(PermCheckResponse)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/CheckSelfPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionManagerClient) GetObjectsByResource(ctx context.Context, in *ResourceID, opts ...grpc.CallOption) (*ObjectIDs, error) {
	out := new(ObjectIDs)
	err := c.cc.Invoke(ctx, "/rbac.PermissionManager/GetObjectsByResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionManagerServer is the server API for PermissionManager service.
type PermissionManagerServer interface {
	// AddPermission : don't pass id, will ignore
	AddPermission(context.Context, *Resource) (*Resource, error)
	GetPermission(context.Context, *PermissionID) (*Resource, error)
	GetPermissions(context.Context, *PermissionIDs) (*Permissions, error)
	GetResourcePerm(context.Context, *ResourceIdentity) (*Resource, error)
	// UpdatePermission : identify by Permission.ID, and update other fields
	UpdatePermission(context.Context, *Resource) (*emptypb.Empty, error)
	DeletePermission(context.Context, *PermissionID) (*emptypb.Empty, error)
	ListPermission(context.Context, *ListQuery) (*Permissions, error)
	// PERM <-> OBJECT
	// 获取所有者的权限列表
	// 和ListObjectPermissions区别主要在于可通过resource_type筛选
	ListObjectResources(context.Context, *ListObjectResourcesRequest) (*Permissions, error)
	ListObjectPermissions(context.Context, *ObjectID) (*Permissions, error)
	// if permission not found, ErrRBACPermNotFound(60100) will return
	// 权限校验
	CheckResourcesPerm(context.Context, *CheckResourcesPermRequest) (*PermCheckResponse, error)
	CheckSelfPermissions(context.Context, *SimpleResources) (*PermCheckResponse, error)
	// 获取拥有指定权限的所有者列表
	GetObjectsByResource(context.Context, *ResourceID) (*ObjectIDs, error)
}

// UnimplementedPermissionManagerServer can be embedded to have forward compatible implementations.
type UnimplementedPermissionManagerServer struct {
}

func (*UnimplementedPermissionManagerServer) AddPermission(ctx context.Context, req *Resource) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermission not implemented")
}
func (*UnimplementedPermissionManagerServer) GetPermission(ctx context.Context, req *PermissionID) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (*UnimplementedPermissionManagerServer) GetPermissions(ctx context.Context, req *PermissionIDs) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (*UnimplementedPermissionManagerServer) GetResourcePerm(ctx context.Context, req *ResourceIdentity) (*Resource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourcePerm not implemented")
}
func (*UnimplementedPermissionManagerServer) UpdatePermission(ctx context.Context, req *Resource) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (*UnimplementedPermissionManagerServer) DeletePermission(ctx context.Context, req *PermissionID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (*UnimplementedPermissionManagerServer) ListPermission(ctx context.Context, req *ListQuery) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermission not implemented")
}
func (*UnimplementedPermissionManagerServer) ListObjectResources(ctx context.Context, req *ListObjectResourcesRequest) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectResources not implemented")
}
func (*UnimplementedPermissionManagerServer) ListObjectPermissions(ctx context.Context, req *ObjectID) (*Permissions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListObjectPermissions not implemented")
}
func (*UnimplementedPermissionManagerServer) CheckResourcesPerm(ctx context.Context, req *CheckResourcesPermRequest) (*PermCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResourcesPerm not implemented")
}
func (*UnimplementedPermissionManagerServer) CheckSelfPermissions(ctx context.Context, req *SimpleResources) (*PermCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSelfPermissions not implemented")
}
func (*UnimplementedPermissionManagerServer) GetObjectsByResource(ctx context.Context, req *ResourceID) (*ObjectIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObjectsByResource not implemented")
}

func RegisterPermissionManagerServer(s *grpc.Server, srv PermissionManagerServer) {
	s.RegisterService(&_PermissionManager_serviceDesc, srv)
}

func _PermissionManager_AddPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).AddPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/AddPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).AddPermission(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/GetPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).GetPermission(ctx, req.(*PermissionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).GetPermissions(ctx, req.(*PermissionIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_GetResourcePerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).GetResourcePerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/GetResourcePerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).GetResourcePerm(ctx, req.(*ResourceIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/UpdatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).UpdatePermission(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermissionID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).DeletePermission(ctx, req.(*PermissionID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_ListPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).ListPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/ListPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).ListPermission(ctx, req.(*ListQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_ListObjectResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListObjectResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).ListObjectResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/ListObjectResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).ListObjectResources(ctx, req.(*ListObjectResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_ListObjectPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObjectID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).ListObjectPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/ListObjectPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).ListObjectPermissions(ctx, req.(*ObjectID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_CheckResourcesPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckResourcesPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).CheckResourcesPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/CheckResourcesPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).CheckResourcesPerm(ctx, req.(*CheckResourcesPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_CheckSelfPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).CheckSelfPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/CheckSelfPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).CheckSelfPermissions(ctx, req.(*SimpleResources))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionManager_GetObjectsByResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionManagerServer).GetObjectsByResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbac.PermissionManager/GetObjectsByResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionManagerServer).GetObjectsByResource(ctx, req.(*ResourceID))
	}
	return interceptor(ctx, in, info, handler)
}

var _PermissionManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rbac.PermissionManager",
	HandlerType: (*PermissionManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPermission",
			Handler:    _PermissionManager_AddPermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _PermissionManager_GetPermission_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _PermissionManager_GetPermissions_Handler,
		},
		{
			MethodName: "GetResourcePerm",
			Handler:    _PermissionManager_GetResourcePerm_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _PermissionManager_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _PermissionManager_DeletePermission_Handler,
		},
		{
			MethodName: "ListPermission",
			Handler:    _PermissionManager_ListPermission_Handler,
		},
		{
			MethodName: "ListObjectResources",
			Handler:    _PermissionManager_ListObjectResources_Handler,
		},
		{
			MethodName: "ListObjectPermissions",
			Handler:    _PermissionManager_ListObjectPermissions_Handler,
		},
		{
			MethodName: "CheckResourcesPerm",
			Handler:    _PermissionManager_CheckResourcesPerm_Handler,
		},
		{
			MethodName: "CheckSelfPermissions",
			Handler:    _PermissionManager_CheckSelfPermissions_Handler,
		},
		{
			MethodName: "GetObjectsByResource",
			Handler:    _PermissionManager_GetObjectsByResource_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rbac/rbac.proto",
}
