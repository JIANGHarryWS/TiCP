// Code generated by protoc-gen-go. DO NOT EDIT.
// source: license/license.proto

package license

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type QueueLicenseTypeListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *QueueLicenseTypeListRequest) Reset()         { *m = QueueLicenseTypeListRequest{} }
func (m *QueueLicenseTypeListRequest) String() string { return proto.CompactTextString(m) }
func (*QueueLicenseTypeListRequest) ProtoMessage()    {}
func (*QueueLicenseTypeListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c97486aaafd691, []int{0}
}

func (m *QueueLicenseTypeListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueueLicenseTypeListRequest.Unmarshal(m, b)
}
func (m *QueueLicenseTypeListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueueLicenseTypeListRequest.Marshal(b, m, deterministic)
}
func (m *QueueLicenseTypeListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueLicenseTypeListRequest.Merge(m, src)
}
func (m *QueueLicenseTypeListRequest) XXX_Size() int {
	return xxx_messageInfo_QueueLicenseTypeListRequest.Size(m)
}
func (m *QueueLicenseTypeListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueLicenseTypeListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueueLicenseTypeListRequest proto.InternalMessageInfo

type QueueLicenseTypeListResponse struct {
	LicenseTypes         []*LicenseType `protobuf:"bytes,1,rep,name=license_types,json=licenseTypes,proto3" json:"license_types,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte         `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32          `json:"-" yaml:"-" xml:"-"`
}

func (m *QueueLicenseTypeListResponse) Reset()         { *m = QueueLicenseTypeListResponse{} }
func (m *QueueLicenseTypeListResponse) String() string { return proto.CompactTextString(m) }
func (*QueueLicenseTypeListResponse) ProtoMessage()    {}
func (*QueueLicenseTypeListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c97486aaafd691, []int{1}
}

func (m *QueueLicenseTypeListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueueLicenseTypeListResponse.Unmarshal(m, b)
}
func (m *QueueLicenseTypeListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueueLicenseTypeListResponse.Marshal(b, m, deterministic)
}
func (m *QueueLicenseTypeListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueueLicenseTypeListResponse.Merge(m, src)
}
func (m *QueueLicenseTypeListResponse) XXX_Size() int {
	return xxx_messageInfo_QueueLicenseTypeListResponse.Size(m)
}
func (m *QueueLicenseTypeListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueueLicenseTypeListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueueLicenseTypeListResponse proto.InternalMessageInfo

func (m *QueueLicenseTypeListResponse) GetLicenseTypes() []*LicenseType {
	if m != nil {
		return m.LicenseTypes
	}
	return nil
}

type LicenseType struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeName             string   `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	LicenceValid         bool     `protobuf:"varint,3,opt,name=licence_valid,json=licenceValid,proto3" json:"licence_valid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-"`
}

func (m *LicenseType) Reset()         { *m = LicenseType{} }
func (m *LicenseType) String() string { return proto.CompactTextString(m) }
func (*LicenseType) ProtoMessage()    {}
func (*LicenseType) Descriptor() ([]byte, []int) {
	return fileDescriptor_36c97486aaafd691, []int{2}
}

func (m *LicenseType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LicenseType.Unmarshal(m, b)
}
func (m *LicenseType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LicenseType.Marshal(b, m, deterministic)
}
func (m *LicenseType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LicenseType.Merge(m, src)
}
func (m *LicenseType) XXX_Size() int {
	return xxx_messageInfo_LicenseType.Size(m)
}
func (m *LicenseType) XXX_DiscardUnknown() {
	xxx_messageInfo_LicenseType.DiscardUnknown(m)
}

var xxx_messageInfo_LicenseType proto.InternalMessageInfo

func (m *LicenseType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LicenseType) GetTypeName() string {
	if m != nil {
		return m.TypeName
	}
	return ""
}

func (m *LicenseType) GetLicenceValid() bool {
	if m != nil {
		return m.LicenceValid
	}
	return false
}

func init() {
	proto.RegisterType((*QueueLicenseTypeListRequest)(nil), "license.QueueLicenseTypeListRequest")
	proto.RegisterType((*QueueLicenseTypeListResponse)(nil), "license.QueueLicenseTypeListResponse")
	proto.RegisterType((*LicenseType)(nil), "license.LicenseType")
}

func init() { proto.RegisterFile("license/license.proto", fileDescriptor_36c97486aaafd691) }

var fileDescriptor_36c97486aaafd691 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xcb, 0x4b, 0xc3, 0x40,
	0x10, 0xc6, 0x4d, 0x0b, 0xb6, 0xdd, 0xaa, 0x87, 0xa5, 0x42, 0x68, 0x15, 0x43, 0x54, 0xc8, 0xc5,
	0x2c, 0xd4, 0x93, 0x57, 0xcf, 0x45, 0x30, 0x88, 0xa0, 0x97, 0xb0, 0x4d, 0xc6, 0xb2, 0xb0, 0x2f,
	0x3b, 0xbb, 0x42, 0xfe, 0x7b, 0x49, 0xb2, 0xd5, 0x1e, 0x8a, 0x9e, 0x96, 0xef, 0x9b, 0x99, 0xfd,
	0xcd, 0x83, 0x9c, 0x4b, 0x51, 0x81, 0x46, 0x60, 0xe1, 0xcd, 0xed, 0xd6, 0x38, 0x43, 0x47, 0x41,
	0xce, 0xaf, 0x36, 0xc6, 0x6c, 0x24, 0xb0, 0xce, 0x5e, 0xfb, 0x0f, 0xe6, 0x84, 0x02, 0x74, 0x5c,
	0xd9, 0x3e, 0x33, 0xbd, 0x24, 0x8b, 0x67, 0x0f, 0x1e, 0x56, 0x7d, 0xc1, 0x4b, 0x63, 0x61, 0x25,
	0xd0, 0x15, 0xf0, 0xe9, 0x01, 0x5d, 0xfa, 0x46, 0x2e, 0x0e, 0x87, 0xd1, 0x1a, 0x8d, 0x40, 0x1f,
	0xc8, 0x69, 0x40, 0x95, 0xae, 0xb1, 0x80, 0x71, 0x94, 0x0c, 0xb3, 0xe9, 0x72, 0x96, 0xef, 0xfa,
	0xd9, 0x2b, 0x2c, 0x4e, 0xe4, 0xaf, 0xc0, 0xb4, 0x24, 0xd3, 0xbd, 0x20, 0x3d, 0x23, 0x03, 0x51,
	0xc7, 0x51, 0x12, 0x65, 0x93, 0x62, 0x20, 0x6a, 0xba, 0x20, 0x93, 0xf6, 0xc7, 0x52, 0x73, 0x05,
	0xf1, 0xa0, 0xb3, 0xc7, 0xad, 0xf1, 0xc4, 0x15, 0xd0, 0xeb, 0x80, 0xad, 0xa0, 0xfc, 0xe2, 0x52,
	0xd4, 0xf1, 0x30, 0x89, 0xb2, 0x71, 0x00, 0x54, 0xf0, 0xda, 0x7a, 0x4b, 0x4b, 0x46, 0x01, 0x40,
	0x81, 0xcc, 0x0e, 0x8d, 0x41, 0x6f, 0x7e, 0xfa, 0xfc, 0x63, 0x09, 0xf3, 0xdb, 0x7f, 0xb2, 0xfa,
	0x5d, 0xa4, 0x47, 0x8f, 0xec, 0xfd, 0xae, 0xf1, 0x5c, 0xa3, 0xe7, 0x3a, 0xaf, 0x34, 0xb3, 0x68,
	0x99, 0xd0, 0x0e, 0xb6, 0x9a, 0x4b, 0x56, 0x19, 0xa5, 0x8c, 0xee, 0x0f, 0xb1, 0xbb, 0xd6, 0xfa,
	0xb8, 0x93, 0xf7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x95, 0xbb, 0xf8, 0x9e, 0xc7, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LicenseClient is the client API for License service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LicenseClient interface {
	// QueueTypeList 获取LicenseType列表
	QueueLicenseTypeList(ctx context.Context, in *QueueLicenseTypeListRequest, opts ...grpc.CallOption) (*QueueLicenseTypeListResponse, error)
}

type licenseClient struct {
	cc *grpc.ClientConn
}

func NewLicenseClient(cc *grpc.ClientConn) LicenseClient {
	return &licenseClient{cc}
}

func (c *licenseClient) QueueLicenseTypeList(ctx context.Context, in *QueueLicenseTypeListRequest, opts ...grpc.CallOption) (*QueueLicenseTypeListResponse, error) {
	out := new(QueueLicenseTypeListResponse)
	err := c.cc.Invoke(ctx, "/license.License/QueueLicenseTypeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseServer is the server API for License service.
type LicenseServer interface {
	// QueueTypeList 获取LicenseType列表
	QueueLicenseTypeList(context.Context, *QueueLicenseTypeListRequest) (*QueueLicenseTypeListResponse, error)
}

// UnimplementedLicenseServer can be embedded to have forward compatible implementations.
type UnimplementedLicenseServer struct {
}

func (*UnimplementedLicenseServer) QueueLicenseTypeList(ctx context.Context, req *QueueLicenseTypeListRequest) (*QueueLicenseTypeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueLicenseTypeList not implemented")
}

func RegisterLicenseServer(s *grpc.Server, srv LicenseServer) {
	s.RegisterService(&_License_serviceDesc, srv)
}

func _License_QueueLicenseTypeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueLicenseTypeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).QueueLicenseTypeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/license.License/QueueLicenseTypeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).QueueLicenseTypeList(ctx, req.(*QueueLicenseTypeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _License_serviceDesc = grpc.ServiceDesc{
	ServiceName: "license.License",
	HandlerType: (*LicenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueLicenseTypeList",
			Handler:    _License_QueueLicenseTypeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "license/license.proto",
}
