#!/usr/bin/env bash
#
# Copyright (C) 2020 LambdaCal Inc.
#
# Installation script of PSP
#

##########################################################
# PSP INSTALLATION SCRIPT - Don't modify below scripts
##########################################################
if [[ -f /etc/rc.d/init.d/functions ]]; then
    . /etc/rc.d/init.d/functions
fi
MOVE_TO_COL="echo -en \\033[90G"

#-------------------------------------------------------------------
# Name: psp_action
#
# Synopsis: psp_action string /bin/true | /bin/false
#
# Description: Log the [ OK ] or [ Fail ]
#-------------------------------------------------------------------
psp_action() {
    local STRING rc

    STRING=$1
    echo -en "$STRING "
    shift
    "$@" && success $"$STRING" || failure $"$STRING"
    rc=$?
    echo
    return $rc
}

#-------------------------------------------------------------------
# Name: log
#
# Synopsis: log "\033[1;34m <message> \033[0m"
#
# Description: Log the information into install.log
#-------------------------------------------------------------------
log()
{
    echo -e "$@" | tee -a $INSTALL_LOG
}

#-------------------------------------------------------------------
# Name: log_success
#
# Synopsis: log_success "\033[1;34m <message> \033[0m"
#
# Description: Log the information into install.log and with [ OK ]
#-------------------------------------------------------------------
log_success()
{
   psp_action "$@" /bin/true | tee -a $INSTALL_LOG
}

#-------------------------------------------------------------------
# Name: error
#
# Synopsis: error "\033[1;31m <message> \033[0m"
#
# Description: Echo error messages
#-------------------------------------------------------------------
error()
{
  psp_action "Error: \033[1;31m$@\033[0m" /bin/false | tee -a $INSTALL_LOG
}

#-------------------------------------------------------------------
# Name: logerr
#
# Synopsis: loger "\033[1;31m <message> \033[0m"
#
# Description: Log the error messages into install.log
#-------------------------------------------------------------------
logerr()
{
  psp_action "Error: \033[1;31m$@\033[0m" /bin/false | tee -a $INSTALL_LOG
  echo "Error: $@" >> ${INSTALL_LOG}
}

#-------------------------------------------------------------------
# Name: logwarn
#
# Synopsis: logwarn "\033[1;33m <message> \033[0m"
#
# Description: Log the warning messages into install.log
#-------------------------------------------------------------------
logwarn()
{
  echo -en "Warn: \033[1;33m$@\033[0m" && warning
  echo
  echo "Warn: $@" >> ${INSTALL_LOG}
}

#-------------------------------------------------------------------
# Name: logtips
#
# Synopsis: logtips "\033[1;32m <message> \033[0m"
#
# Description: Log the tip messages into install.log
#-------------------------------------------------------------------
logtips()
{
  echo -e "\033[1;32m$@\033[0m"
  echo "$@" >> ${INSTALL_LOG}
}

# Import the environment variables in psp.conf first
if [[ $1 = "-c" || $1 = "-C" ]]; then
  if [[ "X$2" != "X" ]]; then
    source ./$2 || exit 1
  else
    error "Installation required install.conf is not specified, exit."
  fi
elif [[ $1 = "-u" || $1 = "-U" ]]; then
  if [[ "X$2" != "X" ]]; then
    source ./$2 || exit 1
  else
    error "Update required install.conf is not specified, exit."
  fi
fi


# The rpm database checking
if [[ -n ${RPM_DB_PATH} ]] ; then
    RPM_DB_PATH_OPTION="--dbpath ${RPM_DB_PATH}"
fi

# Generate the installing log
INSTALL_LOG=${YS_TOP}/install.log

# The necessary packages need to check
NECESSARY_PKGS="python"

#==========================================================
# The name of third party packages which will be installed
#
# setuptools (dependencies for supervisor)
SETUPTOOLS_PKG_NAME="setuptools"
# meld (dependencies for supervisor)
MELD_PKG_NAME="meld3"
# supervisor
SUPERVISOR_PKG_NAME="supervisor"
# psutil
PSUTIL_PKG_NAME="psutil"
# node
NODE_PKG_NAME="node"
# nginx
NGINX_PKG_NAME="nginx"
# prometheus
PROMETHEUS_PKG_NAME="prometheus"
# kafka
KAFKA_PKG_NAME="kafka"
# java
JAVA_PKG_NAME="jre"

# Redis
REDIS_PKG_NAME="redis"

#============================================================

# Define the third party source code directory
THIRD_PARTY=../3rd_party

# Define the third party software installation directory
THIRD_PARTY_TARGET=${YS_TOP}/3rd_party

# Define the PSP installation directory
PSP_INSTALL_DIR=${YS_TOP}

# Define where PSP RPM package is
PSP_RPM_PATH="./psp-*.rpm"

# Define the name of the database which will be created
DB_NAME=psp

# Define whether to init database
INIT_DB="true"

# Define the directory under $YS_TOP to store ssl certs
SSL_CERTS=certs

# Define the default http schema (http/https)
HTTP_PROTOCOL=https


#-------------------------------------------------------------------
# Name: check_env
#
# Synopsis: check_env
#
# Description: Check current linux configuration.
# 1.Check if environment variables is defined correctly
# 2.Check if $YS_ADMINS is existed
# 3.Check if the installation required packages are installed
# 4.Create target directory: $YS_TOP, $YS_TOP/3rd_party
# 5.Check mysql
#-------------------------------------------------------------------
check_env()
{
  echo "Check."
  # Check necessary configuration
  echo "Check config."
  # Check if the content of variable "YS_TOP" is started with "/"
  if [ ${YS_TOP:0:1} != "/" ];then
    error  "Installation required var \"INSTALL_DIR\" is set illegally in install.conf, exit."
    exit 1
  fi
  # Check if variable "USE_REMOTE_DB" is defined correctly
  if [[ "$USE_REMOTE_DB" != "yes" && "$USE_REMOTE_DB" != "no" && "$USE_REMOTE_DB" != "Yes" && "$USE_REMOTE_DB" = "No" ]];then
    error "Installation required var \"USE_REMOTE_DB\" is set illegally in install.conf, exit."
    exit 1
  fi
  # Check if variable "NGINX_SERVER_ENABLE_HTTPS" is defined correctly
  if [[ "$NGINX_SERVER_ENABLE_HTTPS" != "yes" && "$NGINX_SERVER_ENABLE_HTTPS" != "no" && "$NGINX_SERVER_ENABLE_HTTPS" != "Yes" && "$NGINX_SERVER_ENABLE_HTTPS" = "No" ]];then
    MOVE_TO_COL="echo -en \\033[100G"
    error "Installation required var \"NGINX_SERVER_ENABLE_HTTPS\" is set illegally in install.conf, exit."
    exit 1
  fi
  if [ x"$NGINX_SERVER_HTTPS_SSL_CERTIFICATION_CN" = "x" ];then
    MOVE_TO_COL="echo -en \\033[110G"
    error "Installation required var \"NGINX_SERVER_HTTPS_SSL_CERTIFICATION_CN\" is not set in install.conf, exit."
    exit 1
  fi
  # Check if the content of variable "YS_ADMIN" is NULL
  if [ x"$YS_ADMINS" = "x" ];then
    error "Installation required var \"YS_ADMINS\" is not set in install.conf, exit."
    exit 1
  fi

  echo "Check dependencies."

    # Check the installation required packages
    for _pkg in $NECESSARY_PKGS; do
        echo "Check $_pkg."
        rpm -qi  $_pkg  &>/dev/null || which $_pkg &>/dev/null
        if [ "$?" != "0" ];then
            error "Installation required package \"$_pkg\" is not installed, exit."
            exit 1
        fi
    done

  # Check if psp has been installed
  psp=$(rpm -qa ${RPM_DB_PATH_OPTION} | grep ^psp-[0-9])
  if [ x"${psp}" != "x" ];then
    error "PSP(${psp}) has been installed, uninstall it first."
    exit 1
  fi
  # Create directory $YS_TOP
  mkdir -p $YS_TOP
  if [ "$?" != "0" ];then
    error  "Cannot create directory ${YS_TOP}, exit."
    exit 1
  fi
  # Create directory $THIRD_PARTY_TARGET
  mkdir -p $THIRD_PARTY_TARGET
  if [ "$?" != "0" ];then
    error  "Cannot create directory ${THIRD_PARTY_TARGET}, exit."
    exit 1
  fi
  # Create directory $SSL_CERTS
  mkdir -p $YS_TOP/psp/$SSL_CERTS
  if [ "$?" != "0" ];then
    error  "Cannot create directory ${SSL_CERTS}, exit."
    exit 1
  fi
}

#-------------------------------------------------------------------
# Name: check_mysql
#
# Synopsis: check_mysql
#
# Description: Check local mysql and create database
# 1. check if mysql is installed
# 2. get mysql username, password and port
# 3. attempt to connect mysql
# 4. check if database is existed
# 5. create database
#-------------------------------------------------------------------
check_mysql()
{
  log "Check MySQL."
  if [[ "$USE_REMOTE_DB" = "Yes" || "$USE_REMOTE_DB" = "yes" ]];then
      log "Use remote database."
  else
      # The mysql installation directory is /usr/bin by default
      if [[ -z "$MYSQL_DIR" ]] ; then
          MYSQL_DIR=/usr
      fi

      # Use local mysql database
      log "Use local database."
      # Check if mysql is installed
      if [[ -x ${MYSQL_DIR}/bin/mysqld_safe || -x ${MYSQL_DIR}/sbin/mysqld ]] ; then
          mysql_installed="true"
      fi

      if [ "$mysql_installed" != "true" ];then
          logerr "The MySQL database was not found, exit."
          exit 1
      fi

      # Get mysql username, password, port
      while :
      do
        echo -en  "Please input MySQL username: " | tee -a $INSTALL_LOG
        while :
        do
          read  mysql_usr
          if [ x"$mysql_usr" = "x" ];then
            echo -en "Username cannot be empty.Please input again: " | tee -a $INSTALL_LOG
          else
            break 1
          fi
        done
        echo -en "Please input MySQL password: " | tee -a $INSTALL_LOG
        while :
        do
          read -s mysql_pwd
          if [ x"$mysql_pwd" = "x" ];then
            echo -en "Password cannot be empty.Please input again: " | tee -a $INSTALL_LOG
          else
            break 1
          fi
        done
          echo
          echo -en "MySQL port(Press Enter if use default port \"3306\"): " | tee -a $INSTALL_LOG
          read mysql_port
          if [ x"$mysql_port" = x ]; then
            mysql_port=3306
          fi
          log "Attempt to connect database."
          # Attempt to connect database
          db_connect="mysql -u$mysql_usr -p$mysql_pwd -P $mysql_port"
          $db_connect </dev/null  >> $INSTALL_LOG 2>&1
          if [ "$?" != "0" ]; then
            logerr "Login failed, make sure input the correct username, password, and port."
          else
            log "Connect successfully."
            log "Create database \"$DB_NAME\"."
            # Check if database is existed
            mysql -u$mysql_usr -p$mysql_pwd -P $mysql_port -e "use $DB_NAME"   >> $INSTALL_LOG 2>&1
            if [ "$?" = "0" ];then
              logwarn "Existed database \"$DB_NAME\", init_db.sh will not be executed."
              INIT_DB="false"
            else
              # Create  database
              INIT_DB="true"
              mysql -u$mysql_usr -p$mysql_pwd -P $mysql_port -e "create database $DB_NAME"   >> $INSTALL_LOG 2>&1
              if [ "$?" != "0" ];then
                logerr "Can not create database \"$DB_NAME\", exit."
                exit 1
              fi
              log_success "Create database \"$DB_NAME\" successfully."
            fi
            break
          fi
      done
  fi
}

#-------------------------------------------------------------------
# Name: configure_admins
#
# Synopsis: configure_admins
#
# Description: Configure admins by modifying the profile
#-------------------------------------------------------------------
configure_admins()
{
  log "Configuring the admins."
  if [[ $YS_ADMINS != "yskj" ]]; then
    # Modify YS_ADMIN in profile
    sed -i "/YS_ADMIN=/{s/^\s*YS_ADMIN=.*$/YS_ADMIN=\"${YS_ADMINS}\"/}" ${YS_TOP}/psp/config/psp.conf   >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the admins, exit."
        exit 1
    fi
  fi
  log_success "Configure the admins successfully."
}

#-------------------------------------------------------------------
# Name: generate_ssl_certs
#
# Synopsis: generate_ssl_certs
#
# Description: Generate ssl certs for nginx server for frontend
#-------------------------------------------------------------------
generate_ssl_certs()
{
  log "Generating open ssl certs."
  cd $YS_TOP/psp/$SSL_CERTS

  HOST_IP=`hostname -I`
  HOSTNAME=`hostname`
  HOSTNAMEFULL=`hostname -f`

  sed -i "s/^\s*CN =.*/CN = ${HOSTNAME}/" ${YS_TOP}/psp/config/cert/cert.conf
  echo "DNS.1 = ${HOSTNAME}" >> ${YS_TOP}/psp/config/cert/cert.conf
  echo "DNS.2 = ${HOSTNAMEFULL}" >> ${YS_TOP}/psp/config/cert/cert.conf
  echo "IP.1 = ${HOST_IP}" >> ${YS_TOP}/psp/config/cert/cert.conf

  openssl req -x509 -sha256 -nodes -days 3650 -newkey rsa:1024 -keyout cert.key -out cert.pem  -config $YS_TOP/psp/config/cert/cert.conf >> $INSTALL_LOG 2>&1
  if [ "$?" != "0" ]; then
     logerr "Failed to generate self-signed cert, exit."
     exit 1
  fi

  cd - >> $INSTALL_LOG 2>&1 || pwd
  log_success "Generated open ssl certs for nginx successfully."
}


#-------------------------------------------------------------------
# Name: configure_port
#
# Synopsis: configure_port
#
# Description: Configure ports by modifying files
# 1.Configure grpc server port by modifying prod.yml
# 2.Configure gRPC port in profile
# 3.Configure nginx server port by modifying frontend.conf
# 4.Configure nginx port in profile
# 5.Configure prometheus port by modifying profile
# 6.Replace the prometheus url in prod.yml
# 7.Configure kafka port by modifying profile
# 8.Configure the kafka server.properties
# 9.Configure prod.yml to replace the kafka port
# 10.Configure the kafka server.properties
# 11.Configure psp monitor port by modifying prod.yml and prometheus psp.json
#-------------------------------------------------------------------
configure_port()
{

  log "Configuring the ip and port."

  # Configure grpc server port by modifying prod.yml
  if [ x"$GRPC_SERVER_PORT" != "x" ]; then
    log "Configuring the GRPC server port."
    sed -i "s/addr: .*$/addr: :${GRPC_SERVER_PORT}/" ${YS_TOP}/psp/config/prod.yml   >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the GRPC server port, exit."
        exit 1
    fi

    # Configure gRPC port in profile
    sed -i "s/^\s*GRPC_SERVER_PORT=.*/GRPC_SERVER_PORT=${GRPC_SERVER_PORT}/" ${YS_TOP}/psp/config/psp.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the GRPC_SERVER_PORT port in profile, exit."
        exit 1
    fi

    log_success "Configure the GRPC server port successfully."
  fi


  # Configure grpc server port by modifying prod.yml
  if [ x"${GRPC_HTTP_SERVER_PORT}" != "x" ]; then
    log "Configuring the GRPC http server port."
    sed -i "0,/port:/{s/port:.*$/port: ${GRPC_HTTP_SERVER_PORT}/}" ${YS_TOP}/psp/config/prod.yml   >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the GRPC http server port, exit."
        exit 1
    fi

    # Configure gRPC port in profile
    sed -i "s/^\s*GRPC_HTTP_SERVER_PORT=.*/GRPC_HTTP_SERVER_PORT=${GRPC_HTTP_SERVER_PORT}/" ${YS_TOP}/psp/config/psp.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the GRPC_HTTP_SERVER_PORT port in profile, exit."
        exit 1
    fi

    log_success "Configure the GRPC http server port successfully."
  fi

  # Configure nginx server port by modifying frontend.conf
  if [ "$NGINX_SERVER_ENABLE_HTTPS" = "yes" -o "$NGINX_SERVER_ENABLE_HTTPS" = "Yes" ]; then
    NGINX_SERVER_PORT=${NGINX_SERVER_HTTPS_PORT}
    # check port used
    lsof -i:$NGINX_SERVER_HTTPS_PORT  >> $INSTALL_LOG 2>&1
    if [ "$?" = "0" ]; then
        logwarn "The https port ${NGINX_SERVER_HTTPS_PORT} has been used by other process, update this port value by modify parameter NGINX_SERVER_HTTPS_PORT in ${YS_TOP}/psp/config/profile after installation."
    fi
  else
    NGINX_SERVER_PORT=${NGINX_SERVER_HTTP_PORT}
    HTTP_PROTOCOL=http
    # check port used
    lsof -i:$NGINX_SERVER_HTTP_PORT  >> $INSTALL_LOG 2>&1
    if [ "$?" = "0" ]; then
        logwarn "The http port ${NGINX_SERVER_HTTP_PORT} has been used by other process, update this port value by modify parameter NGINX_SERVER_HTTP_PORT in ${YS_TOP}/psp/config/profile after installation."
    fi
  fi

  # replace ssl key in frontend.conf
  sed -i "s:ssl_certificate .*$:ssl_certificate   ${YS_TOP}/psp/${SSL_CERTS}/cert.pem;:g" ${YS_TOP}/psp/config/nginx/frontend.conf  >> $INSTALL_LOG 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to configure the NGINX ssl certification, exit."
      exit 1
  fi
  sed -i "s:ssl_certificate_key .*$:ssl_certificate_key   ${YS_TOP}/psp/${SSL_CERTS}/cert.key;:g" ${YS_TOP}/psp/config/nginx/frontend.conf  >> $INSTALL_LOG 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to configure the NGINX ssl certification key, exit."
      exit 1
  fi
  if [ x"$NGINX_SERVER_PORT" != "x" ]; then
    log "Configuring the NGINX server port."
    sed -i "0,/listen/{s/listen.*$/listen   $NGINX_SERVER_HTTP_PORT;/}" ${YS_TOP}/psp/config/nginx/frontend.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the NGINX http server port, exit."
        exit 1
    fi

    # Configure nginx port in profile
    sed -i "s/^\s*NGINX_SERVER_HTTPS_PORT=.*/NGINX_SERVER_HTTPS_PORT=${NGINX_SERVER_HTTPS_PORT}/" ${YS_TOP}/psp/config/psp.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the NGINX_SERVER_HTTPS_PORT port in profile, exit."
        exit 1
    fi

    sed -i "s/^\s*NGINX_SERVER_HTTP_PORT=.*/NGINX_SERVER_HTTP_PORT=${NGINX_SERVER_HTTP_PORT}/" ${YS_TOP}/psp/config/psp.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the NGINX_SERVER_HTTP_PORT port in profile, exit."
        exit 1
    fi

    # Configure nginx server protocol in profile
    sed -i "s/^\s*NGINX_SERVER_PROTOCOL=.*/NGINX_SERVER_PROTOCOL=${HTTP_PROTOCOL}/" ${YS_TOP}/psp/config/psp.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the parameter NGINX_SERVER_PROTOCOL in profile, exit."
        exit 1
    fi

    log_success "Configure the NGINX server port successfully."
  fi

  # Configure prometheus port by modifying profile
  if [[ "${PROMETHEUS_PORT}x" != "x" ]] ; then
    log "Configuring the prometheus port."

    sed -i "s/^\s*PROMETHEUS_PORT=.*/PROMETHEUS_PORT=${PROMETHEUS_PORT}/" ${YS_TOP}/psp/config/psp.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the prometheus port, exit."
        exit 1
    fi

    # Replace the prometheus url in prod.yml
    sed -i "s|prometheus_server_endpoint:.*$|prometheus_server_endpoint: \"http://localhost:${PROMETHEUS_PORT}\"|" ${YS_TOP}/psp/config/prod.yml >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the prometheus port in prod.yml, exit."
        exit 1
    fi

    log_success "Configure the prometheus port successfully."
  fi


  # Configure kafka port by modifying profile
  if [[ "${KAFKA_PORT}x" != "x" ]] ; then
    log "Configuring the kafka port."

    sed -i "s/^\s*KAFKA_PORT=.*/KAFKA_PORT=${KAFKA_PORT}/" ${YS_TOP}/psp/config/psp.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the kafka port, exit."
        exit 1
    fi

    # Configure the kafka server.properties
    sed -i "s#PLAINTEXT://localhost:[0-9]\+#PLAINTEXT://localhost:${KAFKA_PORT}#" ${YS_TOP}/psp/config/kafka/server.properties >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the kafka listeners in server.properties, exit."
        exit 1
    fi

    # Configure prod.yml to replace the kafka port
    sed -i "/kafka/{n;n;n;s/\".*\"/\"localhost:${KAFKA_PORT}\"/}" ${YS_TOP}/psp/config/prod.yml   >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the kafka port for prod.yml, exit."
        exit 1
    fi

    log_success "Configure the kafka port successfully."
  fi

  # Configure psp monitor port by modifying prod.yml and prometheus psp.json
  if [[ "${PSP_MONITOR_PORT}x" != "x" ]] ; then
    log "Configuring the psp monitor port."

    # Configure the prod.yml
    sed -i "/monitor:/{n;n;n;s|listen:.*$|listen: \":${PSP_MONITOR_PORT}\"|}" ${YS_TOP}/psp/config/prod.yml >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure psp monitor port in prod.yml, exit."
        exit 1
    fi

    # Configure psp.json
    sed -i "/targets/{n;s|\".*\"|\"localhost:${PSP_MONITOR_PORT}\"|}" ${YS_TOP}/psp/config/prometheus/prom/config/psp.json >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure psp monitor port in prometheus config file, exit."
        exit 1
    fi

    log_success "Configure the psp monitor port successfully."
  fi

  # Configure redis port by modifying profile
  if [[ "${REDIS_SERVER_PORT}x" != "x" ]] ; then
    log "Configuring the redis server port."

    sed -i "s/^\s*REDIS_SERVER_PORT=.*/REDIS_SERVER_PORT=${REDIS_SERVER_PORT}/" ${YS_TOP}/psp/config/psp.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the redis server port, exit."
        exit 1
    fi

    sed -i "s/^\s*port .*/port ${REDIS_SERVER_PORT}/" ${YS_TOP}/psp/config/redis/redis.conf >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure the redis conf port, exit."
        exit 1
    fi

    # Configure the prod.yml
    sed -i "/redis:/{n;n;n;s|addr:.*$|addr: 127.0.0.1:${REDIS_SERVER_PORT}|}" ${YS_TOP}/psp/config/prod.yml >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to configure redis addr in prod.yml, exit."
        exit 1
    fi

    log_success "Configure the redis port successfully."
  fi

  log "Configure the ip and port successfully."
}

#-------------------------------------------------------------------
# Name: source_profile
#
# Synopsis: source_profile
#
# Description: Source profile to use environment variable YSADMIN
#     Executing init_db.sh will use YSADMIN
#-------------------------------------------------------------------
source_profile()
{
    cd ${YS_TOP}/psp/config  >> $INSTALL_LOG 2>&1 || exit 1
    # Source profile
    source ./profile   >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to source profile, exit."
        exit 1
    fi
    cd - >> $INSTALL_LOG 2>&1 || pwd
}

#-------------------------------------------------------------------
# Name: exec_init_db
#
# Synopsis: exec_init_db
#
# Description: Execute init_db.sh to initialize database
#     This operation needs environment variable YS_ADMIN
#     You need source profile first
#-------------------------------------------------------------------
exec_init_db()
{
    cd ${YS_TOP}/psp/schema  >> $INSTALL_LOG 2>&1 || exit 1
    # Exec init_db.sh
    sh init_db.sh ${mysql_usr} ${mysql_pwd} ${mysql_port} ${DB_NAME} >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ]; then
      logerr "Failed to initialize the database, exit."
      exit 1
    fi
    cd - >> $INSTALL_LOG 2>&1 || pwd
}

#-------------------------------------------------------------------
# Name: configure_mysql
#
# Synopsis: configure_mysql
#
# Description: Configure mysql
# 1.Modify mysql dsn in prod.yml
# 2.Modify variable DB_CONN in init_db.sh
# 3.Exec init_db.sh
#-------------------------------------------------------------------
configure_mysql()
{
  if [[ "$USE_REMOTE_DB" = "No" || "$USE_REMOTE_DB" = "no" ]]; then
    log "Configuring MySQL."
    # Modify mysql dsn in prod.yml
    sed -i "/dsn/{s/dsn:.*$/dsn: \"${mysql_usr}:${mysql_pwd}@tcp(localhost:${mysql_port})\/${DB_NAME}?charset=utf8\&parseTime=true\&loc=Local\"/}" ${YS_TOP}/psp/config/prod.yml  >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ];then
      logerr "Failed to configure \"MySQL dsn\" in prod.yml, exit."
      exit 1
    fi

    if [ "${INIT_DB}" == "true" ];then
      source_profile
      exec_init_db
    fi
    # Encrypt mysql
    encrypt_mysql

    log_success "Configure MySQL successfully."
  fi
}


#-------------------------------------------------------------------
# Name: encrypt_mysql
#
# Synopsis: encrypt_mysql
#
# Description: encrypt mysql
# 1.Encrypt mysql dsn username and password in prod.yml
#-------------------------------------------------------------------
encrypt_mysql()
{
max_check_num=10
prod_file="${YS_TOP}/psp/config/prod.yml"
awk '/mysql/,/grpc/{print NR $0}' ${prod_file} | while read line
do
  line_num=$(echo ${line} | awk '{print $1}')
  has_encrypt=$(echo ${line} | awk '{print $2}' | sed s/[[:space:]]//g | grep "^encrypt:")
  if [ "$?" == "0" ];then
    encrypt=$(echo ${line} | awk -F : '{print $2}' | sed s/[[:space:]]//g)
    if [ "$encrypt" == "true" ];then
      for value in $( seq 1 ${max_check_num} )
      do
        next_line_num=$((${line_num}+${value}))
        dsn=$(awk -v num="${next_line_num}" 'NR==num' ${prod_file} | sed s/[[:space:]]//g)
        check_dsn=$(echo ${dsn} | grep "^dsn:")
        if [ "$?" == "0" ];then
          username=$(echo ${dsn} | awk -F : '{print $2}' | sed 's/"//' | sed s/[[:space:]]//g)
          passwd=$(echo ${dsn} | awk -F : '{print $3}' | awk -F @ '{print $1}' | sed s/[[:space:]]//g)
          encrypt_username=$(${YS_TOP}/psp/bin/encrypt ${username})
          encrypt_passwd=$(${YS_TOP}/psp/bin/encrypt ${passwd})
          if [ "${encrypt_username}" == "" ] || [ "${encrypt_passwd}" == "" ] ;then
            echo "Encrypt failed"
            exit 1
          fi

          sed -i "${next_line_num}s:${username}:${encrypt_username}:g" ${prod_file}
          sed -i "${next_line_num}s:${passwd}:${encrypt_passwd}:g" ${prod_file}
          break
        else
          continue
        fi
      done
    fi
  fi
done
}


#-------------------------------------------------------------------
# Name: help_info
#
# Synopsis: help_info
#
# Description: Print some informations
#-------------------------------------------------------------------
help_info()
{
  if [[ "${INIT_DB}" != "true" ]];then
      log "Due to database existence, failed to create MYSQL database for PSP."
      log "Please go to directory ${YS_TOP}/psp/schema to check the DB schemas whether or not recreate the tables"
      log ""
  fi
  log "To complete your installation and get PSP up and running, follow these steps: "
  log "1. As root, set the PSP environment"
  log "   > source ${YS_TOP}/psp/config/profile"
  log "2. If you choose to use remote database, please configure the database by yourself."
  log "3. Start PSP services."
  log "   > ysadmin start all"
  log "4. Check services have started."
  log "   > ysadmin list"
  log "5. Access the PSP by opening desktop browser with the following URL:"

  LONG_HOST_NAME=`hostname -f`
  IP_ADDR=`hostname -i`
  log "   ${HTTP_PROTOCOL}://${LONG_HOST_NAME}:${NGINX_SERVER_PORT} or ${HTTP_PROTOCOL}://${IP_ADDR}:${NGINX_SERVER_PORT}"
}


#------------------------------------------------------------------------
# Name: install_supervisor
#
# Synopsis: install_supervisor
#
# Description: Install software supervisor
#------------------------------------------------------------------------
install_supervisor()
{
  # Uncompress setuptools which is need by supervisor
  log "Installing setuptools."
  tar -zxf ${THIRD_PARTY}/${SETUPTOOLS_PKG_NAME}.tar.gz -C ${THIRD_PARTY_TARGET} >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ];then
      logerr "Failed to uncompress setuptools, exit."
      exit 1
  fi
  # Install setuptools which is need by supervisor
  cd ${THIRD_PARTY_TARGET}/${SETUPTOOLS_PKG_NAME} >> ${INSTALL_LOG} 2>&1 || exit 1

  # Uninstall the original setuptools for python2
  rpm -e --nodeps python-setuptools >> ${INSTALL_LOG} 2>&1
  python setup.py install  >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to install setuptools, exit."
      exit 1
  fi
  cd - >> ${INSTALL_LOG} 2>&1 || pwd
  log_success "Install setuptools successfully."

  # Uncompress meld3 which is need by supervisor
  log "Installing meld."
  tar -zxf ${THIRD_PARTY}/${MELD_PKG_NAME}.tar.gz -C ${THIRD_PARTY_TARGET}  >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to uncompress meld, exit."
      exit 1
  fi
  # Install meld3 which is need by supervisor
  cd ${THIRD_PARTY_TARGET}/${MELD_PKG_NAME} >> ${INSTALL_LOG} 2>&1 || exit 1
  python setup.py install   >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to install meld, exit."
      exit 1
  fi
  cd - >> ${INSTALL_LOG} 2>&1 || pwd
  log_success "Install meld successfully."

  # Uncompress supervisor
  log "Uncompressing supervisor."
  tar -xzf ${THIRD_PARTY}/${SUPERVISOR_PKG_NAME}.tar.gz -C ${THIRD_PARTY_TARGET} >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to uncompress supervisor, exit."
      exit 1
  fi
  log_success "Uncompress supervisor successfully."

  # Install supervisor
  log "Installing supervisor."
  cd ${THIRD_PARTY_TARGET}/${SUPERVISOR_PKG_NAME} >> ${INSTALL_LOG} 2>&1 || exit 1
  python setup.py install   >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to install supervisor, exit."
      exit 1
  fi
  cd - >> ${INSTALL_LOG} 2>&1 || pwd
  log_success "Install supervisor successfully."
}

#------------------------------------------------------------------------
# Name: select_highest_version_rpm
#
# Synopsis: select_highest_version_rpm
#
# Description: More than one RPM package found. Using the highest version to install
#------------------------------------------------------------------------
select_highest_version_rpm()
{
    RPM_FILES=`ls -1 -d ${PSP_RPM_PATH} -v -r 2> /dev/null`
    for rpmfile in ${RPM_FILES}
    do
        PSP_RPMS="${PSP_RPMS} ${rpmfile}"
    done

    SELECTED_RPM=`echo ${PSP_RPMS} | awk '{print $1}'`

    if [[ -z ${SELECTED_RPM} ]] ; then
        error "No PSP RPM package found."
        exit 1
    fi
}


#------------------------------------------------------------------------
# Name: install_psp
#
# Synopsis: install_psp
#
# Description: Install software psp
#------------------------------------------------------------------------
install_psp()
{
  log "Installing psp."

  select_highest_version_rpm

  rpm -ivh --prefix "${PSP_INSTALL_DIR}" "${SELECTED_RPM}" ${RPM_DB_PATH_OPTION} --nodeps >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to install psp, exit."
      exit 1
  fi
  log_success "Install psp successfully."
}

#------------------------------------------------------------------------
# Name: configure_kafka
#
# Synopsis: configure_kafka
#
# Description: configure kafka
#------------------------------------------------------------------------
configure_kafka()
{
  log "configure kafka."

  ${THIRD_PARTY_TARGET}/kafka/bin/kafka-storage.sh format -t 5mTKjpzeSjaNvZ-NTU298w -c ${YS_TOP}/psp/config/kafka/server.properties

  if [ "$?" != "0" ]; then
      logwarn "check ${YS_TOP}/psp/log/kafka.log already exist, if not, check ${YS_TOP}/psp/config/kafka/server.properties and re format"
  fi
  log_success "configure kafka end."
}


#------------------------------------------------------------------------
# Name: install_frontend
#
# Synopsis: install_frontend
#
# Description: Install software nginx
#------------------------------------------------------------------------
install_frontend()
{
  # Uncompress nginx to the directory $THIRD_PARTY_TARGET
  log "Installing nginx."
  tar -zxf ${THIRD_PARTY}/${NGINX_PKG_NAME}.tar.gz  -C ${THIRD_PARTY_TARGET}  >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to install nginx, exit."
      exit 1
  fi
  # Generate temp log file
  mkdir -p /var/log/nginx
  if [ "$?" != "0" ]; then
    logerr "Failed to make temporary log file, exit."
    exit 1
  fi

  # Generate the default temp paths
  mkdir -p /usr/local/nginx/client_temp
  mkdir -p /usr/local/nginx/proxy_temp
  mkdir -p /usr/local/nginx/client_temp
  mkdir -p /usr/local/nginx/client_temp

  # Generate the default lock path
  mkdir -p /usr/local/nginx/run

  touch /var/log/nginx/error.log
  if [ "$?" != "0" ]; then
    logerr "Failed to make error log file, exit."
    exit 1
  fi

  touch /var/log/nginx/access.log
  if [ "$?" != "0" ]; then
    logerr "Failed to make access log file, exit."
    exit 1
  fi
  log_success "Install nginx successfully."
}

#------------------------------------------------------------------------
# Name: install_node
#
# Synopsis: install_node
#
# Description: Install software node
#------------------------------------------------------------------------
install_node()
{
  # Install node to the directory $THIRD_PARTY_TARGET
  log "Installing node."
  tar  -xzf ${THIRD_PARTY}/${NODE_PKG_NAME}.tar.gz -C ${THIRD_PARTY_TARGET}   >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to uncompress node, exit."
      exit 1
  fi
  log_success "Install node successfully."
}

#------------------------------------------------------------------------------
# Name: install_monitor
#
# Synopsis: install_monitor
#
# Description: Install monitor program include prometheus
#------------------------------------------------------------------------------
install_monitor()
{
  log "Installing prometheus."
  tar -zxf ${THIRD_PARTY}/${PROMETHEUS_PKG_NAME}.tar.gz -C ${THIRD_PARTY_TARGET} >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to install prometheus, exit."
      exit 1
  fi
  log_success "Install promethueus successfully."
}

#----------------------------------------------------------------------
# Name: install_kafka
#
# Synopsis: install_kafka
#
# Description: Install kafka to ${THIRD_PARTY_TARGET}
#----------------------------------------------------------------------
install_kafka()
{
  log "Installing kafka."
  tar -zxf ${THIRD_PARTY}/${KAFKA_PKG_NAME}.tar.gz -C ${THIRD_PARTY_TARGET} >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to install kafka, exit."
      exit 1
  fi
  log_success "Install kafka successfully."
}


#--------------------------------------------------------------------------------
# Name: install_java
#
# Synopsis: install_java
#
# Description: Install java which is need by kafka to ${THIRD_PARTY_TARGET}
#--------------------------------------------------------------------------------
install_java()
{
  log "Installing java."
  tar -zxf ${THIRD_PARTY}/${JAVA_PKG_NAME}.tar.gz -C ${THIRD_PARTY_TARGET} >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to install java, exit."
      exit 1
  fi
  export JAVA_HOME=${THIRD_PARTY_TARGET}/jre
  export PATH=$PATH:${THIRD_PARTY_TARGET}/jre/bin

  log_success "Install java successfully."
}

#-----------------------------------------
# Name: current_version
#
# Synopsis: current_version
#
# Description:  Get current version from psp rpm package
#------------------------------------------------
function current_version() {
  ver=$(rpm -ql psp | grep "/psp/config/version")
  if [ "${ver}" = "" ]; then
    echo "No version file."
  else
    cat ${ver} | awk -F "-" '{print $1}'
  fi
}

#-------------------------------------------------------------------
# Name: upgrade_check_mysql
#
# Synopsis: upgrade_check_mysql
#
# Description: Check local mysql
#-------------------------------------------------------------------
upgrade_check_mysql()
{
  log "Check MySQL."
  if [[ "$USE_REMOTE_DB" = "Yes" || "$USE_REMOTE_DB" = "yes" ]];then
      log "Use remote database."
  else
      # Get mysql username, password, port
      while :
      do
        echo -en  "[Upgrade] Please input MySQL username: " | tee -a ${INSTALL_LOG}
        while :
        do
          read  mysql_usr
          if [ x"$mysql_usr" = "x" ];then
            logerr "[Upgrade] Username cannot be empty. Please input again: " | tee -a ${INSTALL_LOG}
          else
            break 1
          fi
        done
        echo -en "[Upgrade] Please input MySQL password: " | tee -a ${INSTALL_LOG}
        while :
        do
          read -s mysql_pwd
          if [ x"$mysql_pwd" = "x" ];then
            echo -en "[Upgrade] Password cannot be empty. Please input again: " | tee -a ${INSTALL_LOG}
          else
            break 1
          fi
        done
          echo
          echo -en "[Upgrade] MySQL port(Press Enter if use default port \"3306\"): " | tee -a ${INSTALL_LOG}
          read mysql_port
          if [ x"$mysql_port" = x ]; then
            mysql_port=3306
          fi
          log "Attempt to connect database."
          # Attempt to connect database
          db_connect="mysql -u$mysql_usr -p$mysql_pwd -P $mysql_port"
          $db_connect </dev/null  >> $INSTALL_LOG 2>&1
          if [ "$?" != "0" ]; then
            logerr "Login failed, make sure input the correct username, password, and port."
          else
            log "Connect successfully."
            # Check if database is existed
            mysql -u$mysql_usr -p$mysql_pwd -P $mysql_port -e "use $DB_NAME"   >> $INSTALL_LOG 2>&1
            if [ "$?" != "0" ];then
              logerr "The database \"$DB_NAME\" is not exist."
              exit 1
            fi
            break
          fi
      done
  fi
}

#-----------------------------------------
# Name: upgrade_psp
#
# Synopsis: upgrade_psp
#
# Description: Upgrade psp rpm package
#------------------------------------------------
upgrade_psp()
{
  log "Upgrading psp."

  old_version=$(current_version)

  select_highest_version_rpm

  rpm -Uvh --prefix "${PSP_INSTALL_DIR}" "${SELECTED_RPM}"  ${RPM_DB_PATH_OPTION} --nodeps  >> ${INSTALL_LOG} 2>&1
  if [ "$?" != "0" ]; then
      logerr "Failed to upgrade psp, exit."
      exit 1
  fi

  log_success "Upgrade psp successfully."
}

#-----------------------------------------
# Name: upgrade_database()
#
# Synopsis: upgrade_database()
#
# Description: Upgrade database info
#------------------------------------------------
upgrade_database()
{
  log "Upgrading database."

  execute_flag="true"
  new_version=$(current_version)
  upgrade_patch_path=${YS_TOP}/psp/schema/Patch
  upgrade_version_file=${upgrade_patch_path}/upgrade_version
  if [ ! -f "${upgrade_version_file}" ];then
    logerr "The file \"${upgrade_version_file}\" is not found."
    exit 1
  fi

  version_flag=""
  patch_infos=()
  while read line
  do
    patch_info=$(echo "${line}" | grep -v "#" | grep -v "^$")
    if [[ ${patch_info} == v${old_version}* ]];then
      version_flag="start"
    elif [[ ${patch_info} == v${new_version}* ]];then
      version_flag="end"
    fi

    if [ "${version_flag}" == "start" ];then
      patch_infos[${#patch_infos[*]}]=${patch_info}
    elif [ "${version_flag}" == "end" ];then
      patch_infos[${#patch_infos[*]}]=${patch_info}
      break
    fi
  done < ${upgrade_version_file}

  sql_path_files=()
  for file_info in ${patch_infos[*]}
  do
    version=$(echo ${file_info} | awk -F ":" '{print $1}')
    if [ "${version}" == "v${old_version}" ];then
      continue
    fi

    sql_file=$(echo ${file_info} | awk -F ":" '{print $2}')
    if [ "${sql_file}" == "" ];then
      continue
    fi
    sql_path_file="${upgrade_patch_path}/${sql_file}"
    sql_path_files[${#sql_path_files[*]}]=${sql_path_file}
  done

  failed_sql_files=()
  for sql_file in ${sql_path_files[*]}
  do
    mysql -u$mysql_usr -p$mysql_pwd -P$mysql_port -D${DB_NAME} -e "source ${sql_file}" >> $INSTALL_LOG 2>&1
    if [ "$?" != "0" ];then
      execute_flag="false"
      failed_sql_files[${#failed_sql_files[*]}]=${sql_file}
    fi
  done

  if [[ "$USE_REMOTE_DB" = "Yes" || "$USE_REMOTE_DB" = "yes" ]];then
    logtips "Using remote database, please login remote MySQL and execute the following commands :"
    for sql_file in ${sql_path_files[*]}
    do
      logtips "source ${sql_file}"
    done
  else
    if [ ${#failed_sql_files[*]} != 0 ];then
      logtips "Upgrade database failed, please login MySQL and execute the following commands:"
      for sql_file in ${failed_sql_files[*]}
      do
        logtips "source ${sql_file}"
      done
    fi
  fi

  if [ "${execute_flag}" == "true" ];then
    log_success "Upgrade database successfully."
  fi
}

#-------------------------------------------------------
# Name: upgrade_info
#
# Synopsis: upgrade_info
#
# Description: Print some informations when upgrade
#-------------------------------------------------------
upgrade_info()
{
  log "To complete your upgrade and get PSP up and running, follow these steps:"
  log "1. As root, set the PSP environment"
  log "   > source ${YS_TOP}/psp/config/profile"
  #log "2. Please configure the database by yourself."
  log "2. Restart PSP services."
  log "   > ysadmin stop all"
  log "   > ysadmin start all"
  log "3. Check services have started."
  log "   > ysadmin list"
}

#-------------------------------------------------------------------
# Name: usage
#
# Synopsis: usage
#
# Description: Print some information about how to use this script
#-------------------------------------------------------------------
usage()
{
  echo  -e "Use \"./pspinstall -c install.conf\" or \"./pspinstall -C install.conf\" to install psp"
  echo  -e "Use \"./pspinstall -u install.conf\" or \"./pspinstall -U install.conf\" to upgrade psp"
}


#-------------------------------------------------------------------
# Name: install redis
#
# Synopsis: Install the redis
#
# Description: Install the redis into the 3rd party directory
#-------------------------------------------------------------------
install_redis()
{
    log "Installing Redis."
    tar -zxf ${THIRD_PARTY}/${REDIS_PKG_NAME}.tar.gz -C ${THIRD_PARTY_TARGET} >> ${INSTALL_LOG} 2>&1
    if [ "$?" != "0" ]; then
        logerr "Failed to install Redis, exit."
        exit 1
    fi

    log_success "Install Redis successfully."
}


#-------------------------------------------------------------------
# Name: main
#
# Synopsis: main $@
#
# Description: Run the installation flow or update flow here
#-------------------------------------------------------------------
main()
{
  trap "exit" INT
  if [[ "$1" == "-c" || "$1" == "-C" ]]; then
    check_env
    check_mysql

    # Install the 3rd party software
    install_frontend
    install_node
    install_supervisor
    install_monitor
    install_java
    install_kafka
    install_redis

    # Install the PSP
    install_psp
    configure_kafka

    generate_ssl_certs

    configure_admins
    configure_port
    configure_mysql

    help_info
  elif [[ "$1" == "-u" || "$1" == "-U" ]] ; then
    # Upgrade
    upgrade_check_mysql
    upgrade_psp
    configure_port
    upgrade_database
    upgrade_info
  else
    error "Invalid command option"
    usage
  fi
}

# Install PSP
main $@

exit 0
