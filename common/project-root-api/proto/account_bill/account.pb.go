// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.21.12
// source: proto/account_bill/account.proto

package account_bill

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountStatus int32

const (
	AccountStatus_DELETED AccountStatus = 0
	AccountStatus_NORMAL  AccountStatus = 1
)

// Enum value maps for AccountStatus.
var (
	AccountStatus_name = map[int32]string{
		0: "DELETED",
		1: "NORMAL",
	}
	AccountStatus_value = map[string]int32{
		"DELETED": 0,
		"NORMAL":  1,
	}
)

func (x AccountStatus) Enum() *AccountStatus {
	p := new(AccountStatus)
	*p = x
	return p
}

func (x AccountStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_account_bill_account_proto_enumTypes[0].Descriptor()
}

func (AccountStatus) Type() protoreflect.EnumType {
	return &file_proto_account_bill_account_proto_enumTypes[0]
}

func (x AccountStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountStatus.Descriptor instead.
func (AccountStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{0}
}

// 收支类型（其中 冻结、解冻属于中间态，不给用户展示）
type AccountBillSign int32

const (
	AccountBillSign_AccountBillUnknow AccountBillSign = 0
	// 收入
	AccountBillSign_AccountBillAdd AccountBillSign = 1
	// 支出
	AccountBillSign_AccountBillReduce AccountBillSign = 2
	// 冻结
	AccountBillSign_AccountBillFreeze AccountBillSign = 3
	// 解冻
	AccountBillSign_AccountBillUnfreeze AccountBillSign = 4
)

// Enum value maps for AccountBillSign.
var (
	AccountBillSign_name = map[int32]string{
		0: "AccountBillUnknow",
		1: "AccountBillAdd",
		2: "AccountBillReduce",
		3: "AccountBillFreeze",
		4: "AccountBillUnfreeze",
	}
	AccountBillSign_value = map[string]int32{
		"AccountBillUnknow":   0,
		"AccountBillAdd":      1,
		"AccountBillReduce":   2,
		"AccountBillFreeze":   3,
		"AccountBillUnfreeze": 4,
	}
)

func (x AccountBillSign) Enum() *AccountBillSign {
	p := new(AccountBillSign)
	*p = x
	return p
}

func (x AccountBillSign) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountBillSign) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_account_bill_account_proto_enumTypes[1].Descriptor()
}

func (AccountBillSign) Type() protoreflect.EnumType {
	return &file_proto_account_bill_account_proto_enumTypes[1]
}

func (x AccountBillSign) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountBillSign.Descriptor instead.
func (AccountBillSign) EnumDescriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{1}
}

type AccountBillTradeType int32

const (
	AccountBillTradeType_AccountBillTradeUnknow AccountBillTradeType = 0
	// 支付
	AccountBillTradeType_AccountBillTradePay AccountBillTradeType = 1
	// 充值
	AccountBillTradeType_AccountBillTradeCredit AccountBillTradeType = 2
	// 退款
	AccountBillTradeType_AccountBillTradeRefund AccountBillTradeType = 3
	// 提现
	AccountBillTradeType_AccountBillTradeWithdraw AccountBillTradeType = 4
	// 加款（管理员）
	AccountBillTradeType_AccountBillTradeFundAdd AccountBillTradeType = 5
	// 扣款（管理员）
	AccountBillTradeType_AccountBillTradeFundSub AccountBillTradeType = 6
)

// Enum value maps for AccountBillTradeType.
var (
	AccountBillTradeType_name = map[int32]string{
		0: "AccountBillTradeUnknow",
		1: "AccountBillTradePay",
		2: "AccountBillTradeCredit",
		3: "AccountBillTradeRefund",
		4: "AccountBillTradeWithdraw",
		5: "AccountBillTradeFundAdd",
		6: "AccountBillTradeFundSub",
	}
	AccountBillTradeType_value = map[string]int32{
		"AccountBillTradeUnknow":   0,
		"AccountBillTradePay":      1,
		"AccountBillTradeCredit":   2,
		"AccountBillTradeRefund":   3,
		"AccountBillTradeWithdraw": 4,
		"AccountBillTradeFundAdd":  5,
		"AccountBillTradeFundSub":  6,
	}
)

func (x AccountBillTradeType) Enum() *AccountBillTradeType {
	p := new(AccountBillTradeType)
	*p = x
	return p
}

func (x AccountBillTradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountBillTradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_account_bill_account_proto_enumTypes[2].Descriptor()
}

func (AccountBillTradeType) Type() protoreflect.EnumType {
	return &file_proto_account_bill_account_proto_enumTypes[2]
}

func (x AccountBillTradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountBillTradeType.Descriptor instead.
func (AccountBillTradeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{2}
}

type AccountRechargeByUserIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 赠送金额
	AwardAmount int64 `protobuf:"varint,3,opt,name=award_amount,json=awardAmount,proto3" json:"award_amount,omitempty"`
	// 充值金额
	NormalAmount int64 `protobuf:"varint,4,opt,name=normal_amount,json=normalAmount,proto3" json:"normal_amount,omitempty"`
	// 备注
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// 操作人
	OperatorUserId string `protobuf:"bytes,6,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
}

func (x *AccountRechargeByUserIdRequest) Reset() {
	*x = AccountRechargeByUserIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountRechargeByUserIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountRechargeByUserIdRequest) ProtoMessage() {}

func (x *AccountRechargeByUserIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountRechargeByUserIdRequest.ProtoReflect.Descriptor instead.
func (*AccountRechargeByUserIdRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{0}
}

func (x *AccountRechargeByUserIdRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AccountRechargeByUserIdRequest) GetAwardAmount() int64 {
	if x != nil {
		return x.AwardAmount
	}
	return 0
}

func (x *AccountRechargeByUserIdRequest) GetNormalAmount() int64 {
	if x != nil {
		return x.NormalAmount
	}
	return 0
}

func (x *AccountRechargeByUserIdRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AccountRechargeByUserIdRequest) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 账户ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 客户ID （个人为user_id, 企业为 company_id）
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// 实名认证ID （预留）
	RealCustomerId string `protobuf:"bytes,3,opt,name=real_customer_id,json=realCustomerId,proto3" json:"real_customer_id,omitempty"`
	Name           string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// 币种 （CNY为人民币 ISO4217）
	Currency string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	// 账户余额（不含冻结，即未结算）
	AccountBalance int64 `protobuf:"varint,6,opt,name=account_balance,json=accountBalance,proto3" json:"account_balance,omitempty"`
	// 冻结金额
	FreezedAmount int64 `protobuf:"varint,7,opt,name=freezed_amount,json=freezedAmount,proto3" json:"freezed_amount,omitempty"`
	// 普通余额
	NormalBalance int64 `protobuf:"varint,8,opt,name=normal_balance,json=normalBalance,proto3" json:"normal_balance,omitempty"`
	// 赠送余额
	AwardBalance int64 `protobuf:"varint,9,opt,name=award_balance,json=awardBalance,proto3" json:"award_balance,omitempty"`
	// 是否提现
	WithdrawEnabled bool `protobuf:"varint,10,opt,name=withdraw_enabled,json=withdrawEnabled,proto3" json:"withdraw_enabled,omitempty"`
	// 授信额度
	CreditQuota int64         `protobuf:"varint,11,opt,name=credit_quota,json=creditQuota,proto3" json:"credit_quota,omitempty"`
	Status      AccountStatus `protobuf:"varint,12,opt,name=status,proto3,enum=account_bill.AccountStatus" json:"status,omitempty"`
	// 账户余额（含冻结，即未结算）
	AccountBalanceContainFreezed int64 `protobuf:"varint,13,opt,name=account_balance_contain_freezed,json=accountBalanceContainFreezed,proto3" json:"account_balance_contain_freezed,omitempty"`
	// 账户冻结状态
	IsFreeze   int64                  `protobuf:"varint,14,opt,name=is_freeze,json=isFreeze,proto3" json:"is_freeze,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,100,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{1}
}

func (x *Account) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Account) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *Account) GetRealCustomerId() string {
	if x != nil {
		return x.RealCustomerId
	}
	return ""
}

func (x *Account) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Account) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Account) GetAccountBalance() int64 {
	if x != nil {
		return x.AccountBalance
	}
	return 0
}

func (x *Account) GetFreezedAmount() int64 {
	if x != nil {
		return x.FreezedAmount
	}
	return 0
}

func (x *Account) GetNormalBalance() int64 {
	if x != nil {
		return x.NormalBalance
	}
	return 0
}

func (x *Account) GetAwardBalance() int64 {
	if x != nil {
		return x.AwardBalance
	}
	return 0
}

func (x *Account) GetWithdrawEnabled() bool {
	if x != nil {
		return x.WithdrawEnabled
	}
	return false
}

func (x *Account) GetCreditQuota() int64 {
	if x != nil {
		return x.CreditQuota
	}
	return 0
}

func (x *Account) GetStatus() AccountStatus {
	if x != nil {
		return x.Status
	}
	return AccountStatus_DELETED
}

func (x *Account) GetAccountBalanceContainFreezed() int64 {
	if x != nil {
		return x.AccountBalanceContainFreezed
	}
	return 0
}

func (x *Account) GetIsFreeze() int64 {
	if x != nil {
		return x.IsFreeze
	}
	return 0
}

func (x *Account) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Account) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type GetAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid"`
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAccountRequest) Reset() {
	*x = GetAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountRequest) ProtoMessage() {}

func (x *GetAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountRequest.ProtoReflect.Descriptor instead.
func (*GetAccountRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{2}
}

func (x *GetAccountRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *GetAccountReply) Reset() {
	*x = GetAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAccountReply) ProtoMessage() {}

func (x *GetAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAccountReply.ProtoReflect.Descriptor instead.
func (*GetAccountReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{3}
}

func (x *GetAccountReply) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type CreateAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid,required"`
	CustomerId string `protobuf:"bytes,2,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	RealCustomerId  string `protobuf:"bytes,3,opt,name=real_customer_id,json=realCustomerId,proto3" json:"real_customer_id,omitempty"`
	Name            string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Currency        string `protobuf:"bytes,5,opt,name=currency,proto3" json:"currency,omitempty"`
	WithdrawEnabled bool   `protobuf:"varint,10,opt,name=withdraw_enabled,json=withdrawEnabled,proto3" json:"withdraw_enabled,omitempty"`
	CreditQuota     int64  `protobuf:"varint,11,opt,name=credit_quota,json=creditQuota,proto3" json:"credit_quota,omitempty"`
}

func (x *CreateAccountRequest) Reset() {
	*x = CreateAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountRequest) ProtoMessage() {}

func (x *CreateAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateAccountRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAccountRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *CreateAccountRequest) GetRealCustomerId() string {
	if x != nil {
		return x.RealCustomerId
	}
	return ""
}

func (x *CreateAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateAccountRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateAccountRequest) GetWithdrawEnabled() bool {
	if x != nil {
		return x.WithdrawEnabled
	}
	return false
}

func (x *CreateAccountRequest) GetCreditQuota() int64 {
	if x != nil {
		return x.CreditQuota
	}
	return 0
}

type CreateAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *CreateAccountReply) Reset() {
	*x = CreateAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAccountReply) ProtoMessage() {}

func (x *CreateAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAccountReply.ProtoReflect.Descriptor instead.
func (*CreateAccountReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAccountReply) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type CreditQuota struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CreditQuota) Reset() {
	*x = CreditQuota{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreditQuota) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreditQuota) ProtoMessage() {}

func (x *CreditQuota) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreditQuota.ProtoReflect.Descriptor instead.
func (*CreditQuota) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{6}
}

func (x *CreditQuota) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type ModifyAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 账户ID
	// @inject_tag: `validate:"is_ysid"`
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// 实名认证ID
	// @inject_tag: `validate:"is_ysid"`
	RealCustomerId string `protobuf:"bytes,2,opt,name=real_customer_id,json=realCustomerId,proto3" json:"real_customer_id,omitempty"`
	// 账户名
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 是否允许取现： 1允许  2不允许
	WithdrawEnabled int64 `protobuf:"varint,4,opt,name=withdraw_enabled,json=withdrawEnabled,proto3" json:"withdraw_enabled,omitempty"`
	// 授信额度
	CreditQuota *CreditQuota `protobuf:"bytes,5,opt,name=credit_quota,json=creditQuota,proto3" json:"credit_quota,omitempty"`
}

func (x *ModifyAccountRequest) Reset() {
	*x = ModifyAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyAccountRequest) ProtoMessage() {}

func (x *ModifyAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyAccountRequest.ProtoReflect.Descriptor instead.
func (*ModifyAccountRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{7}
}

func (x *ModifyAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ModifyAccountRequest) GetRealCustomerId() string {
	if x != nil {
		return x.RealCustomerId
	}
	return ""
}

func (x *ModifyAccountRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyAccountRequest) GetWithdrawEnabled() int64 {
	if x != nil {
		return x.WithdrawEnabled
	}
	return 0
}

func (x *ModifyAccountRequest) GetCreditQuota() *CreditQuota {
	if x != nil {
		return x.CreditQuota
	}
	return nil
}

type ModifyAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ModifyAccountReply) Reset() {
	*x = ModifyAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyAccountReply) ProtoMessage() {}

func (x *ModifyAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyAccountReply.ProtoReflect.Descriptor instead.
func (*ModifyAccountReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{8}
}

func (x *ModifyAccountReply) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type AccountBill struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 收支记录ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 资金账户ID
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// 收支类型
	BillSign AccountBillSign `protobuf:"varint,3,opt,name=bill_sign,json=billSign,proto3,enum=account_bill.AccountBillSign" json:"bill_sign,omitempty"`
	// 金额
	Amount int64 `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	// 交易类型
	TradeType AccountBillTradeType `protobuf:"varint,5,opt,name=trade_type,json=tradeType,proto3,enum=account_bill.AccountBillTradeType" json:"trade_type,omitempty"`
	// 交易编号
	TradeId string `protobuf:"bytes,6,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	// 交易时间
	TradeTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`
	// 账户余额（含冻结，即未结算）
	AccountBalanceContainFreezed int64 `protobuf:"varint,8,opt,name=account_balance_contain_freezed,json=accountBalanceContainFreezed,proto3" json:"account_balance_contain_freezed,omitempty"`
	// 交易备注
	Comment string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	// 业务单号（订单号/账单号）
	OutTradeId string `protobuf:"bytes,10,opt,name=out_trade_id,json=outTradeId,proto3" json:"out_trade_id,omitempty"`
	// 普通余额操作金额
	DeltaNormalBalance int64 `protobuf:"varint,11,opt,name=delta_normal_balance,json=deltaNormalBalance,proto3" json:"delta_normal_balance,omitempty"`
	// 赠送余额操作金额
	DeltaAwardBalance int64 `protobuf:"varint,12,opt,name=delta_award_balance,json=deltaAwardBalance,proto3" json:"delta_award_balance,omitempty"`
}

func (x *AccountBill) Reset() {
	*x = AccountBill{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountBill) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBill) ProtoMessage() {}

func (x *AccountBill) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBill.ProtoReflect.Descriptor instead.
func (*AccountBill) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{9}
}

func (x *AccountBill) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountBill) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountBill) GetBillSign() AccountBillSign {
	if x != nil {
		return x.BillSign
	}
	return AccountBillSign_AccountBillUnknow
}

func (x *AccountBill) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AccountBill) GetTradeType() AccountBillTradeType {
	if x != nil {
		return x.TradeType
	}
	return AccountBillTradeType_AccountBillTradeUnknow
}

func (x *AccountBill) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *AccountBill) GetTradeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeTime
	}
	return nil
}

func (x *AccountBill) GetAccountBalanceContainFreezed() int64 {
	if x != nil {
		return x.AccountBalanceContainFreezed
	}
	return 0
}

func (x *AccountBill) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AccountBill) GetOutTradeId() string {
	if x != nil {
		return x.OutTradeId
	}
	return ""
}

func (x *AccountBill) GetDeltaNormalBalance() int64 {
	if x != nil {
		return x.DeltaNormalBalance
	}
	return 0
}

func (x *AccountBill) GetDeltaAwardBalance() int64 {
	if x != nil {
		return x.DeltaAwardBalance
	}
	return 0
}

// 账户收支明细请求
// 时间是左闭右开：create >= start_time and create_time < end_time
type AccountIncomeAndExpendDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid,required"`
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// @inject_tag: `validate:"required"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// @inject_tag: `validate:"required"`
	EndTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// @inject_tag: `validate:"required"`
	Page *Page `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *AccountIncomeAndExpendDetailRequest) Reset() {
	*x = AccountIncomeAndExpendDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountIncomeAndExpendDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountIncomeAndExpendDetailRequest) ProtoMessage() {}

func (x *AccountIncomeAndExpendDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountIncomeAndExpendDetailRequest.ProtoReflect.Descriptor instead.
func (*AccountIncomeAndExpendDetailRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{10}
}

func (x *AccountIncomeAndExpendDetailRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountIncomeAndExpendDetailRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *AccountIncomeAndExpendDetailRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *AccountIncomeAndExpendDetailRequest) GetPage() *Page {
	if x != nil {
		return x.Page
	}
	return nil
}

// 账户收支明细结果
type AccountIncomeAndExpendDetailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List    []*AccountBill `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageCtx *PageCtx       `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *AccountIncomeAndExpendDetailReply) Reset() {
	*x = AccountIncomeAndExpendDetailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountIncomeAndExpendDetailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountIncomeAndExpendDetailReply) ProtoMessage() {}

func (x *AccountIncomeAndExpendDetailReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountIncomeAndExpendDetailReply.ProtoReflect.Descriptor instead.
func (*AccountIncomeAndExpendDetailReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{11}
}

func (x *AccountIncomeAndExpendDetailReply) GetList() []*AccountBill {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *AccountIncomeAndExpendDetailReply) GetPageCtx() *PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

type AccountPayReduceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid,required"`
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Amount    int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// @inject_tag: `validate:"is_ysid,required"`
	TradeId string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	OutTradeId string `protobuf:"bytes,7,opt,name=out_trade_id,json=outTradeId,proto3" json:"out_trade_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	OperatorUserId string `protobuf:"bytes,8,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
}

func (x *AccountPayReduceRequest) Reset() {
	*x = AccountPayReduceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPayReduceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPayReduceRequest) ProtoMessage() {}

func (x *AccountPayReduceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPayReduceRequest.ProtoReflect.Descriptor instead.
func (*AccountPayReduceRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{12}
}

func (x *AccountPayReduceRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountPayReduceRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AccountPayReduceRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *AccountPayReduceRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AccountPayReduceRequest) GetOutTradeId() string {
	if x != nil {
		return x.OutTradeId
	}
	return ""
}

func (x *AccountPayReduceRequest) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

type AccountPayReduceReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountPayReduceReply) Reset() {
	*x = AccountPayReduceReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPayReduceReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPayReduceReply) ProtoMessage() {}

func (x *AccountPayReduceReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPayReduceReply.ProtoReflect.Descriptor instead.
func (*AccountPayReduceReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{13}
}

func (x *AccountPayReduceReply) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type AccountPayFreezeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid"`
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Amount    int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	TradeId string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	OutTradeId string `protobuf:"bytes,7,opt,name=out_trade_id,json=outTradeId,proto3" json:"out_trade_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	OperatorUserId string `protobuf:"bytes,8,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
}

func (x *AccountPayFreezeRequest) Reset() {
	*x = AccountPayFreezeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPayFreezeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPayFreezeRequest) ProtoMessage() {}

func (x *AccountPayFreezeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPayFreezeRequest.ProtoReflect.Descriptor instead.
func (*AccountPayFreezeRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{14}
}

func (x *AccountPayFreezeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountPayFreezeRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AccountPayFreezeRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *AccountPayFreezeRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AccountPayFreezeRequest) GetOutTradeId() string {
	if x != nil {
		return x.OutTradeId
	}
	return ""
}

func (x *AccountPayFreezeRequest) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

type AccountPayFreezeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountPayFreezeReply) Reset() {
	*x = AccountPayFreezeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPayFreezeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPayFreezeReply) ProtoMessage() {}

func (x *AccountPayFreezeReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPayFreezeReply.ProtoReflect.Descriptor instead.
func (*AccountPayFreezeReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{15}
}

func (x *AccountPayFreezeReply) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type AccountPayUnfreezeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid"`
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	TradeId string `protobuf:"bytes,5,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	OutTradeId string `protobuf:"bytes,7,opt,name=out_trade_id,json=outTradeId,proto3" json:"out_trade_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	OperatorUserId string `protobuf:"bytes,8,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
}

func (x *AccountPayUnfreezeRequest) Reset() {
	*x = AccountPayUnfreezeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPayUnfreezeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPayUnfreezeRequest) ProtoMessage() {}

func (x *AccountPayUnfreezeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPayUnfreezeRequest.ProtoReflect.Descriptor instead.
func (*AccountPayUnfreezeRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{16}
}

func (x *AccountPayUnfreezeRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountPayUnfreezeRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *AccountPayUnfreezeRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AccountPayUnfreezeRequest) GetOutTradeId() string {
	if x != nil {
		return x.OutTradeId
	}
	return ""
}

func (x *AccountPayUnfreezeRequest) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

type AccountPayUnfreezeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountPayUnfreezeReply) Reset() {
	*x = AccountPayUnfreezeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPayUnfreezeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPayUnfreezeReply) ProtoMessage() {}

func (x *AccountPayUnfreezeReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPayUnfreezeReply.ProtoReflect.Descriptor instead.
func (*AccountPayUnfreezeReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{17}
}

func (x *AccountPayUnfreezeReply) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type AccountCreditAddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid"`
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	//
	//	string trade_id = 5;
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	OutTradeId string `protobuf:"bytes,7,opt,name=out_trade_id,json=outTradeId,proto3" json:"out_trade_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	OperatorUserId string `protobuf:"bytes,8,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
	// 普通余额操作金额
	DeltaNormalBalance int64 `protobuf:"varint,9,opt,name=delta_normal_balance,json=deltaNormalBalance,proto3" json:"delta_normal_balance,omitempty"`
	// 赠送金额操作金额
	DeltaAwardBalance int64 `protobuf:"varint,10,opt,name=delta_award_balance,json=deltaAwardBalance,proto3" json:"delta_award_balance,omitempty"`
}

func (x *AccountCreditAddRequest) Reset() {
	*x = AccountCreditAddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCreditAddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCreditAddRequest) ProtoMessage() {}

func (x *AccountCreditAddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCreditAddRequest.ProtoReflect.Descriptor instead.
func (*AccountCreditAddRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{18}
}

func (x *AccountCreditAddRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountCreditAddRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AccountCreditAddRequest) GetOutTradeId() string {
	if x != nil {
		return x.OutTradeId
	}
	return ""
}

func (x *AccountCreditAddRequest) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

func (x *AccountCreditAddRequest) GetDeltaNormalBalance() int64 {
	if x != nil {
		return x.DeltaNormalBalance
	}
	return 0
}

func (x *AccountCreditAddRequest) GetDeltaAwardBalance() int64 {
	if x != nil {
		return x.DeltaAwardBalance
	}
	return 0
}

type AccountCreditAddReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountCreditAddReply) Reset() {
	*x = AccountCreditAddReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountCreditAddReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountCreditAddReply) ProtoMessage() {}

func (x *AccountCreditAddReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountCreditAddReply.ProtoReflect.Descriptor instead.
func (*AccountCreditAddReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{19}
}

func (x *AccountCreditAddReply) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type AccountFundOperateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid,required"`
	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// @inject_tag: `validate:"is_ysid,required"`
	TradeId    string `protobuf:"bytes,2,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	OutTradeId string `protobuf:"bytes,3,opt,name=out_trade_id,json=outTradeId,proto3" json:"out_trade_id,omitempty"`
	// 操作类型: 1 加款; 2 扣款; 3退款
	Type int32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	// 备注
	// @inject_tag: `validate:"required"`
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	OperatorUserId string `protobuf:"bytes,6,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
	// 普通余额操作金额
	DeltaNormalBalance int64 `protobuf:"varint,7,opt,name=delta_normal_balance,json=deltaNormalBalance,proto3" json:"delta_normal_balance,omitempty"`
	// 赠送金额操作金额
	DeltaAwardBalance int64 `protobuf:"varint,8,opt,name=delta_award_balance,json=deltaAwardBalance,proto3" json:"delta_award_balance,omitempty"`
}

func (x *AccountFundOperateRequest) Reset() {
	*x = AccountFundOperateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountFundOperateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFundOperateRequest) ProtoMessage() {}

func (x *AccountFundOperateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFundOperateRequest.ProtoReflect.Descriptor instead.
func (*AccountFundOperateRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{20}
}

func (x *AccountFundOperateRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *AccountFundOperateRequest) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

func (x *AccountFundOperateRequest) GetOutTradeId() string {
	if x != nil {
		return x.OutTradeId
	}
	return ""
}

func (x *AccountFundOperateRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *AccountFundOperateRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AccountFundOperateRequest) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

func (x *AccountFundOperateRequest) GetDeltaNormalBalance() int64 {
	if x != nil {
		return x.DeltaNormalBalance
	}
	return 0
}

func (x *AccountFundOperateRequest) GetDeltaAwardBalance() int64 {
	if x != nil {
		return x.DeltaAwardBalance
	}
	return 0
}

type AccountFundOperateReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (x *AccountFundOperateReply) Reset() {
	*x = AccountFundOperateReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountFundOperateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountFundOperateReply) ProtoMessage() {}

func (x *AccountFundOperateReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountFundOperateReply.ProtoReflect.Descriptor instead.
func (*AccountFundOperateReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{21}
}

func (x *AccountFundOperateReply) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

type ManualFreezeAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	FrozenState    int64  `protobuf:"varint,2,opt,name=frozen_state,json=frozenState,proto3" json:"frozen_state,omitempty"`
	OperatorUserId string `protobuf:"bytes,3,opt,name=operator_user_id,json=operatorUserId,proto3" json:"operator_user_id,omitempty"`
}

func (x *ManualFreezeAccountRequest) Reset() {
	*x = ManualFreezeAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualFreezeAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualFreezeAccountRequest) ProtoMessage() {}

func (x *ManualFreezeAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualFreezeAccountRequest.ProtoReflect.Descriptor instead.
func (*ManualFreezeAccountRequest) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{22}
}

func (x *ManualFreezeAccountRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *ManualFreezeAccountRequest) GetFrozenState() int64 {
	if x != nil {
		return x.FrozenState
	}
	return 0
}

func (x *ManualFreezeAccountRequest) GetOperatorUserId() string {
	if x != nil {
		return x.OperatorUserId
	}
	return ""
}

type ManualFreezeAccountReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ManualFreezeAccountReply) Reset() {
	*x = ManualFreezeAccountReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManualFreezeAccountReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManualFreezeAccountReply) ProtoMessage() {}

func (x *ManualFreezeAccountReply) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManualFreezeAccountReply.ProtoReflect.Descriptor instead.
func (*ManualFreezeAccountReply) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{23}
}

type Page struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"gte=1"`
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// @inject_tag: `validate:"gt=0,max=1000"`
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Page) Reset() {
	*x = Page{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Page) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Page) ProtoMessage() {}

func (x *Page) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Page.ProtoReflect.Descriptor instead.
func (*Page) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{24}
}

func (x *Page) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Page) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PageCtx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Size  int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// total record number, not page number
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *PageCtx) Reset() {
	*x = PageCtx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_account_bill_account_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageCtx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageCtx) ProtoMessage() {}

func (x *PageCtx) ProtoReflect() protoreflect.Message {
	mi := &file_proto_account_bill_account_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageCtx.ProtoReflect.Descriptor instead.
func (*PageCtx) Descriptor() ([]byte, []int) {
	return file_proto_account_bill_account_proto_rawDescGZIP(), []int{25}
}

func (x *PageCtx) GetIndex() int64 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PageCtx) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageCtx) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_proto_account_bill_account_proto protoreflect.FileDescriptor

var file_proto_account_bill_account_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x62, 0x69, 0x6c, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc5, 0x01, 0x0a, 0x1e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x91, 0x05, 0x0a, 0x07, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x45, 0x0a, 0x1f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x23, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdf, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x22, 0x45, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f,
	0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x23, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x72, 0x65, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x5f,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x51, 0x75,
	0x6f, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x8e, 0x04, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69,
	0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x08, 0x62, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x69, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x1f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20,
	0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x61, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x41, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x23, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x21, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69,
	0x6c, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x43, 0x74,
	0x78, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x22, 0xd1, 0x01, 0x0a, 0x17, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x48,
	0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x15,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x61, 0x79, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x2f, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x80, 0x02, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x12, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x61, 0x77, 0x61,
	0x72, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x41, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x48, 0x0a, 0x15, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb1, 0x02,
	0x0a, 0x19, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x64,
	0x65, 0x6c, 0x74, 0x61, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x41, 0x77, 0x61, 0x72, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0x4a, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x88, 0x01,
	0x0a, 0x1a, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x1a, 0x0a, 0x18, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x30, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x49, 0x0a, 0x07, 0x50, 0x61, 0x67, 0x65, 0x43, 0x74,
	0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x2a, 0x28, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x2a, 0x83, 0x01, 0x0a, 0x0f,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x15, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x69, 0x6c, 0x6c, 0x41, 0x64, 0x64, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c,
	0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x10,
	0x04, 0x2a, 0xdb, 0x01, 0x0a, 0x14, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x61, 0x79, 0x10, 0x01, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x69, 0x6c, 0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x64, 0x64,
	0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x69, 0x6c,
	0x6c, 0x54, 0x72, 0x61, 0x64, 0x65, 0x46, 0x75, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x10, 0x06, 0x32,
	0xe0, 0x08, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62,
	0x69, 0x6c, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a,
	0x1c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x6e,
	0x64, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x45, 0x78, 0x70,
	0x65, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x6e, 0x64,
	0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x27, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x6e, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x66, 0x0a, 0x12, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x13, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x46, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x2e, 0x79, 0x75, 0x61, 0x6e, 0x73, 0x75,
	0x61, 0x6e, 0x2e, 0x63, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_account_bill_account_proto_rawDescOnce sync.Once
	file_proto_account_bill_account_proto_rawDescData = file_proto_account_bill_account_proto_rawDesc
)

func file_proto_account_bill_account_proto_rawDescGZIP() []byte {
	file_proto_account_bill_account_proto_rawDescOnce.Do(func() {
		file_proto_account_bill_account_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_account_bill_account_proto_rawDescData)
	})
	return file_proto_account_bill_account_proto_rawDescData
}

var file_proto_account_bill_account_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_account_bill_account_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_proto_account_bill_account_proto_goTypes = []interface{}{
	(AccountStatus)(0),                          // 0: account_bill.AccountStatus
	(AccountBillSign)(0),                        // 1: account_bill.AccountBillSign
	(AccountBillTradeType)(0),                   // 2: account_bill.AccountBillTradeType
	(*AccountRechargeByUserIdRequest)(nil),      // 3: account_bill.AccountRechargeByUserIdRequest
	(*Account)(nil),                             // 4: account_bill.Account
	(*GetAccountRequest)(nil),                   // 5: account_bill.GetAccountRequest
	(*GetAccountReply)(nil),                     // 6: account_bill.GetAccountReply
	(*CreateAccountRequest)(nil),                // 7: account_bill.CreateAccountRequest
	(*CreateAccountReply)(nil),                  // 8: account_bill.CreateAccountReply
	(*CreditQuota)(nil),                         // 9: account_bill.CreditQuota
	(*ModifyAccountRequest)(nil),                // 10: account_bill.ModifyAccountRequest
	(*ModifyAccountReply)(nil),                  // 11: account_bill.ModifyAccountReply
	(*AccountBill)(nil),                         // 12: account_bill.AccountBill
	(*AccountIncomeAndExpendDetailRequest)(nil), // 13: account_bill.AccountIncomeAndExpendDetailRequest
	(*AccountIncomeAndExpendDetailReply)(nil),   // 14: account_bill.AccountIncomeAndExpendDetailReply
	(*AccountPayReduceRequest)(nil),             // 15: account_bill.AccountPayReduceRequest
	(*AccountPayReduceReply)(nil),               // 16: account_bill.AccountPayReduceReply
	(*AccountPayFreezeRequest)(nil),             // 17: account_bill.AccountPayFreezeRequest
	(*AccountPayFreezeReply)(nil),               // 18: account_bill.AccountPayFreezeReply
	(*AccountPayUnfreezeRequest)(nil),           // 19: account_bill.AccountPayUnfreezeRequest
	(*AccountPayUnfreezeReply)(nil),             // 20: account_bill.AccountPayUnfreezeReply
	(*AccountCreditAddRequest)(nil),             // 21: account_bill.AccountCreditAddRequest
	(*AccountCreditAddReply)(nil),               // 22: account_bill.AccountCreditAddReply
	(*AccountFundOperateRequest)(nil),           // 23: account_bill.AccountFundOperateRequest
	(*AccountFundOperateReply)(nil),             // 24: account_bill.AccountFundOperateReply
	(*ManualFreezeAccountRequest)(nil),          // 25: account_bill.ManualFreezeAccountRequest
	(*ManualFreezeAccountReply)(nil),            // 26: account_bill.ManualFreezeAccountReply
	(*Page)(nil),                                // 27: account_bill.Page
	(*PageCtx)(nil),                             // 28: account_bill.PageCtx
	(*timestamppb.Timestamp)(nil),               // 29: google.protobuf.Timestamp
}
var file_proto_account_bill_account_proto_depIdxs = []int32{
	0,  // 0: account_bill.Account.status:type_name -> account_bill.AccountStatus
	29, // 1: account_bill.Account.create_time:type_name -> google.protobuf.Timestamp
	29, // 2: account_bill.Account.update_time:type_name -> google.protobuf.Timestamp
	4,  // 3: account_bill.GetAccountReply.account:type_name -> account_bill.Account
	4,  // 4: account_bill.CreateAccountReply.account:type_name -> account_bill.Account
	9,  // 5: account_bill.ModifyAccountRequest.credit_quota:type_name -> account_bill.CreditQuota
	1,  // 6: account_bill.AccountBill.bill_sign:type_name -> account_bill.AccountBillSign
	2,  // 7: account_bill.AccountBill.trade_type:type_name -> account_bill.AccountBillTradeType
	29, // 8: account_bill.AccountBill.trade_time:type_name -> google.protobuf.Timestamp
	29, // 9: account_bill.AccountIncomeAndExpendDetailRequest.start_time:type_name -> google.protobuf.Timestamp
	29, // 10: account_bill.AccountIncomeAndExpendDetailRequest.end_time:type_name -> google.protobuf.Timestamp
	27, // 11: account_bill.AccountIncomeAndExpendDetailRequest.page:type_name -> account_bill.Page
	12, // 12: account_bill.AccountIncomeAndExpendDetailReply.list:type_name -> account_bill.AccountBill
	28, // 13: account_bill.AccountIncomeAndExpendDetailReply.page_ctx:type_name -> account_bill.PageCtx
	4,  // 14: account_bill.AccountPayReduceReply.account:type_name -> account_bill.Account
	4,  // 15: account_bill.AccountPayFreezeReply.account:type_name -> account_bill.Account
	4,  // 16: account_bill.AccountPayUnfreezeReply.account:type_name -> account_bill.Account
	4,  // 17: account_bill.AccountCreditAddReply.account:type_name -> account_bill.Account
	4,  // 18: account_bill.AccountFundOperateReply.account:type_name -> account_bill.Account
	5,  // 19: account_bill.AccountService.GetAccount:input_type -> account_bill.GetAccountRequest
	5,  // 20: account_bill.AccountService.GetAccountByUserID:input_type -> account_bill.GetAccountRequest
	7,  // 21: account_bill.AccountService.CreateAccount:input_type -> account_bill.CreateAccountRequest
	10, // 22: account_bill.AccountService.ModifyAccount:input_type -> account_bill.ModifyAccountRequest
	13, // 23: account_bill.AccountService.AccountIncomeAndExpendDetail:input_type -> account_bill.AccountIncomeAndExpendDetailRequest
	15, // 24: account_bill.AccountService.AccountPayReduce:input_type -> account_bill.AccountPayReduceRequest
	17, // 25: account_bill.AccountService.AccountPayFreeze:input_type -> account_bill.AccountPayFreezeRequest
	19, // 26: account_bill.AccountService.AccountPayUnfreeze:input_type -> account_bill.AccountPayUnfreezeRequest
	3,  // 27: account_bill.AccountService.AccountRechargeByUserId:input_type -> account_bill.AccountRechargeByUserIdRequest
	23, // 28: account_bill.AccountService.AccountFundOperate:input_type -> account_bill.AccountFundOperateRequest
	25, // 29: account_bill.AccountService.ManualFreezeAccount:input_type -> account_bill.ManualFreezeAccountRequest
	6,  // 30: account_bill.AccountService.GetAccount:output_type -> account_bill.GetAccountReply
	6,  // 31: account_bill.AccountService.GetAccountByUserID:output_type -> account_bill.GetAccountReply
	8,  // 32: account_bill.AccountService.CreateAccount:output_type -> account_bill.CreateAccountReply
	11, // 33: account_bill.AccountService.ModifyAccount:output_type -> account_bill.ModifyAccountReply
	14, // 34: account_bill.AccountService.AccountIncomeAndExpendDetail:output_type -> account_bill.AccountIncomeAndExpendDetailReply
	16, // 35: account_bill.AccountService.AccountPayReduce:output_type -> account_bill.AccountPayReduceReply
	18, // 36: account_bill.AccountService.AccountPayFreeze:output_type -> account_bill.AccountPayFreezeReply
	20, // 37: account_bill.AccountService.AccountPayUnfreeze:output_type -> account_bill.AccountPayUnfreezeReply
	22, // 38: account_bill.AccountService.AccountRechargeByUserId:output_type -> account_bill.AccountCreditAddReply
	24, // 39: account_bill.AccountService.AccountFundOperate:output_type -> account_bill.AccountFundOperateReply
	26, // 40: account_bill.AccountService.ManualFreezeAccount:output_type -> account_bill.ManualFreezeAccountReply
	30, // [30:41] is the sub-list for method output_type
	19, // [19:30] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_account_bill_account_proto_init() }
func file_proto_account_bill_account_proto_init() {
	if File_proto_account_bill_account_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_account_bill_account_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountRechargeByUserIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreditQuota); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountBill); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountIncomeAndExpendDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountIncomeAndExpendDetailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPayReduceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPayReduceReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPayFreezeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPayFreezeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPayUnfreezeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPayUnfreezeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCreditAddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountCreditAddReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountFundOperateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountFundOperateReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualFreezeAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManualFreezeAccountReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Page); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_account_bill_account_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageCtx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_account_bill_account_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_account_bill_account_proto_goTypes,
		DependencyIndexes: file_proto_account_bill_account_proto_depIdxs,
		EnumInfos:         file_proto_account_bill_account_proto_enumTypes,
		MessageInfos:      file_proto_account_bill_account_proto_msgTypes,
	}.Build()
	File_proto_account_bill_account_proto = out.File
	file_proto_account_bill_account_proto_rawDesc = nil
	file_proto_account_bill_account_proto_goTypes = nil
	file_proto_account_bill_account_proto_depIdxs = nil
}
