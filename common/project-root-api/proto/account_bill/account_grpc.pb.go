// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/account_bill/account.proto

package account_bill

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccountService_GetAccount_FullMethodName                   = "/account_bill.AccountService/GetAccount"
	AccountService_GetAccountByUserID_FullMethodName           = "/account_bill.AccountService/GetAccountByUserID"
	AccountService_CreateAccount_FullMethodName                = "/account_bill.AccountService/CreateAccount"
	AccountService_ModifyAccount_FullMethodName                = "/account_bill.AccountService/ModifyAccount"
	AccountService_AccountIncomeAndExpendDetail_FullMethodName = "/account_bill.AccountService/AccountIncomeAndExpendDetail"
	AccountService_AccountPayReduce_FullMethodName             = "/account_bill.AccountService/AccountPayReduce"
	AccountService_AccountPayFreeze_FullMethodName             = "/account_bill.AccountService/AccountPayFreeze"
	AccountService_AccountPayUnfreeze_FullMethodName           = "/account_bill.AccountService/AccountPayUnfreeze"
	AccountService_AccountRechargeByUserId_FullMethodName      = "/account_bill.AccountService/AccountRechargeByUserId"
	AccountService_AccountFundOperate_FullMethodName           = "/account_bill.AccountService/AccountFundOperate"
	AccountService_ManualFreezeAccount_FullMethodName          = "/account_bill.AccountService/ManualFreezeAccount"
)

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	// 获取资金账户
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error)
	GetAccountByUserID(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error)
	// 创建资金账户
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error)
	// 修改资金账户
	ModifyAccount(ctx context.Context, in *ModifyAccountRequest, opts ...grpc.CallOption) (*ModifyAccountReply, error)
	// 账户收支明细
	AccountIncomeAndExpendDetail(ctx context.Context, in *AccountIncomeAndExpendDetailRequest, opts ...grpc.CallOption) (*AccountIncomeAndExpendDetailReply, error)
	// 支付 扣款操作
	AccountPayReduce(ctx context.Context, in *AccountPayReduceRequest, opts ...grpc.CallOption) (*AccountPayReduceReply, error)
	// 支付 冻结操作
	AccountPayFreeze(ctx context.Context, in *AccountPayFreezeRequest, opts ...grpc.CallOption) (*AccountPayFreezeReply, error)
	// 支付 解冻操作
	AccountPayUnfreeze(ctx context.Context, in *AccountPayUnfreezeRequest, opts ...grpc.CallOption) (*AccountPayUnfreezeReply, error)
	// 充值 加款操作
	//
	//	rpc AccountCreditAdd (AccountCreditAddRequest) returns (AccountCreditAddReply) {}
	//
	// 通过用户id充值操作
	AccountRechargeByUserId(ctx context.Context, in *AccountRechargeByUserIdRequest, opts ...grpc.CallOption) (*AccountCreditAddReply, error)
	// 资金操作（管理员, 可扣为负）
	AccountFundOperate(ctx context.Context, in *AccountFundOperateRequest, opts ...grpc.CallOption) (*AccountFundOperateReply, error)
	// 一键冻结账户操作 打开｜关闭
	ManualFreezeAccount(ctx context.Context, in *ManualFreezeAccountRequest, opts ...grpc.CallOption) (*ManualFreezeAccountReply, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, AccountService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountByUserID(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error) {
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, AccountService_GetAccountByUserID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountReply, error) {
	out := new(CreateAccountReply)
	err := c.cc.Invoke(ctx, AccountService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ModifyAccount(ctx context.Context, in *ModifyAccountRequest, opts ...grpc.CallOption) (*ModifyAccountReply, error) {
	out := new(ModifyAccountReply)
	err := c.cc.Invoke(ctx, AccountService_ModifyAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountIncomeAndExpendDetail(ctx context.Context, in *AccountIncomeAndExpendDetailRequest, opts ...grpc.CallOption) (*AccountIncomeAndExpendDetailReply, error) {
	out := new(AccountIncomeAndExpendDetailReply)
	err := c.cc.Invoke(ctx, AccountService_AccountIncomeAndExpendDetail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountPayReduce(ctx context.Context, in *AccountPayReduceRequest, opts ...grpc.CallOption) (*AccountPayReduceReply, error) {
	out := new(AccountPayReduceReply)
	err := c.cc.Invoke(ctx, AccountService_AccountPayReduce_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountPayFreeze(ctx context.Context, in *AccountPayFreezeRequest, opts ...grpc.CallOption) (*AccountPayFreezeReply, error) {
	out := new(AccountPayFreezeReply)
	err := c.cc.Invoke(ctx, AccountService_AccountPayFreeze_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountPayUnfreeze(ctx context.Context, in *AccountPayUnfreezeRequest, opts ...grpc.CallOption) (*AccountPayUnfreezeReply, error) {
	out := new(AccountPayUnfreezeReply)
	err := c.cc.Invoke(ctx, AccountService_AccountPayUnfreeze_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountRechargeByUserId(ctx context.Context, in *AccountRechargeByUserIdRequest, opts ...grpc.CallOption) (*AccountCreditAddReply, error) {
	out := new(AccountCreditAddReply)
	err := c.cc.Invoke(ctx, AccountService_AccountRechargeByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) AccountFundOperate(ctx context.Context, in *AccountFundOperateRequest, opts ...grpc.CallOption) (*AccountFundOperateReply, error) {
	out := new(AccountFundOperateReply)
	err := c.cc.Invoke(ctx, AccountService_AccountFundOperate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ManualFreezeAccount(ctx context.Context, in *ManualFreezeAccountRequest, opts ...grpc.CallOption) (*ManualFreezeAccountReply, error) {
	out := new(ManualFreezeAccountReply)
	err := c.cc.Invoke(ctx, AccountService_ManualFreezeAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	// 获取资金账户
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error)
	GetAccountByUserID(context.Context, *GetAccountRequest) (*GetAccountReply, error)
	// 创建资金账户
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error)
	// 修改资金账户
	ModifyAccount(context.Context, *ModifyAccountRequest) (*ModifyAccountReply, error)
	// 账户收支明细
	AccountIncomeAndExpendDetail(context.Context, *AccountIncomeAndExpendDetailRequest) (*AccountIncomeAndExpendDetailReply, error)
	// 支付 扣款操作
	AccountPayReduce(context.Context, *AccountPayReduceRequest) (*AccountPayReduceReply, error)
	// 支付 冻结操作
	AccountPayFreeze(context.Context, *AccountPayFreezeRequest) (*AccountPayFreezeReply, error)
	// 支付 解冻操作
	AccountPayUnfreeze(context.Context, *AccountPayUnfreezeRequest) (*AccountPayUnfreezeReply, error)
	// 充值 加款操作
	//
	//	rpc AccountCreditAdd (AccountCreditAddRequest) returns (AccountCreditAddReply) {}
	//
	// 通过用户id充值操作
	AccountRechargeByUserId(context.Context, *AccountRechargeByUserIdRequest) (*AccountCreditAddReply, error)
	// 资金操作（管理员, 可扣为负）
	AccountFundOperate(context.Context, *AccountFundOperateRequest) (*AccountFundOperateReply, error)
	// 一键冻结账户操作 打开｜关闭
	ManualFreezeAccount(context.Context, *ManualFreezeAccountRequest) (*ManualFreezeAccountReply, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountByUserID(context.Context, *GetAccountRequest) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountByUserID not implemented")
}
func (UnimplementedAccountServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) ModifyAccount(context.Context, *ModifyAccountRequest) (*ModifyAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAccount not implemented")
}
func (UnimplementedAccountServiceServer) AccountIncomeAndExpendDetail(context.Context, *AccountIncomeAndExpendDetailRequest) (*AccountIncomeAndExpendDetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountIncomeAndExpendDetail not implemented")
}
func (UnimplementedAccountServiceServer) AccountPayReduce(context.Context, *AccountPayReduceRequest) (*AccountPayReduceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountPayReduce not implemented")
}
func (UnimplementedAccountServiceServer) AccountPayFreeze(context.Context, *AccountPayFreezeRequest) (*AccountPayFreezeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountPayFreeze not implemented")
}
func (UnimplementedAccountServiceServer) AccountPayUnfreeze(context.Context, *AccountPayUnfreezeRequest) (*AccountPayUnfreezeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountPayUnfreeze not implemented")
}
func (UnimplementedAccountServiceServer) AccountRechargeByUserId(context.Context, *AccountRechargeByUserIdRequest) (*AccountCreditAddReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRechargeByUserId not implemented")
}
func (UnimplementedAccountServiceServer) AccountFundOperate(context.Context, *AccountFundOperateRequest) (*AccountFundOperateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountFundOperate not implemented")
}
func (UnimplementedAccountServiceServer) ManualFreezeAccount(context.Context, *ManualFreezeAccountRequest) (*ManualFreezeAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualFreezeAccount not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_GetAccountByUserID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountByUserID(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ModifyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ModifyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ModifyAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ModifyAccount(ctx, req.(*ModifyAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountIncomeAndExpendDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountIncomeAndExpendDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountIncomeAndExpendDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountIncomeAndExpendDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountIncomeAndExpendDetail(ctx, req.(*AccountIncomeAndExpendDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountPayReduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPayReduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountPayReduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountPayReduce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountPayReduce(ctx, req.(*AccountPayReduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountPayFreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPayFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountPayFreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountPayFreeze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountPayFreeze(ctx, req.(*AccountPayFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountPayUnfreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPayUnfreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountPayUnfreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountPayUnfreeze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountPayUnfreeze(ctx, req.(*AccountPayUnfreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountRechargeByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRechargeByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountRechargeByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountRechargeByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountRechargeByUserId(ctx, req.(*AccountRechargeByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_AccountFundOperate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFundOperateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).AccountFundOperate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_AccountFundOperate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).AccountFundOperate(ctx, req.(*AccountFundOperateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ManualFreezeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualFreezeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ManualFreezeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccountService_ManualFreezeAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ManualFreezeAccount(ctx, req.(*ManualFreezeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account_bill.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _AccountService_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountByUserID",
			Handler:    _AccountService_GetAccountByUserID_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "ModifyAccount",
			Handler:    _AccountService_ModifyAccount_Handler,
		},
		{
			MethodName: "AccountIncomeAndExpendDetail",
			Handler:    _AccountService_AccountIncomeAndExpendDetail_Handler,
		},
		{
			MethodName: "AccountPayReduce",
			Handler:    _AccountService_AccountPayReduce_Handler,
		},
		{
			MethodName: "AccountPayFreeze",
			Handler:    _AccountService_AccountPayFreeze_Handler,
		},
		{
			MethodName: "AccountPayUnfreeze",
			Handler:    _AccountService_AccountPayUnfreeze_Handler,
		},
		{
			MethodName: "AccountRechargeByUserId",
			Handler:    _AccountService_AccountRechargeByUserId_Handler,
		},
		{
			MethodName: "AccountFundOperate",
			Handler:    _AccountService_AccountFundOperate_Handler,
		},
		{
			MethodName: "ManualFreezeAccount",
			Handler:    _AccountService_ManualFreezeAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/account_bill/account.proto",
}
