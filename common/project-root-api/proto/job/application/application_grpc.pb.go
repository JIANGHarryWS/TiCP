// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/job/application/application.proto

package application

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApplicationManagement_ListApps_FullMethodName                   = "/application.ApplicationManagement/ListApps"
	ApplicationManagement_GetAppInfo_FullMethodName                 = "/application.ApplicationManagement/GetAppInfo"
	ApplicationManagement_GetCanaryAppInfo_FullMethodName           = "/application.ApplicationManagement/GetCanaryAppInfo"
	ApplicationManagement_AddApp_FullMethodName                     = "/application.ApplicationManagement/AddApp"
	ApplicationManagement_DeleteApp_FullMethodName                  = "/application.ApplicationManagement/DeleteApp"
	ApplicationManagement_DeleteCanaryApp_FullMethodName            = "/application.ApplicationManagement/DeleteCanaryApp"
	ApplicationManagement_SaveAppParamsByIDs_FullMethodName         = "/application.ApplicationManagement/SaveAppParamsByIDs"
	ApplicationManagement_SaveApp_FullMethodName                    = "/application.ApplicationManagement/SaveApp"
	ApplicationManagement_SaveCanaryApp_FullMethodName              = "/application.ApplicationManagement/SaveCanaryApp"
	ApplicationManagement_ListPublishedApps_FullMethodName          = "/application.ApplicationManagement/ListPublishedApps"
	ApplicationManagement_GetAppResultFileFilterRule_FullMethodName = "/application.ApplicationManagement/GetAppResultFileFilterRule"
	ApplicationManagement_ListAppSCs_FullMethodName                 = "/application.ApplicationManagement/ListAppSCs"
	ApplicationManagement_GetAppFiles_FullMethodName                = "/application.ApplicationManagement/GetAppFiles"
	ApplicationManagement_GetCanaryAppFiles_FullMethodName          = "/application.ApplicationManagement/GetCanaryAppFiles"
)

// ApplicationManagementClient is the client API for ApplicationManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationManagementClient interface {
	// List application
	ListApps(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListReply, error)
	// Get application information
	GetAppInfo(ctx context.Context, in *AppInfoRequest, opts ...grpc.CallOption) (*AppInfoReply, error)
	// Get canary application information
	GetCanaryAppInfo(ctx context.Context, in *AppInfoRequest, opts ...grpc.CallOption) (*AppInfoReply, error)
	// Add a new application information
	AddApp(ctx context.Context, in *AppAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete one unpublished application
	DeleteApp(ctx context.Context, in *AppDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete one canary application
	DeleteCanaryApp(ctx context.Context, in *AppDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SaveAppParamsByIDs 按应用id批量存储AppParams
	SaveAppParamsByIDs(ctx context.Context, in *SaveAppParamsByIDsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SaveApp saves the application
	SaveApp(ctx context.Context, in *AppSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SaveCanaryApp saves canary the application
	SaveCanaryApp(ctx context.Context, in *AppSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deprecated - List published application
	ListPublishedApps(ctx context.Context, in *PublishedAppListRequest, opts ...grpc.CallOption) (*PublishedAppListReply, error)
	// Get the app result file file rule
	GetAppResultFileFilterRule(ctx context.Context, in *AppResultFileFilterRuleRequest, opts ...grpc.CallOption) (*AppResultFileFilterRuleReply, error)
	// List all SCs
	ListAppSCs(ctx context.Context, in *ScListRequest, opts ...grpc.CallOption) (*ScListReply, error)
	// GetAppFiles with content
	GetAppFiles(ctx context.Context, in *GetAppFilesRequest, opts ...grpc.CallOption) (*GetAppFilesReply, error)
	// GetCanaryAppFiles with content
	GetCanaryAppFiles(ctx context.Context, in *GetCanaryAppFilesRequest, opts ...grpc.CallOption) (*GetCanaryAppFilesReply, error)
}

type applicationManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationManagementClient(cc grpc.ClientConnInterface) ApplicationManagementClient {
	return &applicationManagementClient{cc}
}

func (c *applicationManagementClient) ListApps(ctx context.Context, in *AppListRequest, opts ...grpc.CallOption) (*AppListReply, error) {
	out := new(AppListReply)
	err := c.cc.Invoke(ctx, ApplicationManagement_ListApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetAppInfo(ctx context.Context, in *AppInfoRequest, opts ...grpc.CallOption) (*AppInfoReply, error) {
	out := new(AppInfoReply)
	err := c.cc.Invoke(ctx, ApplicationManagement_GetAppInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetCanaryAppInfo(ctx context.Context, in *AppInfoRequest, opts ...grpc.CallOption) (*AppInfoReply, error) {
	out := new(AppInfoReply)
	err := c.cc.Invoke(ctx, ApplicationManagement_GetCanaryAppInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) AddApp(ctx context.Context, in *AppAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationManagement_AddApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteApp(ctx context.Context, in *AppDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationManagement_DeleteApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) DeleteCanaryApp(ctx context.Context, in *AppDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationManagement_DeleteCanaryApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) SaveAppParamsByIDs(ctx context.Context, in *SaveAppParamsByIDsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationManagement_SaveAppParamsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) SaveApp(ctx context.Context, in *AppSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationManagement_SaveApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) SaveCanaryApp(ctx context.Context, in *AppSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationManagement_SaveCanaryApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) ListPublishedApps(ctx context.Context, in *PublishedAppListRequest, opts ...grpc.CallOption) (*PublishedAppListReply, error) {
	out := new(PublishedAppListReply)
	err := c.cc.Invoke(ctx, ApplicationManagement_ListPublishedApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetAppResultFileFilterRule(ctx context.Context, in *AppResultFileFilterRuleRequest, opts ...grpc.CallOption) (*AppResultFileFilterRuleReply, error) {
	out := new(AppResultFileFilterRuleReply)
	err := c.cc.Invoke(ctx, ApplicationManagement_GetAppResultFileFilterRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) ListAppSCs(ctx context.Context, in *ScListRequest, opts ...grpc.CallOption) (*ScListReply, error) {
	out := new(ScListReply)
	err := c.cc.Invoke(ctx, ApplicationManagement_ListAppSCs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetAppFiles(ctx context.Context, in *GetAppFilesRequest, opts ...grpc.CallOption) (*GetAppFilesReply, error) {
	out := new(GetAppFilesReply)
	err := c.cc.Invoke(ctx, ApplicationManagement_GetAppFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationManagementClient) GetCanaryAppFiles(ctx context.Context, in *GetCanaryAppFilesRequest, opts ...grpc.CallOption) (*GetCanaryAppFilesReply, error) {
	out := new(GetCanaryAppFilesReply)
	err := c.cc.Invoke(ctx, ApplicationManagement_GetCanaryAppFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationManagementServer is the server API for ApplicationManagement service.
// All implementations must embed UnimplementedApplicationManagementServer
// for forward compatibility
type ApplicationManagementServer interface {
	// List application
	ListApps(context.Context, *AppListRequest) (*AppListReply, error)
	// Get application information
	GetAppInfo(context.Context, *AppInfoRequest) (*AppInfoReply, error)
	// Get canary application information
	GetCanaryAppInfo(context.Context, *AppInfoRequest) (*AppInfoReply, error)
	// Add a new application information
	AddApp(context.Context, *AppAddRequest) (*emptypb.Empty, error)
	// Delete one unpublished application
	DeleteApp(context.Context, *AppDeleteRequest) (*emptypb.Empty, error)
	// Delete one canary application
	DeleteCanaryApp(context.Context, *AppDeleteRequest) (*emptypb.Empty, error)
	// SaveAppParamsByIDs 按应用id批量存储AppParams
	SaveAppParamsByIDs(context.Context, *SaveAppParamsByIDsRequest) (*emptypb.Empty, error)
	// SaveApp saves the application
	SaveApp(context.Context, *AppSaveRequest) (*emptypb.Empty, error)
	// SaveCanaryApp saves canary the application
	SaveCanaryApp(context.Context, *AppSaveRequest) (*emptypb.Empty, error)
	// Deprecated - List published application
	ListPublishedApps(context.Context, *PublishedAppListRequest) (*PublishedAppListReply, error)
	// Get the app result file file rule
	GetAppResultFileFilterRule(context.Context, *AppResultFileFilterRuleRequest) (*AppResultFileFilterRuleReply, error)
	// List all SCs
	ListAppSCs(context.Context, *ScListRequest) (*ScListReply, error)
	// GetAppFiles with content
	GetAppFiles(context.Context, *GetAppFilesRequest) (*GetAppFilesReply, error)
	// GetCanaryAppFiles with content
	GetCanaryAppFiles(context.Context, *GetCanaryAppFilesRequest) (*GetCanaryAppFilesReply, error)
	mustEmbedUnimplementedApplicationManagementServer()
}

// UnimplementedApplicationManagementServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationManagementServer struct {
}

func (UnimplementedApplicationManagementServer) ListApps(context.Context, *AppListRequest) (*AppListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApps not implemented")
}
func (UnimplementedApplicationManagementServer) GetAppInfo(context.Context, *AppInfoRequest) (*AppInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfo not implemented")
}
func (UnimplementedApplicationManagementServer) GetCanaryAppInfo(context.Context, *AppInfoRequest) (*AppInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanaryAppInfo not implemented")
}
func (UnimplementedApplicationManagementServer) AddApp(context.Context, *AppAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApp not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteApp(context.Context, *AppDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedApplicationManagementServer) DeleteCanaryApp(context.Context, *AppDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCanaryApp not implemented")
}
func (UnimplementedApplicationManagementServer) SaveAppParamsByIDs(context.Context, *SaveAppParamsByIDsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAppParamsByIDs not implemented")
}
func (UnimplementedApplicationManagementServer) SaveApp(context.Context, *AppSaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveApp not implemented")
}
func (UnimplementedApplicationManagementServer) SaveCanaryApp(context.Context, *AppSaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCanaryApp not implemented")
}
func (UnimplementedApplicationManagementServer) ListPublishedApps(context.Context, *PublishedAppListRequest) (*PublishedAppListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublishedApps not implemented")
}
func (UnimplementedApplicationManagementServer) GetAppResultFileFilterRule(context.Context, *AppResultFileFilterRuleRequest) (*AppResultFileFilterRuleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppResultFileFilterRule not implemented")
}
func (UnimplementedApplicationManagementServer) ListAppSCs(context.Context, *ScListRequest) (*ScListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppSCs not implemented")
}
func (UnimplementedApplicationManagementServer) GetAppFiles(context.Context, *GetAppFilesRequest) (*GetAppFilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppFiles not implemented")
}
func (UnimplementedApplicationManagementServer) GetCanaryAppFiles(context.Context, *GetCanaryAppFilesRequest) (*GetCanaryAppFilesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanaryAppFiles not implemented")
}
func (UnimplementedApplicationManagementServer) mustEmbedUnimplementedApplicationManagementServer() {}

// UnsafeApplicationManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationManagementServer will
// result in compilation errors.
type UnsafeApplicationManagementServer interface {
	mustEmbedUnimplementedApplicationManagementServer()
}

func RegisterApplicationManagementServer(s grpc.ServiceRegistrar, srv ApplicationManagementServer) {
	s.RegisterService(&ApplicationManagement_ServiceDesc, srv)
}

func _ApplicationManagement_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_ListApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).ListApps(ctx, req.(*AppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_GetAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetAppInfo(ctx, req.(*AppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetCanaryAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetCanaryAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_GetCanaryAppInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetCanaryAppInfo(ctx, req.(*AppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_AddApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).AddApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_AddApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).AddApp(ctx, req.(*AppAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_DeleteApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteApp(ctx, req.(*AppDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_DeleteCanaryApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).DeleteCanaryApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_DeleteCanaryApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).DeleteCanaryApp(ctx, req.(*AppDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_SaveAppParamsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAppParamsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).SaveAppParamsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_SaveAppParamsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).SaveAppParamsByIDs(ctx, req.(*SaveAppParamsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_SaveApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).SaveApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_SaveApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).SaveApp(ctx, req.(*AppSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_SaveCanaryApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).SaveCanaryApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_SaveCanaryApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).SaveCanaryApp(ctx, req.(*AppSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_ListPublishedApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishedAppListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).ListPublishedApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_ListPublishedApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).ListPublishedApps(ctx, req.(*PublishedAppListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetAppResultFileFilterRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppResultFileFilterRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetAppResultFileFilterRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_GetAppResultFileFilterRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetAppResultFileFilterRule(ctx, req.(*AppResultFileFilterRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_ListAppSCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).ListAppSCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_ListAppSCs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).ListAppSCs(ctx, req.(*ScListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetAppFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetAppFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_GetAppFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetAppFiles(ctx, req.(*GetAppFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationManagement_GetCanaryAppFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCanaryAppFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationManagementServer).GetCanaryAppFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationManagement_GetCanaryAppFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationManagementServer).GetCanaryAppFiles(ctx, req.(*GetCanaryAppFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationManagement_ServiceDesc is the grpc.ServiceDesc for ApplicationManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.ApplicationManagement",
	HandlerType: (*ApplicationManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApps",
			Handler:    _ApplicationManagement_ListApps_Handler,
		},
		{
			MethodName: "GetAppInfo",
			Handler:    _ApplicationManagement_GetAppInfo_Handler,
		},
		{
			MethodName: "GetCanaryAppInfo",
			Handler:    _ApplicationManagement_GetCanaryAppInfo_Handler,
		},
		{
			MethodName: "AddApp",
			Handler:    _ApplicationManagement_AddApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _ApplicationManagement_DeleteApp_Handler,
		},
		{
			MethodName: "DeleteCanaryApp",
			Handler:    _ApplicationManagement_DeleteCanaryApp_Handler,
		},
		{
			MethodName: "SaveAppParamsByIDs",
			Handler:    _ApplicationManagement_SaveAppParamsByIDs_Handler,
		},
		{
			MethodName: "SaveApp",
			Handler:    _ApplicationManagement_SaveApp_Handler,
		},
		{
			MethodName: "SaveCanaryApp",
			Handler:    _ApplicationManagement_SaveCanaryApp_Handler,
		},
		{
			MethodName: "ListPublishedApps",
			Handler:    _ApplicationManagement_ListPublishedApps_Handler,
		},
		{
			MethodName: "GetAppResultFileFilterRule",
			Handler:    _ApplicationManagement_GetAppResultFileFilterRule_Handler,
		},
		{
			MethodName: "ListAppSCs",
			Handler:    _ApplicationManagement_ListAppSCs_Handler,
		},
		{
			MethodName: "GetAppFiles",
			Handler:    _ApplicationManagement_GetAppFiles_Handler,
		},
		{
			MethodName: "GetCanaryAppFiles",
			Handler:    _ApplicationManagement_GetCanaryAppFiles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job/application/application.proto",
}

const (
	ApplicationRuntimeManagement_ListAppRuntimes_FullMethodName                 = "/application.ApplicationRuntimeManagement/ListAppRuntimes"
	ApplicationRuntimeManagement_GetAppRuntime_FullMethodName                   = "/application.ApplicationRuntimeManagement/GetAppRuntime"
	ApplicationRuntimeManagement_GetCanaryAppRuntime_FullMethodName             = "/application.ApplicationRuntimeManagement/GetCanaryAppRuntime"
	ApplicationRuntimeManagement_AddAppRuntime_FullMethodName                   = "/application.ApplicationRuntimeManagement/AddAppRuntime"
	ApplicationRuntimeManagement_DeleteAppRuntime_FullMethodName                = "/application.ApplicationRuntimeManagement/DeleteAppRuntime"
	ApplicationRuntimeManagement_DeleteCanaryAppRuntime_FullMethodName          = "/application.ApplicationRuntimeManagement/DeleteCanaryAppRuntime"
	ApplicationRuntimeManagement_SaveAppRuntime_FullMethodName                  = "/application.ApplicationRuntimeManagement/SaveAppRuntime"
	ApplicationRuntimeManagement_SaveAppRuntimeParamsByIDs_FullMethodName       = "/application.ApplicationRuntimeManagement/SaveAppRuntimeParamsByIDs"
	ApplicationRuntimeManagement_SaveCanaryAppRuntime_FullMethodName            = "/application.ApplicationRuntimeManagement/SaveCanaryAppRuntime"
	ApplicationRuntimeManagement_PublishAppRuntime_FullMethodName               = "/application.ApplicationRuntimeManagement/PublishAppRuntime"
	ApplicationRuntimeManagement_OfficialPublishCanaryAppRuntime_FullMethodName = "/application.ApplicationRuntimeManagement/OfficialPublishCanaryAppRuntime"
	ApplicationRuntimeManagement_GetAppRuntimeAvailableCPUCores_FullMethodName  = "/application.ApplicationRuntimeManagement/GetAppRuntimeAvailableCPUCores"
)

// ApplicationRuntimeManagementClient is the client API for ApplicationRuntimeManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationRuntimeManagementClient interface {
	// List application runtime
	ListAppRuntimes(ctx context.Context, in *ApplicationRuntimeListRequest, opts ...grpc.CallOption) (*ApplicationRuntimeListReply, error)
	// Get application runtime information
	GetAppRuntime(ctx context.Context, in *ApplicationRuntimeRequest, opts ...grpc.CallOption) (*ApplicationRuntimeReply, error)
	// Get canary application runtime information
	GetCanaryAppRuntime(ctx context.Context, in *ApplicationRuntimeRequest, opts ...grpc.CallOption) (*ApplicationRuntimeReply, error)
	// Add one unpublished application runtime
	AddAppRuntime(ctx context.Context, in *ApplicationRuntimeAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete one unpublished application runtime
	DeleteAppRuntime(ctx context.Context, in *ApplicationRuntimeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete one canary application runtime
	DeleteCanaryAppRuntime(ctx context.Context, in *ApplicationRuntimeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update the application runtime
	SaveAppRuntime(ctx context.Context, in *ApplicationRuntimeSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SaveAppRuntimeParamsByIDs ...
	SaveAppRuntimeParamsByIDs(ctx context.Context, in *SaveAppRuntimeParamsByIDsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Update the canary application runtime
	SaveCanaryAppRuntime(ctx context.Context, in *ApplicationRuntimeSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publish one application in SCs
	PublishAppRuntime(ctx context.Context, in *ApplicationRuntimePublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Publish one canary application to official in SCs
	OfficialPublishCanaryAppRuntime(ctx context.Context, in *CanaryApplicationRuntimePublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAppRuntimeAvailableCPUCores Get available CPU cores for the application in this SC.
	// If user is canarying this runtime, the canary version will be returned.
	GetAppRuntimeAvailableCPUCores(ctx context.Context, in *AppRuntimeAvailableCPUCoresRequest, opts ...grpc.CallOption) (*AppRuntimeAvailableCPUCoresReply, error)
}

type applicationRuntimeManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationRuntimeManagementClient(cc grpc.ClientConnInterface) ApplicationRuntimeManagementClient {
	return &applicationRuntimeManagementClient{cc}
}

func (c *applicationRuntimeManagementClient) ListAppRuntimes(ctx context.Context, in *ApplicationRuntimeListRequest, opts ...grpc.CallOption) (*ApplicationRuntimeListReply, error) {
	out := new(ApplicationRuntimeListReply)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_ListAppRuntimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) GetAppRuntime(ctx context.Context, in *ApplicationRuntimeRequest, opts ...grpc.CallOption) (*ApplicationRuntimeReply, error) {
	out := new(ApplicationRuntimeReply)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_GetAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) GetCanaryAppRuntime(ctx context.Context, in *ApplicationRuntimeRequest, opts ...grpc.CallOption) (*ApplicationRuntimeReply, error) {
	out := new(ApplicationRuntimeReply)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_GetCanaryAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) AddAppRuntime(ctx context.Context, in *ApplicationRuntimeAddRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_AddAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) DeleteAppRuntime(ctx context.Context, in *ApplicationRuntimeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_DeleteAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) DeleteCanaryAppRuntime(ctx context.Context, in *ApplicationRuntimeDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_DeleteCanaryAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) SaveAppRuntime(ctx context.Context, in *ApplicationRuntimeSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_SaveAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) SaveAppRuntimeParamsByIDs(ctx context.Context, in *SaveAppRuntimeParamsByIDsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_SaveAppRuntimeParamsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) SaveCanaryAppRuntime(ctx context.Context, in *ApplicationRuntimeSaveRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_SaveCanaryAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) PublishAppRuntime(ctx context.Context, in *ApplicationRuntimePublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_PublishAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) OfficialPublishCanaryAppRuntime(ctx context.Context, in *CanaryApplicationRuntimePublishRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_OfficialPublishCanaryAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationRuntimeManagementClient) GetAppRuntimeAvailableCPUCores(ctx context.Context, in *AppRuntimeAvailableCPUCoresRequest, opts ...grpc.CallOption) (*AppRuntimeAvailableCPUCoresReply, error) {
	out := new(AppRuntimeAvailableCPUCoresReply)
	err := c.cc.Invoke(ctx, ApplicationRuntimeManagement_GetAppRuntimeAvailableCPUCores_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationRuntimeManagementServer is the server API for ApplicationRuntimeManagement service.
// All implementations must embed UnimplementedApplicationRuntimeManagementServer
// for forward compatibility
type ApplicationRuntimeManagementServer interface {
	// List application runtime
	ListAppRuntimes(context.Context, *ApplicationRuntimeListRequest) (*ApplicationRuntimeListReply, error)
	// Get application runtime information
	GetAppRuntime(context.Context, *ApplicationRuntimeRequest) (*ApplicationRuntimeReply, error)
	// Get canary application runtime information
	GetCanaryAppRuntime(context.Context, *ApplicationRuntimeRequest) (*ApplicationRuntimeReply, error)
	// Add one unpublished application runtime
	AddAppRuntime(context.Context, *ApplicationRuntimeAddRequest) (*emptypb.Empty, error)
	// Delete one unpublished application runtime
	DeleteAppRuntime(context.Context, *ApplicationRuntimeDeleteRequest) (*emptypb.Empty, error)
	// Delete one canary application runtime
	DeleteCanaryAppRuntime(context.Context, *ApplicationRuntimeDeleteRequest) (*emptypb.Empty, error)
	// Update the application runtime
	SaveAppRuntime(context.Context, *ApplicationRuntimeSaveRequest) (*emptypb.Empty, error)
	// SaveAppRuntimeParamsByIDs ...
	SaveAppRuntimeParamsByIDs(context.Context, *SaveAppRuntimeParamsByIDsRequest) (*emptypb.Empty, error)
	// Update the canary application runtime
	SaveCanaryAppRuntime(context.Context, *ApplicationRuntimeSaveRequest) (*emptypb.Empty, error)
	// Publish one application in SCs
	PublishAppRuntime(context.Context, *ApplicationRuntimePublishRequest) (*emptypb.Empty, error)
	// Publish one canary application to official in SCs
	OfficialPublishCanaryAppRuntime(context.Context, *CanaryApplicationRuntimePublishRequest) (*emptypb.Empty, error)
	// GetAppRuntimeAvailableCPUCores Get available CPU cores for the application in this SC.
	// If user is canarying this runtime, the canary version will be returned.
	GetAppRuntimeAvailableCPUCores(context.Context, *AppRuntimeAvailableCPUCoresRequest) (*AppRuntimeAvailableCPUCoresReply, error)
	mustEmbedUnimplementedApplicationRuntimeManagementServer()
}

// UnimplementedApplicationRuntimeManagementServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationRuntimeManagementServer struct {
}

func (UnimplementedApplicationRuntimeManagementServer) ListAppRuntimes(context.Context, *ApplicationRuntimeListRequest) (*ApplicationRuntimeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppRuntimes not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) GetAppRuntime(context.Context, *ApplicationRuntimeRequest) (*ApplicationRuntimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRuntime not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) GetCanaryAppRuntime(context.Context, *ApplicationRuntimeRequest) (*ApplicationRuntimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCanaryAppRuntime not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) AddAppRuntime(context.Context, *ApplicationRuntimeAddRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppRuntime not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) DeleteAppRuntime(context.Context, *ApplicationRuntimeDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppRuntime not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) DeleteCanaryAppRuntime(context.Context, *ApplicationRuntimeDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCanaryAppRuntime not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) SaveAppRuntime(context.Context, *ApplicationRuntimeSaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAppRuntime not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) SaveAppRuntimeParamsByIDs(context.Context, *SaveAppRuntimeParamsByIDsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAppRuntimeParamsByIDs not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) SaveCanaryAppRuntime(context.Context, *ApplicationRuntimeSaveRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCanaryAppRuntime not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) PublishAppRuntime(context.Context, *ApplicationRuntimePublishRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAppRuntime not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) OfficialPublishCanaryAppRuntime(context.Context, *CanaryApplicationRuntimePublishRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfficialPublishCanaryAppRuntime not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) GetAppRuntimeAvailableCPUCores(context.Context, *AppRuntimeAvailableCPUCoresRequest) (*AppRuntimeAvailableCPUCoresReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRuntimeAvailableCPUCores not implemented")
}
func (UnimplementedApplicationRuntimeManagementServer) mustEmbedUnimplementedApplicationRuntimeManagementServer() {
}

// UnsafeApplicationRuntimeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationRuntimeManagementServer will
// result in compilation errors.
type UnsafeApplicationRuntimeManagementServer interface {
	mustEmbedUnimplementedApplicationRuntimeManagementServer()
}

func RegisterApplicationRuntimeManagementServer(s grpc.ServiceRegistrar, srv ApplicationRuntimeManagementServer) {
	s.RegisterService(&ApplicationRuntimeManagement_ServiceDesc, srv)
}

func _ApplicationRuntimeManagement_ListAppRuntimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRuntimeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).ListAppRuntimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_ListAppRuntimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).ListAppRuntimes(ctx, req.(*ApplicationRuntimeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_GetAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).GetAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_GetAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).GetAppRuntime(ctx, req.(*ApplicationRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_GetCanaryAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).GetCanaryAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_GetCanaryAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).GetCanaryAppRuntime(ctx, req.(*ApplicationRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_AddAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRuntimeAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).AddAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_AddAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).AddAppRuntime(ctx, req.(*ApplicationRuntimeAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_DeleteAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRuntimeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).DeleteAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_DeleteAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).DeleteAppRuntime(ctx, req.(*ApplicationRuntimeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_DeleteCanaryAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRuntimeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).DeleteCanaryAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_DeleteCanaryAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).DeleteCanaryAppRuntime(ctx, req.(*ApplicationRuntimeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_SaveAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRuntimeSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).SaveAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_SaveAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).SaveAppRuntime(ctx, req.(*ApplicationRuntimeSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_SaveAppRuntimeParamsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAppRuntimeParamsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).SaveAppRuntimeParamsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_SaveAppRuntimeParamsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).SaveAppRuntimeParamsByIDs(ctx, req.(*SaveAppRuntimeParamsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_SaveCanaryAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRuntimeSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).SaveCanaryAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_SaveCanaryAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).SaveCanaryAppRuntime(ctx, req.(*ApplicationRuntimeSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_PublishAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRuntimePublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).PublishAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_PublishAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).PublishAppRuntime(ctx, req.(*ApplicationRuntimePublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_OfficialPublishCanaryAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CanaryApplicationRuntimePublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).OfficialPublishCanaryAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_OfficialPublishCanaryAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).OfficialPublishCanaryAppRuntime(ctx, req.(*CanaryApplicationRuntimePublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationRuntimeManagement_GetAppRuntimeAvailableCPUCores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppRuntimeAvailableCPUCoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationRuntimeManagementServer).GetAppRuntimeAvailableCPUCores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationRuntimeManagement_GetAppRuntimeAvailableCPUCores_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationRuntimeManagementServer).GetAppRuntimeAvailableCPUCores(ctx, req.(*AppRuntimeAvailableCPUCoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationRuntimeManagement_ServiceDesc is the grpc.ServiceDesc for ApplicationRuntimeManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationRuntimeManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.ApplicationRuntimeManagement",
	HandlerType: (*ApplicationRuntimeManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAppRuntimes",
			Handler:    _ApplicationRuntimeManagement_ListAppRuntimes_Handler,
		},
		{
			MethodName: "GetAppRuntime",
			Handler:    _ApplicationRuntimeManagement_GetAppRuntime_Handler,
		},
		{
			MethodName: "GetCanaryAppRuntime",
			Handler:    _ApplicationRuntimeManagement_GetCanaryAppRuntime_Handler,
		},
		{
			MethodName: "AddAppRuntime",
			Handler:    _ApplicationRuntimeManagement_AddAppRuntime_Handler,
		},
		{
			MethodName: "DeleteAppRuntime",
			Handler:    _ApplicationRuntimeManagement_DeleteAppRuntime_Handler,
		},
		{
			MethodName: "DeleteCanaryAppRuntime",
			Handler:    _ApplicationRuntimeManagement_DeleteCanaryAppRuntime_Handler,
		},
		{
			MethodName: "SaveAppRuntime",
			Handler:    _ApplicationRuntimeManagement_SaveAppRuntime_Handler,
		},
		{
			MethodName: "SaveAppRuntimeParamsByIDs",
			Handler:    _ApplicationRuntimeManagement_SaveAppRuntimeParamsByIDs_Handler,
		},
		{
			MethodName: "SaveCanaryAppRuntime",
			Handler:    _ApplicationRuntimeManagement_SaveCanaryAppRuntime_Handler,
		},
		{
			MethodName: "PublishAppRuntime",
			Handler:    _ApplicationRuntimeManagement_PublishAppRuntime_Handler,
		},
		{
			MethodName: "OfficialPublishCanaryAppRuntime",
			Handler:    _ApplicationRuntimeManagement_OfficialPublishCanaryAppRuntime_Handler,
		},
		{
			MethodName: "GetAppRuntimeAvailableCPUCores",
			Handler:    _ApplicationRuntimeManagement_GetAppRuntimeAvailableCPUCores_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job/application/application.proto",
}

const (
	ServerApplicationRuntimeInfo_ListAllAppRuntimes_FullMethodName  = "/application.ServerApplicationRuntimeInfo/ListAllAppRuntimes"
	ServerApplicationRuntimeInfo_GetServerAppRuntime_FullMethodName = "/application.ServerApplicationRuntimeInfo/GetServerAppRuntime"
)

// ServerApplicationRuntimeInfoClient is the client API for ServerApplicationRuntimeInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerApplicationRuntimeInfoClient interface {
	// deprecated api, use ApplicationRuntimeManagement.ListAppRuntimes instead
	ListAllAppRuntimes(ctx context.Context, in *AllApplicationRuntimesListRequest, opts ...grpc.CallOption) (*AllApplicationRuntimesListReply, error)
	// Get server application runtime information. If user is canarying this runtime,
	// deprecated api, use ApplicationRuntimeManagement.GetAppRuntime instead
	GetServerAppRuntime(ctx context.Context, in *ServerApplicationRuntimeRequest, opts ...grpc.CallOption) (*ServerApplicationRuntimeReply, error)
}

type serverApplicationRuntimeInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewServerApplicationRuntimeInfoClient(cc grpc.ClientConnInterface) ServerApplicationRuntimeInfoClient {
	return &serverApplicationRuntimeInfoClient{cc}
}

func (c *serverApplicationRuntimeInfoClient) ListAllAppRuntimes(ctx context.Context, in *AllApplicationRuntimesListRequest, opts ...grpc.CallOption) (*AllApplicationRuntimesListReply, error) {
	out := new(AllApplicationRuntimesListReply)
	err := c.cc.Invoke(ctx, ServerApplicationRuntimeInfo_ListAllAppRuntimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverApplicationRuntimeInfoClient) GetServerAppRuntime(ctx context.Context, in *ServerApplicationRuntimeRequest, opts ...grpc.CallOption) (*ServerApplicationRuntimeReply, error) {
	out := new(ServerApplicationRuntimeReply)
	err := c.cc.Invoke(ctx, ServerApplicationRuntimeInfo_GetServerAppRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerApplicationRuntimeInfoServer is the server API for ServerApplicationRuntimeInfo service.
// All implementations must embed UnimplementedServerApplicationRuntimeInfoServer
// for forward compatibility
type ServerApplicationRuntimeInfoServer interface {
	// deprecated api, use ApplicationRuntimeManagement.ListAppRuntimes instead
	ListAllAppRuntimes(context.Context, *AllApplicationRuntimesListRequest) (*AllApplicationRuntimesListReply, error)
	// Get server application runtime information. If user is canarying this runtime,
	// deprecated api, use ApplicationRuntimeManagement.GetAppRuntime instead
	GetServerAppRuntime(context.Context, *ServerApplicationRuntimeRequest) (*ServerApplicationRuntimeReply, error)
	mustEmbedUnimplementedServerApplicationRuntimeInfoServer()
}

// UnimplementedServerApplicationRuntimeInfoServer must be embedded to have forward compatible implementations.
type UnimplementedServerApplicationRuntimeInfoServer struct {
}

func (UnimplementedServerApplicationRuntimeInfoServer) ListAllAppRuntimes(context.Context, *AllApplicationRuntimesListRequest) (*AllApplicationRuntimesListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllAppRuntimes not implemented")
}
func (UnimplementedServerApplicationRuntimeInfoServer) GetServerAppRuntime(context.Context, *ServerApplicationRuntimeRequest) (*ServerApplicationRuntimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerAppRuntime not implemented")
}
func (UnimplementedServerApplicationRuntimeInfoServer) mustEmbedUnimplementedServerApplicationRuntimeInfoServer() {
}

// UnsafeServerApplicationRuntimeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerApplicationRuntimeInfoServer will
// result in compilation errors.
type UnsafeServerApplicationRuntimeInfoServer interface {
	mustEmbedUnimplementedServerApplicationRuntimeInfoServer()
}

func RegisterServerApplicationRuntimeInfoServer(s grpc.ServiceRegistrar, srv ServerApplicationRuntimeInfoServer) {
	s.RegisterService(&ServerApplicationRuntimeInfo_ServiceDesc, srv)
}

func _ServerApplicationRuntimeInfo_ListAllAppRuntimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllApplicationRuntimesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerApplicationRuntimeInfoServer).ListAllAppRuntimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerApplicationRuntimeInfo_ListAllAppRuntimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerApplicationRuntimeInfoServer).ListAllAppRuntimes(ctx, req.(*AllApplicationRuntimesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerApplicationRuntimeInfo_GetServerAppRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerApplicationRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerApplicationRuntimeInfoServer).GetServerAppRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerApplicationRuntimeInfo_GetServerAppRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerApplicationRuntimeInfoServer).GetServerAppRuntime(ctx, req.(*ServerApplicationRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerApplicationRuntimeInfo_ServiceDesc is the grpc.ServiceDesc for ServerApplicationRuntimeInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerApplicationRuntimeInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.ServerApplicationRuntimeInfo",
	HandlerType: (*ServerApplicationRuntimeInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAllAppRuntimes",
			Handler:    _ServerApplicationRuntimeInfo_ListAllAppRuntimes_Handler,
		},
		{
			MethodName: "GetServerAppRuntime",
			Handler:    _ServerApplicationRuntimeInfo_GetServerAppRuntime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job/application/application.proto",
}
