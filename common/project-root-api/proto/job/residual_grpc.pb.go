// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/job/residual.proto

package job

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResidualStore_SetResidual_FullMethodName = "/job.ResidualStore/SetResidual"
	ResidualStore_GetResidual_FullMethodName = "/job.ResidualStore/GetResidual"
)

// ResidualStoreClient is the client API for ResidualStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResidualStoreClient interface {
	SetResidual(ctx context.Context, in *SetResidualRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// by JobRuntime ID
	GetResidual(ctx context.Context, in *GetResidualRequest, opts ...grpc.CallOption) (*GetResidualReply, error)
}

type residualStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewResidualStoreClient(cc grpc.ClientConnInterface) ResidualStoreClient {
	return &residualStoreClient{cc}
}

func (c *residualStoreClient) SetResidual(ctx context.Context, in *SetResidualRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ResidualStore_SetResidual_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *residualStoreClient) GetResidual(ctx context.Context, in *GetResidualRequest, opts ...grpc.CallOption) (*GetResidualReply, error) {
	out := new(GetResidualReply)
	err := c.cc.Invoke(ctx, ResidualStore_GetResidual_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResidualStoreServer is the server API for ResidualStore service.
// All implementations must embed UnimplementedResidualStoreServer
// for forward compatibility
type ResidualStoreServer interface {
	SetResidual(context.Context, *SetResidualRequest) (*emptypb.Empty, error)
	// by JobRuntime ID
	GetResidual(context.Context, *GetResidualRequest) (*GetResidualReply, error)
	mustEmbedUnimplementedResidualStoreServer()
}

// UnimplementedResidualStoreServer must be embedded to have forward compatible implementations.
type UnimplementedResidualStoreServer struct {
}

func (UnimplementedResidualStoreServer) SetResidual(context.Context, *SetResidualRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResidual not implemented")
}
func (UnimplementedResidualStoreServer) GetResidual(context.Context, *GetResidualRequest) (*GetResidualReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResidual not implemented")
}
func (UnimplementedResidualStoreServer) mustEmbedUnimplementedResidualStoreServer() {}

// UnsafeResidualStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResidualStoreServer will
// result in compilation errors.
type UnsafeResidualStoreServer interface {
	mustEmbedUnimplementedResidualStoreServer()
}

func RegisterResidualStoreServer(s grpc.ServiceRegistrar, srv ResidualStoreServer) {
	s.RegisterService(&ResidualStore_ServiceDesc, srv)
}

func _ResidualStore_SetResidual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetResidualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidualStoreServer).SetResidual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResidualStore_SetResidual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidualStoreServer).SetResidual(ctx, req.(*SetResidualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResidualStore_GetResidual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResidualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResidualStoreServer).GetResidual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResidualStore_GetResidual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResidualStoreServer).GetResidual(ctx, req.(*GetResidualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResidualStore_ServiceDesc is the grpc.ServiceDesc for ResidualStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResidualStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.ResidualStore",
	HandlerType: (*ResidualStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetResidual",
			Handler:    _ResidualStore_SetResidual_Handler,
		},
		{
			MethodName: "GetResidual",
			Handler:    _ResidualStore_GetResidual_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job/residual.proto",
}
