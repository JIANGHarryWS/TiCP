// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/job/sc.proto

package job

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SC_AddSC_FullMethodName                  = "/job.SC/AddSC"
	SC_UpdateSC_FullMethodName               = "/job.SC/UpdateSC"
	SC_DeleteSC_FullMethodName               = "/job.SC/DeleteSC"
	SC_GetSCAvailableResource_FullMethodName = "/job.SC/GetSCAvailableResource"
	SC_GetZoneSCList_FullMethodName          = "/job.SC/GetZoneSCList"
)

// SCClient is the client API for SC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SCClient interface {
	AddSC(ctx context.Context, in *AddSCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateSC(ctx context.Context, in *UpdateSCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSC(ctx context.Context, in *DeleteSCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSCAvailableResource(ctx context.Context, in *GetSCAvailableResourceRequest, opts ...grpc.CallOption) (*GetSCAvailableResourceResponse, error)
	GetZoneSCList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetZoneSCListResponse, error)
}

type sCClient struct {
	cc grpc.ClientConnInterface
}

func NewSCClient(cc grpc.ClientConnInterface) SCClient {
	return &sCClient{cc}
}

func (c *sCClient) AddSC(ctx context.Context, in *AddSCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SC_AddSC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCClient) UpdateSC(ctx context.Context, in *UpdateSCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SC_UpdateSC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCClient) DeleteSC(ctx context.Context, in *DeleteSCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SC_DeleteSC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCClient) GetSCAvailableResource(ctx context.Context, in *GetSCAvailableResourceRequest, opts ...grpc.CallOption) (*GetSCAvailableResourceResponse, error) {
	out := new(GetSCAvailableResourceResponse)
	err := c.cc.Invoke(ctx, SC_GetSCAvailableResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sCClient) GetZoneSCList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetZoneSCListResponse, error) {
	out := new(GetZoneSCListResponse)
	err := c.cc.Invoke(ctx, SC_GetZoneSCList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SCServer is the server API for SC service.
// All implementations must embed UnimplementedSCServer
// for forward compatibility
type SCServer interface {
	AddSC(context.Context, *AddSCRequest) (*emptypb.Empty, error)
	UpdateSC(context.Context, *UpdateSCRequest) (*emptypb.Empty, error)
	DeleteSC(context.Context, *DeleteSCRequest) (*emptypb.Empty, error)
	GetSCAvailableResource(context.Context, *GetSCAvailableResourceRequest) (*GetSCAvailableResourceResponse, error)
	GetZoneSCList(context.Context, *emptypb.Empty) (*GetZoneSCListResponse, error)
	mustEmbedUnimplementedSCServer()
}

// UnimplementedSCServer must be embedded to have forward compatible implementations.
type UnimplementedSCServer struct {
}

func (UnimplementedSCServer) AddSC(context.Context, *AddSCRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSC not implemented")
}
func (UnimplementedSCServer) UpdateSC(context.Context, *UpdateSCRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSC not implemented")
}
func (UnimplementedSCServer) DeleteSC(context.Context, *DeleteSCRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSC not implemented")
}
func (UnimplementedSCServer) GetSCAvailableResource(context.Context, *GetSCAvailableResourceRequest) (*GetSCAvailableResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSCAvailableResource not implemented")
}
func (UnimplementedSCServer) GetZoneSCList(context.Context, *emptypb.Empty) (*GetZoneSCListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZoneSCList not implemented")
}
func (UnimplementedSCServer) mustEmbedUnimplementedSCServer() {}

// UnsafeSCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SCServer will
// result in compilation errors.
type UnsafeSCServer interface {
	mustEmbedUnimplementedSCServer()
}

func RegisterSCServer(s grpc.ServiceRegistrar, srv SCServer) {
	s.RegisterService(&SC_ServiceDesc, srv)
}

func _SC_AddSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCServer).AddSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SC_AddSC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCServer).AddSC(ctx, req.(*AddSCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SC_UpdateSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCServer).UpdateSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SC_UpdateSC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCServer).UpdateSC(ctx, req.(*UpdateSCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SC_DeleteSC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCServer).DeleteSC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SC_DeleteSC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCServer).DeleteSC(ctx, req.(*DeleteSCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SC_GetSCAvailableResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSCAvailableResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCServer).GetSCAvailableResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SC_GetSCAvailableResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCServer).GetSCAvailableResource(ctx, req.(*GetSCAvailableResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SC_GetZoneSCList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SCServer).GetZoneSCList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SC_GetZoneSCList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SCServer).GetZoneSCList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SC_ServiceDesc is the grpc.ServiceDesc for SC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.SC",
	HandlerType: (*SCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddSC",
			Handler:    _SC_AddSC_Handler,
		},
		{
			MethodName: "UpdateSC",
			Handler:    _SC_UpdateSC_Handler,
		},
		{
			MethodName: "DeleteSC",
			Handler:    _SC_DeleteSC_Handler,
		},
		{
			MethodName: "GetSCAvailableResource",
			Handler:    _SC_GetSCAvailableResource_Handler,
		},
		{
			MethodName: "GetZoneSCList",
			Handler:    _SC_GetZoneSCList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job/sc.proto",
}
