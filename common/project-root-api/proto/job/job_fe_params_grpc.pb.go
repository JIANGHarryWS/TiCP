// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/job/job_fe_params.proto

package job

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobFEParams_Get_FullMethodName = "/job.JobFEParams/Get"
	JobFEParams_Set_FullMethodName = "/job.JobFEParams/Set"
)

// JobFEParamsClient is the client API for JobFEParams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobFEParamsClient interface {
	Get(ctx context.Context, in *GetJobFEParamsRequest, opts ...grpc.CallOption) (*GetJobFEParamsReply, error)
	Set(ctx context.Context, in *SetJobFEParamsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type jobFEParamsClient struct {
	cc grpc.ClientConnInterface
}

func NewJobFEParamsClient(cc grpc.ClientConnInterface) JobFEParamsClient {
	return &jobFEParamsClient{cc}
}

func (c *jobFEParamsClient) Get(ctx context.Context, in *GetJobFEParamsRequest, opts ...grpc.CallOption) (*GetJobFEParamsReply, error) {
	out := new(GetJobFEParamsReply)
	err := c.cc.Invoke(ctx, JobFEParams_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobFEParamsClient) Set(ctx context.Context, in *SetJobFEParamsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JobFEParams_Set_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobFEParamsServer is the server API for JobFEParams service.
// All implementations must embed UnimplementedJobFEParamsServer
// for forward compatibility
type JobFEParamsServer interface {
	Get(context.Context, *GetJobFEParamsRequest) (*GetJobFEParamsReply, error)
	Set(context.Context, *SetJobFEParamsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedJobFEParamsServer()
}

// UnimplementedJobFEParamsServer must be embedded to have forward compatible implementations.
type UnimplementedJobFEParamsServer struct {
}

func (UnimplementedJobFEParamsServer) Get(context.Context, *GetJobFEParamsRequest) (*GetJobFEParamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedJobFEParamsServer) Set(context.Context, *SetJobFEParamsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedJobFEParamsServer) mustEmbedUnimplementedJobFEParamsServer() {}

// UnsafeJobFEParamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobFEParamsServer will
// result in compilation errors.
type UnsafeJobFEParamsServer interface {
	mustEmbedUnimplementedJobFEParamsServer()
}

func RegisterJobFEParamsServer(s grpc.ServiceRegistrar, srv JobFEParamsServer) {
	s.RegisterService(&JobFEParams_ServiceDesc, srv)
}

func _JobFEParams_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobFEParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobFEParamsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobFEParams_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobFEParamsServer).Get(ctx, req.(*GetJobFEParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobFEParams_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobFEParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobFEParamsServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobFEParams_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobFEParamsServer).Set(ctx, req.(*SetJobFEParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobFEParams_ServiceDesc is the grpc.ServiceDesc for JobFEParams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobFEParams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.JobFEParams",
	HandlerType: (*JobFEParamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _JobFEParams_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _JobFEParams_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job/job_fe_params.proto",
}
