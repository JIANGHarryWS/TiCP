// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/job/job.proto

package job

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobManagement_GetJob_FullMethodName                       = "/job.JobManagement/GetJob"
	JobManagement_GetJobByRuntime_FullMethodName              = "/job.JobManagement/GetJobByRuntime"
	JobManagement_GetSCJobs_FullMethodName                    = "/job.JobManagement/GetSCJobs"
	JobManagement_CreateJobWithSchedule_FullMethodName        = "/job.JobManagement/CreateJobWithSchedule"
	JobManagement_CreateJobWithScheduleV2_FullMethodName      = "/job.JobManagement/CreateJobWithScheduleV2"
	JobManagement_SetJobFileReady_FullMethodName              = "/job.JobManagement/SetJobFileReady"
	JobManagement_GetSubmittingJobs_FullMethodName            = "/job.JobManagement/GetSubmittingJobs"
	JobManagement_SetJobSubmitted_FullMethodName              = "/job.JobManagement/SetJobSubmitted"
	JobManagement_UpdateSCScheduledJob_FullMethodName         = "/job.JobManagement/UpdateSCScheduledJob"
	JobManagement_GetJobList_FullMethodName                   = "/job.JobManagement/GetJobList"
	JobManagement_GetJobFilter_FullMethodName                 = "/job.JobManagement/GetJobFilter"
	JobManagement_CancelJobs_FullMethodName                   = "/job.JobManagement/CancelJobs"
	JobManagement_CancelJob_FullMethodName                    = "/job.JobManagement/CancelJob"
	JobManagement_DeleteJobs_FullMethodName                   = "/job.JobManagement/DeleteJobs"
	JobManagement_GetJobRuntimeList_FullMethodName            = "/job.JobManagement/GetJobRuntimeList"
	JobManagement_SystemTerminalJob_FullMethodName            = "/job.JobManagement/SystemTerminalJob"
	JobManagement_GetJobRuntimeToArchive_FullMethodName       = "/job.JobManagement/GetJobRuntimeToArchive"
	JobManagement_SetJobRuntimeArchived_FullMethodName        = "/job.JobManagement/SetJobRuntimeArchived"
	JobManagement_GetJobEventLog_FullMethodName               = "/job.JobManagement/GetJobEventLog"
	JobManagement_GetTotalNumberOfJobInProject_FullMethodName = "/job.JobManagement/GetTotalNumberOfJobInProject"
	JobManagement_GetTotalCPUTimeInProject_FullMethodName     = "/job.JobManagement/GetTotalCPUTimeInProject"
	JobManagement_CreateJobBill_FullMethodName                = "/job.JobManagement/CreateJobBill"
	JobManagement_CancelJobBill_FullMethodName                = "/job.JobManagement/CancelJobBill"
	JobManagement_SyncJobToMonitor_FullMethodName             = "/job.JobManagement/SyncJobToMonitor"
	JobManagement_StatJobSubmitParams_FullMethodName          = "/job.JobManagement/StatJobSubmitParams"
	JobManagement_UpdateMonitorChart_FullMethodName           = "/job.JobManagement/UpdateMonitorChart"
	JobManagement_GetMonitorChart_FullMethodName              = "/job.JobManagement/GetMonitorChart"
	JobManagement_UpdateMonitorLog_FullMethodName             = "/job.JobManagement/UpdateMonitorLog"
	JobManagement_GetJobIDsByJobRuntimeIDs_FullMethodName     = "/job.JobManagement/GetJobIDsByJobRuntimeIDs"
	JobManagement_GetJobInfoByJobIDs_FullMethodName           = "/job.JobManagement/GetJobInfoByJobIDs"
	JobManagement_CreateJobWithSolution_FullMethodName        = "/job.JobManagement/CreateJobWithSolution"
	JobManagement_ListSolutions_FullMethodName                = "/job.JobManagement/ListSolutions"
)

// JobManagementClient is the client API for JobManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobManagementClient interface {
	// Get one job information
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobReply, error)
	GetJobByRuntime(ctx context.Context, in *GetJobByRuntimeRequest, opts ...grpc.CallOption) (*GetJobByRuntimeReply, error)
	// TODO: workflow api
	GetSCJobs(ctx context.Context, in *GetSCJobsRequest, opts ...grpc.CallOption) (*GetSCJobsReply, error)
	CreateJobWithSchedule(ctx context.Context, in *CreateJobWithScheduleRequest, opts ...grpc.CallOption) (*CreateJobWithScheduleReply, error)
	CreateJobWithScheduleV2(ctx context.Context, in *CreateJobWithScheduleV2Request, opts ...grpc.CallOption) (*CreateJobWithScheduleV2Reply, error)
	SetJobFileReady(ctx context.Context, in *SetJobFileReadyRequest, opts ...grpc.CallOption) (*SetJobFileReadyReply, error)
	GetSubmittingJobs(ctx context.Context, in *GetSubmittingJobsRequest, opts ...grpc.CallOption) (*GetSubmittingJobsReply, error)
	SetJobSubmitted(ctx context.Context, in *SetJobSubmittedRequest, opts ...grpc.CallOption) (*SetJobSubmittedReply, error)
	UpdateSCScheduledJob(ctx context.Context, in *UpdateSCScheduledJobRequest, opts ...grpc.CallOption) (*UpdateSCScheduledJobReply, error)
	// Get the job list by specified parameters
	GetJobList(ctx context.Context, in *GetJobListRequest, opts ...grpc.CallOption) (*GetJobListReply, error)
	// Get the job filters: app_name, state, resource_usage_cpus
	GetJobFilter(ctx context.Context, in *GetJobFilterRequest, opts ...grpc.CallOption) (*GetJobFilterReply, error)
	// Cancel selected job(s)
	CancelJobs(ctx context.Context, in *CancelJobsRequest, opts ...grpc.CallOption) (*CancelJobsReply, error)
	CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobReply, error)
	// Delete selected job(s)
	DeleteJobs(ctx context.Context, in *DeleteJobsRequest, opts ...grpc.CallOption) (*DeleteJobsReply, error)
	// GetJobRuntime gets the job runtime(s) of one job or more jobs
	GetJobRuntimeList(ctx context.Context, in *GetJobRuntimeListRequest, opts ...grpc.CallOption) (*GetJobRuntimeListReply, error)
	SystemTerminalJob(ctx context.Context, in *SystemTerminalJobRequest, opts ...grpc.CallOption) (*SystemTerminalJobReply, error)
	GetJobRuntimeToArchive(ctx context.Context, in *GetJobRuntimeToArchiveRequest, opts ...grpc.CallOption) (*GetJobRuntimeToArchiveReply, error)
	SetJobRuntimeArchived(ctx context.Context, in *SetJobRuntimeArchivedRequest, opts ...grpc.CallOption) (*SetJobRuntimeArchivedReply, error)
	// Get the event log for job
	GetJobEventLog(ctx context.Context, in *GetJobEventLogRequest, opts ...grpc.CallOption) (*GetJobEventLogReply, error)
	// Get the total number job & completed job in project
	GetTotalNumberOfJobInProject(ctx context.Context, in *GetTotalNumberOfJobInProjectRequest, opts ...grpc.CallOption) (*GetTotalNumberOfJobInProjectResponse, error)
	// Get total number of job cpu time within a project
	GetTotalCPUTimeInProject(ctx context.Context, in *GetTotalCPUTimeInProjectRequest, opts ...grpc.CallOption) (*GetTotalCPUTimeInProjectResponse, error)
	// Create bill for completed job
	CreateJobBill(ctx context.Context, in *CreateJobBillRequest, opts ...grpc.CallOption) (*CreateJobBillReply, error)
	// Create bill for completed job
	CancelJobBill(ctx context.Context, in *CreateJobBillRequest, opts ...grpc.CallOption) (*CreateJobBillReply, error)
	SyncJobToMonitor(ctx context.Context, in *Job, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StatJobSubmitParams(ctx context.Context, in *StatJobSubmitParamsRequest, opts ...grpc.CallOption) (*StatJobSubmitParamsResponse, error)
	UpdateMonitorChart(ctx context.Context, in *UpdateMonitorChartRequest, opts ...grpc.CallOption) (*UpdateMonitorChartResponse, error)
	GetMonitorChart(ctx context.Context, in *GetMonitorChartRequest, opts ...grpc.CallOption) (*GetMonitorChartResponse, error)
	// 更新作业实时日志
	UpdateMonitorLog(ctx context.Context, in *UpdateMonitorLogRequest, opts ...grpc.CallOption) (*UpdateMonitorLogResponse, error)
	GetJobIDsByJobRuntimeIDs(ctx context.Context, in *JobRuntimeIDsRequest, opts ...grpc.CallOption) (*JobRuntimeIDsResponse, error)
	// 批量获取作业信息 by job_ids
	GetJobInfoByJobIDs(ctx context.Context, in *GetJobInfoByJobIDsRequest, opts ...grpc.CallOption) (*GetJobInfoByJobIDsResult, error)
	// 根据解决方案提交作业
	CreateJobWithSolution(ctx context.Context, in *CreateJobWithSolutionRequest, opts ...grpc.CallOption) (*CreateJobWithSolutionReply, error)
	// 解决方案列表，包括超算ID和licenseID的绑定信息
	ListSolutions(ctx context.Context, in *ListSolutionsRequest, opts ...grpc.CallOption) (*ListSolutionsResponse, error)
}

type jobManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewJobManagementClient(cc grpc.ClientConnInterface) JobManagementClient {
	return &jobManagementClient{cc}
}

func (c *jobManagementClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*GetJobReply, error) {
	out := new(GetJobReply)
	err := c.cc.Invoke(ctx, JobManagement_GetJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobByRuntime(ctx context.Context, in *GetJobByRuntimeRequest, opts ...grpc.CallOption) (*GetJobByRuntimeReply, error) {
	out := new(GetJobByRuntimeReply)
	err := c.cc.Invoke(ctx, JobManagement_GetJobByRuntime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetSCJobs(ctx context.Context, in *GetSCJobsRequest, opts ...grpc.CallOption) (*GetSCJobsReply, error) {
	out := new(GetSCJobsReply)
	err := c.cc.Invoke(ctx, JobManagement_GetSCJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) CreateJobWithSchedule(ctx context.Context, in *CreateJobWithScheduleRequest, opts ...grpc.CallOption) (*CreateJobWithScheduleReply, error) {
	out := new(CreateJobWithScheduleReply)
	err := c.cc.Invoke(ctx, JobManagement_CreateJobWithSchedule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) CreateJobWithScheduleV2(ctx context.Context, in *CreateJobWithScheduleV2Request, opts ...grpc.CallOption) (*CreateJobWithScheduleV2Reply, error) {
	out := new(CreateJobWithScheduleV2Reply)
	err := c.cc.Invoke(ctx, JobManagement_CreateJobWithScheduleV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) SetJobFileReady(ctx context.Context, in *SetJobFileReadyRequest, opts ...grpc.CallOption) (*SetJobFileReadyReply, error) {
	out := new(SetJobFileReadyReply)
	err := c.cc.Invoke(ctx, JobManagement_SetJobFileReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetSubmittingJobs(ctx context.Context, in *GetSubmittingJobsRequest, opts ...grpc.CallOption) (*GetSubmittingJobsReply, error) {
	out := new(GetSubmittingJobsReply)
	err := c.cc.Invoke(ctx, JobManagement_GetSubmittingJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) SetJobSubmitted(ctx context.Context, in *SetJobSubmittedRequest, opts ...grpc.CallOption) (*SetJobSubmittedReply, error) {
	out := new(SetJobSubmittedReply)
	err := c.cc.Invoke(ctx, JobManagement_SetJobSubmitted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) UpdateSCScheduledJob(ctx context.Context, in *UpdateSCScheduledJobRequest, opts ...grpc.CallOption) (*UpdateSCScheduledJobReply, error) {
	out := new(UpdateSCScheduledJobReply)
	err := c.cc.Invoke(ctx, JobManagement_UpdateSCScheduledJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobList(ctx context.Context, in *GetJobListRequest, opts ...grpc.CallOption) (*GetJobListReply, error) {
	out := new(GetJobListReply)
	err := c.cc.Invoke(ctx, JobManagement_GetJobList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobFilter(ctx context.Context, in *GetJobFilterRequest, opts ...grpc.CallOption) (*GetJobFilterReply, error) {
	out := new(GetJobFilterReply)
	err := c.cc.Invoke(ctx, JobManagement_GetJobFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) CancelJobs(ctx context.Context, in *CancelJobsRequest, opts ...grpc.CallOption) (*CancelJobsReply, error) {
	out := new(CancelJobsReply)
	err := c.cc.Invoke(ctx, JobManagement_CancelJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) CancelJob(ctx context.Context, in *CancelJobRequest, opts ...grpc.CallOption) (*CancelJobReply, error) {
	out := new(CancelJobReply)
	err := c.cc.Invoke(ctx, JobManagement_CancelJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) DeleteJobs(ctx context.Context, in *DeleteJobsRequest, opts ...grpc.CallOption) (*DeleteJobsReply, error) {
	out := new(DeleteJobsReply)
	err := c.cc.Invoke(ctx, JobManagement_DeleteJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobRuntimeList(ctx context.Context, in *GetJobRuntimeListRequest, opts ...grpc.CallOption) (*GetJobRuntimeListReply, error) {
	out := new(GetJobRuntimeListReply)
	err := c.cc.Invoke(ctx, JobManagement_GetJobRuntimeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) SystemTerminalJob(ctx context.Context, in *SystemTerminalJobRequest, opts ...grpc.CallOption) (*SystemTerminalJobReply, error) {
	out := new(SystemTerminalJobReply)
	err := c.cc.Invoke(ctx, JobManagement_SystemTerminalJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobRuntimeToArchive(ctx context.Context, in *GetJobRuntimeToArchiveRequest, opts ...grpc.CallOption) (*GetJobRuntimeToArchiveReply, error) {
	out := new(GetJobRuntimeToArchiveReply)
	err := c.cc.Invoke(ctx, JobManagement_GetJobRuntimeToArchive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) SetJobRuntimeArchived(ctx context.Context, in *SetJobRuntimeArchivedRequest, opts ...grpc.CallOption) (*SetJobRuntimeArchivedReply, error) {
	out := new(SetJobRuntimeArchivedReply)
	err := c.cc.Invoke(ctx, JobManagement_SetJobRuntimeArchived_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobEventLog(ctx context.Context, in *GetJobEventLogRequest, opts ...grpc.CallOption) (*GetJobEventLogReply, error) {
	out := new(GetJobEventLogReply)
	err := c.cc.Invoke(ctx, JobManagement_GetJobEventLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetTotalNumberOfJobInProject(ctx context.Context, in *GetTotalNumberOfJobInProjectRequest, opts ...grpc.CallOption) (*GetTotalNumberOfJobInProjectResponse, error) {
	out := new(GetTotalNumberOfJobInProjectResponse)
	err := c.cc.Invoke(ctx, JobManagement_GetTotalNumberOfJobInProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetTotalCPUTimeInProject(ctx context.Context, in *GetTotalCPUTimeInProjectRequest, opts ...grpc.CallOption) (*GetTotalCPUTimeInProjectResponse, error) {
	out := new(GetTotalCPUTimeInProjectResponse)
	err := c.cc.Invoke(ctx, JobManagement_GetTotalCPUTimeInProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) CreateJobBill(ctx context.Context, in *CreateJobBillRequest, opts ...grpc.CallOption) (*CreateJobBillReply, error) {
	out := new(CreateJobBillReply)
	err := c.cc.Invoke(ctx, JobManagement_CreateJobBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) CancelJobBill(ctx context.Context, in *CreateJobBillRequest, opts ...grpc.CallOption) (*CreateJobBillReply, error) {
	out := new(CreateJobBillReply)
	err := c.cc.Invoke(ctx, JobManagement_CancelJobBill_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) SyncJobToMonitor(ctx context.Context, in *Job, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JobManagement_SyncJobToMonitor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) StatJobSubmitParams(ctx context.Context, in *StatJobSubmitParamsRequest, opts ...grpc.CallOption) (*StatJobSubmitParamsResponse, error) {
	out := new(StatJobSubmitParamsResponse)
	err := c.cc.Invoke(ctx, JobManagement_StatJobSubmitParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) UpdateMonitorChart(ctx context.Context, in *UpdateMonitorChartRequest, opts ...grpc.CallOption) (*UpdateMonitorChartResponse, error) {
	out := new(UpdateMonitorChartResponse)
	err := c.cc.Invoke(ctx, JobManagement_UpdateMonitorChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetMonitorChart(ctx context.Context, in *GetMonitorChartRequest, opts ...grpc.CallOption) (*GetMonitorChartResponse, error) {
	out := new(GetMonitorChartResponse)
	err := c.cc.Invoke(ctx, JobManagement_GetMonitorChart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) UpdateMonitorLog(ctx context.Context, in *UpdateMonitorLogRequest, opts ...grpc.CallOption) (*UpdateMonitorLogResponse, error) {
	out := new(UpdateMonitorLogResponse)
	err := c.cc.Invoke(ctx, JobManagement_UpdateMonitorLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobIDsByJobRuntimeIDs(ctx context.Context, in *JobRuntimeIDsRequest, opts ...grpc.CallOption) (*JobRuntimeIDsResponse, error) {
	out := new(JobRuntimeIDsResponse)
	err := c.cc.Invoke(ctx, JobManagement_GetJobIDsByJobRuntimeIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) GetJobInfoByJobIDs(ctx context.Context, in *GetJobInfoByJobIDsRequest, opts ...grpc.CallOption) (*GetJobInfoByJobIDsResult, error) {
	out := new(GetJobInfoByJobIDsResult)
	err := c.cc.Invoke(ctx, JobManagement_GetJobInfoByJobIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) CreateJobWithSolution(ctx context.Context, in *CreateJobWithSolutionRequest, opts ...grpc.CallOption) (*CreateJobWithSolutionReply, error) {
	out := new(CreateJobWithSolutionReply)
	err := c.cc.Invoke(ctx, JobManagement_CreateJobWithSolution_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobManagementClient) ListSolutions(ctx context.Context, in *ListSolutionsRequest, opts ...grpc.CallOption) (*ListSolutionsResponse, error) {
	out := new(ListSolutionsResponse)
	err := c.cc.Invoke(ctx, JobManagement_ListSolutions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobManagementServer is the server API for JobManagement service.
// All implementations must embed UnimplementedJobManagementServer
// for forward compatibility
type JobManagementServer interface {
	// Get one job information
	GetJob(context.Context, *GetJobRequest) (*GetJobReply, error)
	GetJobByRuntime(context.Context, *GetJobByRuntimeRequest) (*GetJobByRuntimeReply, error)
	// TODO: workflow api
	GetSCJobs(context.Context, *GetSCJobsRequest) (*GetSCJobsReply, error)
	CreateJobWithSchedule(context.Context, *CreateJobWithScheduleRequest) (*CreateJobWithScheduleReply, error)
	CreateJobWithScheduleV2(context.Context, *CreateJobWithScheduleV2Request) (*CreateJobWithScheduleV2Reply, error)
	SetJobFileReady(context.Context, *SetJobFileReadyRequest) (*SetJobFileReadyReply, error)
	GetSubmittingJobs(context.Context, *GetSubmittingJobsRequest) (*GetSubmittingJobsReply, error)
	SetJobSubmitted(context.Context, *SetJobSubmittedRequest) (*SetJobSubmittedReply, error)
	UpdateSCScheduledJob(context.Context, *UpdateSCScheduledJobRequest) (*UpdateSCScheduledJobReply, error)
	// Get the job list by specified parameters
	GetJobList(context.Context, *GetJobListRequest) (*GetJobListReply, error)
	// Get the job filters: app_name, state, resource_usage_cpus
	GetJobFilter(context.Context, *GetJobFilterRequest) (*GetJobFilterReply, error)
	// Cancel selected job(s)
	CancelJobs(context.Context, *CancelJobsRequest) (*CancelJobsReply, error)
	CancelJob(context.Context, *CancelJobRequest) (*CancelJobReply, error)
	// Delete selected job(s)
	DeleteJobs(context.Context, *DeleteJobsRequest) (*DeleteJobsReply, error)
	// GetJobRuntime gets the job runtime(s) of one job or more jobs
	GetJobRuntimeList(context.Context, *GetJobRuntimeListRequest) (*GetJobRuntimeListReply, error)
	SystemTerminalJob(context.Context, *SystemTerminalJobRequest) (*SystemTerminalJobReply, error)
	GetJobRuntimeToArchive(context.Context, *GetJobRuntimeToArchiveRequest) (*GetJobRuntimeToArchiveReply, error)
	SetJobRuntimeArchived(context.Context, *SetJobRuntimeArchivedRequest) (*SetJobRuntimeArchivedReply, error)
	// Get the event log for job
	GetJobEventLog(context.Context, *GetJobEventLogRequest) (*GetJobEventLogReply, error)
	// Get the total number job & completed job in project
	GetTotalNumberOfJobInProject(context.Context, *GetTotalNumberOfJobInProjectRequest) (*GetTotalNumberOfJobInProjectResponse, error)
	// Get total number of job cpu time within a project
	GetTotalCPUTimeInProject(context.Context, *GetTotalCPUTimeInProjectRequest) (*GetTotalCPUTimeInProjectResponse, error)
	// Create bill for completed job
	CreateJobBill(context.Context, *CreateJobBillRequest) (*CreateJobBillReply, error)
	// Create bill for completed job
	CancelJobBill(context.Context, *CreateJobBillRequest) (*CreateJobBillReply, error)
	SyncJobToMonitor(context.Context, *Job) (*emptypb.Empty, error)
	StatJobSubmitParams(context.Context, *StatJobSubmitParamsRequest) (*StatJobSubmitParamsResponse, error)
	UpdateMonitorChart(context.Context, *UpdateMonitorChartRequest) (*UpdateMonitorChartResponse, error)
	GetMonitorChart(context.Context, *GetMonitorChartRequest) (*GetMonitorChartResponse, error)
	// 更新作业实时日志
	UpdateMonitorLog(context.Context, *UpdateMonitorLogRequest) (*UpdateMonitorLogResponse, error)
	GetJobIDsByJobRuntimeIDs(context.Context, *JobRuntimeIDsRequest) (*JobRuntimeIDsResponse, error)
	// 批量获取作业信息 by job_ids
	GetJobInfoByJobIDs(context.Context, *GetJobInfoByJobIDsRequest) (*GetJobInfoByJobIDsResult, error)
	// 根据解决方案提交作业
	CreateJobWithSolution(context.Context, *CreateJobWithSolutionRequest) (*CreateJobWithSolutionReply, error)
	// 解决方案列表，包括超算ID和licenseID的绑定信息
	ListSolutions(context.Context, *ListSolutionsRequest) (*ListSolutionsResponse, error)
	mustEmbedUnimplementedJobManagementServer()
}

// UnimplementedJobManagementServer must be embedded to have forward compatible implementations.
type UnimplementedJobManagementServer struct {
}

func (UnimplementedJobManagementServer) GetJob(context.Context, *GetJobRequest) (*GetJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedJobManagementServer) GetJobByRuntime(context.Context, *GetJobByRuntimeRequest) (*GetJobByRuntimeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobByRuntime not implemented")
}
func (UnimplementedJobManagementServer) GetSCJobs(context.Context, *GetSCJobsRequest) (*GetSCJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSCJobs not implemented")
}
func (UnimplementedJobManagementServer) CreateJobWithSchedule(context.Context, *CreateJobWithScheduleRequest) (*CreateJobWithScheduleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobWithSchedule not implemented")
}
func (UnimplementedJobManagementServer) CreateJobWithScheduleV2(context.Context, *CreateJobWithScheduleV2Request) (*CreateJobWithScheduleV2Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobWithScheduleV2 not implemented")
}
func (UnimplementedJobManagementServer) SetJobFileReady(context.Context, *SetJobFileReadyRequest) (*SetJobFileReadyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobFileReady not implemented")
}
func (UnimplementedJobManagementServer) GetSubmittingJobs(context.Context, *GetSubmittingJobsRequest) (*GetSubmittingJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubmittingJobs not implemented")
}
func (UnimplementedJobManagementServer) SetJobSubmitted(context.Context, *SetJobSubmittedRequest) (*SetJobSubmittedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobSubmitted not implemented")
}
func (UnimplementedJobManagementServer) UpdateSCScheduledJob(context.Context, *UpdateSCScheduledJobRequest) (*UpdateSCScheduledJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSCScheduledJob not implemented")
}
func (UnimplementedJobManagementServer) GetJobList(context.Context, *GetJobListRequest) (*GetJobListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobList not implemented")
}
func (UnimplementedJobManagementServer) GetJobFilter(context.Context, *GetJobFilterRequest) (*GetJobFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobFilter not implemented")
}
func (UnimplementedJobManagementServer) CancelJobs(context.Context, *CancelJobsRequest) (*CancelJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJobs not implemented")
}
func (UnimplementedJobManagementServer) CancelJob(context.Context, *CancelJobRequest) (*CancelJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJob not implemented")
}
func (UnimplementedJobManagementServer) DeleteJobs(context.Context, *DeleteJobsRequest) (*DeleteJobsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobs not implemented")
}
func (UnimplementedJobManagementServer) GetJobRuntimeList(context.Context, *GetJobRuntimeListRequest) (*GetJobRuntimeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobRuntimeList not implemented")
}
func (UnimplementedJobManagementServer) SystemTerminalJob(context.Context, *SystemTerminalJobRequest) (*SystemTerminalJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemTerminalJob not implemented")
}
func (UnimplementedJobManagementServer) GetJobRuntimeToArchive(context.Context, *GetJobRuntimeToArchiveRequest) (*GetJobRuntimeToArchiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobRuntimeToArchive not implemented")
}
func (UnimplementedJobManagementServer) SetJobRuntimeArchived(context.Context, *SetJobRuntimeArchivedRequest) (*SetJobRuntimeArchivedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobRuntimeArchived not implemented")
}
func (UnimplementedJobManagementServer) GetJobEventLog(context.Context, *GetJobEventLogRequest) (*GetJobEventLogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobEventLog not implemented")
}
func (UnimplementedJobManagementServer) GetTotalNumberOfJobInProject(context.Context, *GetTotalNumberOfJobInProjectRequest) (*GetTotalNumberOfJobInProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalNumberOfJobInProject not implemented")
}
func (UnimplementedJobManagementServer) GetTotalCPUTimeInProject(context.Context, *GetTotalCPUTimeInProjectRequest) (*GetTotalCPUTimeInProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalCPUTimeInProject not implemented")
}
func (UnimplementedJobManagementServer) CreateJobBill(context.Context, *CreateJobBillRequest) (*CreateJobBillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobBill not implemented")
}
func (UnimplementedJobManagementServer) CancelJobBill(context.Context, *CreateJobBillRequest) (*CreateJobBillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJobBill not implemented")
}
func (UnimplementedJobManagementServer) SyncJobToMonitor(context.Context, *Job) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncJobToMonitor not implemented")
}
func (UnimplementedJobManagementServer) StatJobSubmitParams(context.Context, *StatJobSubmitParamsRequest) (*StatJobSubmitParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatJobSubmitParams not implemented")
}
func (UnimplementedJobManagementServer) UpdateMonitorChart(context.Context, *UpdateMonitorChartRequest) (*UpdateMonitorChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorChart not implemented")
}
func (UnimplementedJobManagementServer) GetMonitorChart(context.Context, *GetMonitorChartRequest) (*GetMonitorChartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMonitorChart not implemented")
}
func (UnimplementedJobManagementServer) UpdateMonitorLog(context.Context, *UpdateMonitorLogRequest) (*UpdateMonitorLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMonitorLog not implemented")
}
func (UnimplementedJobManagementServer) GetJobIDsByJobRuntimeIDs(context.Context, *JobRuntimeIDsRequest) (*JobRuntimeIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobIDsByJobRuntimeIDs not implemented")
}
func (UnimplementedJobManagementServer) GetJobInfoByJobIDs(context.Context, *GetJobInfoByJobIDsRequest) (*GetJobInfoByJobIDsResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobInfoByJobIDs not implemented")
}
func (UnimplementedJobManagementServer) CreateJobWithSolution(context.Context, *CreateJobWithSolutionRequest) (*CreateJobWithSolutionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobWithSolution not implemented")
}
func (UnimplementedJobManagementServer) ListSolutions(context.Context, *ListSolutionsRequest) (*ListSolutionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSolutions not implemented")
}
func (UnimplementedJobManagementServer) mustEmbedUnimplementedJobManagementServer() {}

// UnsafeJobManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobManagementServer will
// result in compilation errors.
type UnsafeJobManagementServer interface {
	mustEmbedUnimplementedJobManagementServer()
}

func RegisterJobManagementServer(s grpc.ServiceRegistrar, srv JobManagementServer) {
	s.RegisterService(&JobManagement_ServiceDesc, srv)
}

func _JobManagement_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobByRuntime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobByRuntimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobByRuntime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetJobByRuntime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobByRuntime(ctx, req.(*GetJobByRuntimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetSCJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSCJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetSCJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetSCJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetSCJobs(ctx, req.(*GetSCJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_CreateJobWithSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobWithScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).CreateJobWithSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_CreateJobWithSchedule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).CreateJobWithSchedule(ctx, req.(*CreateJobWithScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_CreateJobWithScheduleV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobWithScheduleV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).CreateJobWithScheduleV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_CreateJobWithScheduleV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).CreateJobWithScheduleV2(ctx, req.(*CreateJobWithScheduleV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_SetJobFileReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobFileReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).SetJobFileReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_SetJobFileReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).SetJobFileReady(ctx, req.(*SetJobFileReadyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetSubmittingJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubmittingJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetSubmittingJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetSubmittingJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetSubmittingJobs(ctx, req.(*GetSubmittingJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_SetJobSubmitted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobSubmittedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).SetJobSubmitted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_SetJobSubmitted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).SetJobSubmitted(ctx, req.(*SetJobSubmittedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_UpdateSCScheduledJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSCScheduledJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).UpdateSCScheduledJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_UpdateSCScheduledJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).UpdateSCScheduledJob(ctx, req.(*UpdateSCScheduledJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetJobList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobList(ctx, req.(*GetJobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetJobFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobFilter(ctx, req.(*GetJobFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_CancelJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).CancelJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_CancelJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).CancelJobs(ctx, req.(*CancelJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_CancelJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).CancelJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_CancelJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).CancelJob(ctx, req.(*CancelJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_DeleteJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).DeleteJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_DeleteJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).DeleteJobs(ctx, req.(*DeleteJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobRuntimeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRuntimeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobRuntimeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetJobRuntimeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobRuntimeList(ctx, req.(*GetJobRuntimeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_SystemTerminalJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemTerminalJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).SystemTerminalJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_SystemTerminalJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).SystemTerminalJob(ctx, req.(*SystemTerminalJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobRuntimeToArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRuntimeToArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobRuntimeToArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetJobRuntimeToArchive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobRuntimeToArchive(ctx, req.(*GetJobRuntimeToArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_SetJobRuntimeArchived_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobRuntimeArchivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).SetJobRuntimeArchived(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_SetJobRuntimeArchived_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).SetJobRuntimeArchived(ctx, req.(*SetJobRuntimeArchivedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobEventLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobEventLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobEventLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetJobEventLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobEventLog(ctx, req.(*GetJobEventLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetTotalNumberOfJobInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalNumberOfJobInProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetTotalNumberOfJobInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetTotalNumberOfJobInProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetTotalNumberOfJobInProject(ctx, req.(*GetTotalNumberOfJobInProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetTotalCPUTimeInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalCPUTimeInProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetTotalCPUTimeInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetTotalCPUTimeInProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetTotalCPUTimeInProject(ctx, req.(*GetTotalCPUTimeInProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_CreateJobBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).CreateJobBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_CreateJobBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).CreateJobBill(ctx, req.(*CreateJobBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_CancelJobBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).CancelJobBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_CancelJobBill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).CancelJobBill(ctx, req.(*CreateJobBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_SyncJobToMonitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).SyncJobToMonitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_SyncJobToMonitor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).SyncJobToMonitor(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_StatJobSubmitParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatJobSubmitParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).StatJobSubmitParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_StatJobSubmitParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).StatJobSubmitParams(ctx, req.(*StatJobSubmitParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_UpdateMonitorChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).UpdateMonitorChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_UpdateMonitorChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).UpdateMonitorChart(ctx, req.(*UpdateMonitorChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetMonitorChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMonitorChartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetMonitorChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetMonitorChart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetMonitorChart(ctx, req.(*GetMonitorChartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_UpdateMonitorLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMonitorLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).UpdateMonitorLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_UpdateMonitorLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).UpdateMonitorLog(ctx, req.(*UpdateMonitorLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobIDsByJobRuntimeIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobRuntimeIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobIDsByJobRuntimeIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetJobIDsByJobRuntimeIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobIDsByJobRuntimeIDs(ctx, req.(*JobRuntimeIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_GetJobInfoByJobIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobInfoByJobIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).GetJobInfoByJobIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_GetJobInfoByJobIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).GetJobInfoByJobIDs(ctx, req.(*GetJobInfoByJobIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_CreateJobWithSolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobWithSolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).CreateJobWithSolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_CreateJobWithSolution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).CreateJobWithSolution(ctx, req.(*CreateJobWithSolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobManagement_ListSolutions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSolutionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobManagementServer).ListSolutions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobManagement_ListSolutions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobManagementServer).ListSolutions(ctx, req.(*ListSolutionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobManagement_ServiceDesc is the grpc.ServiceDesc for JobManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.JobManagement",
	HandlerType: (*JobManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _JobManagement_GetJob_Handler,
		},
		{
			MethodName: "GetJobByRuntime",
			Handler:    _JobManagement_GetJobByRuntime_Handler,
		},
		{
			MethodName: "GetSCJobs",
			Handler:    _JobManagement_GetSCJobs_Handler,
		},
		{
			MethodName: "CreateJobWithSchedule",
			Handler:    _JobManagement_CreateJobWithSchedule_Handler,
		},
		{
			MethodName: "CreateJobWithScheduleV2",
			Handler:    _JobManagement_CreateJobWithScheduleV2_Handler,
		},
		{
			MethodName: "SetJobFileReady",
			Handler:    _JobManagement_SetJobFileReady_Handler,
		},
		{
			MethodName: "GetSubmittingJobs",
			Handler:    _JobManagement_GetSubmittingJobs_Handler,
		},
		{
			MethodName: "SetJobSubmitted",
			Handler:    _JobManagement_SetJobSubmitted_Handler,
		},
		{
			MethodName: "UpdateSCScheduledJob",
			Handler:    _JobManagement_UpdateSCScheduledJob_Handler,
		},
		{
			MethodName: "GetJobList",
			Handler:    _JobManagement_GetJobList_Handler,
		},
		{
			MethodName: "GetJobFilter",
			Handler:    _JobManagement_GetJobFilter_Handler,
		},
		{
			MethodName: "CancelJobs",
			Handler:    _JobManagement_CancelJobs_Handler,
		},
		{
			MethodName: "CancelJob",
			Handler:    _JobManagement_CancelJob_Handler,
		},
		{
			MethodName: "DeleteJobs",
			Handler:    _JobManagement_DeleteJobs_Handler,
		},
		{
			MethodName: "GetJobRuntimeList",
			Handler:    _JobManagement_GetJobRuntimeList_Handler,
		},
		{
			MethodName: "SystemTerminalJob",
			Handler:    _JobManagement_SystemTerminalJob_Handler,
		},
		{
			MethodName: "GetJobRuntimeToArchive",
			Handler:    _JobManagement_GetJobRuntimeToArchive_Handler,
		},
		{
			MethodName: "SetJobRuntimeArchived",
			Handler:    _JobManagement_SetJobRuntimeArchived_Handler,
		},
		{
			MethodName: "GetJobEventLog",
			Handler:    _JobManagement_GetJobEventLog_Handler,
		},
		{
			MethodName: "GetTotalNumberOfJobInProject",
			Handler:    _JobManagement_GetTotalNumberOfJobInProject_Handler,
		},
		{
			MethodName: "GetTotalCPUTimeInProject",
			Handler:    _JobManagement_GetTotalCPUTimeInProject_Handler,
		},
		{
			MethodName: "CreateJobBill",
			Handler:    _JobManagement_CreateJobBill_Handler,
		},
		{
			MethodName: "CancelJobBill",
			Handler:    _JobManagement_CancelJobBill_Handler,
		},
		{
			MethodName: "SyncJobToMonitor",
			Handler:    _JobManagement_SyncJobToMonitor_Handler,
		},
		{
			MethodName: "StatJobSubmitParams",
			Handler:    _JobManagement_StatJobSubmitParams_Handler,
		},
		{
			MethodName: "UpdateMonitorChart",
			Handler:    _JobManagement_UpdateMonitorChart_Handler,
		},
		{
			MethodName: "GetMonitorChart",
			Handler:    _JobManagement_GetMonitorChart_Handler,
		},
		{
			MethodName: "UpdateMonitorLog",
			Handler:    _JobManagement_UpdateMonitorLog_Handler,
		},
		{
			MethodName: "GetJobIDsByJobRuntimeIDs",
			Handler:    _JobManagement_GetJobIDsByJobRuntimeIDs_Handler,
		},
		{
			MethodName: "GetJobInfoByJobIDs",
			Handler:    _JobManagement_GetJobInfoByJobIDs_Handler,
		},
		{
			MethodName: "CreateJobWithSolution",
			Handler:    _JobManagement_CreateJobWithSolution_Handler,
		},
		{
			MethodName: "ListSolutions",
			Handler:    _JobManagement_ListSolutions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job/job.proto",
}
