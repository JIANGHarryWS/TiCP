// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/job/scheduler_plugins.proto

package job

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SchedulerPluginsResourceGroup_GetResourceGroups_FullMethodName     = "/job.SchedulerPluginsResourceGroup/GetResourceGroups"
	SchedulerPluginsResourceGroup_SetResourceGroupCount_FullMethodName = "/job.SchedulerPluginsResourceGroup/SetResourceGroupCount"
)

// SchedulerPluginsResourceGroupClient is the client API for SchedulerPluginsResourceGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerPluginsResourceGroupClient interface {
	GetResourceGroups(ctx context.Context, in *GetResourceGroupsRequest, opts ...grpc.CallOption) (*GetResourceGroupsReply, error)
	SetResourceGroupCount(ctx context.Context, in *SetResourceGroupCountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type schedulerPluginsResourceGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerPluginsResourceGroupClient(cc grpc.ClientConnInterface) SchedulerPluginsResourceGroupClient {
	return &schedulerPluginsResourceGroupClient{cc}
}

func (c *schedulerPluginsResourceGroupClient) GetResourceGroups(ctx context.Context, in *GetResourceGroupsRequest, opts ...grpc.CallOption) (*GetResourceGroupsReply, error) {
	out := new(GetResourceGroupsReply)
	err := c.cc.Invoke(ctx, SchedulerPluginsResourceGroup_GetResourceGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerPluginsResourceGroupClient) SetResourceGroupCount(ctx context.Context, in *SetResourceGroupCountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SchedulerPluginsResourceGroup_SetResourceGroupCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerPluginsResourceGroupServer is the server API for SchedulerPluginsResourceGroup service.
// All implementations must embed UnimplementedSchedulerPluginsResourceGroupServer
// for forward compatibility
type SchedulerPluginsResourceGroupServer interface {
	GetResourceGroups(context.Context, *GetResourceGroupsRequest) (*GetResourceGroupsReply, error)
	SetResourceGroupCount(context.Context, *SetResourceGroupCountRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSchedulerPluginsResourceGroupServer()
}

// UnimplementedSchedulerPluginsResourceGroupServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerPluginsResourceGroupServer struct {
}

func (UnimplementedSchedulerPluginsResourceGroupServer) GetResourceGroups(context.Context, *GetResourceGroupsRequest) (*GetResourceGroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResourceGroups not implemented")
}
func (UnimplementedSchedulerPluginsResourceGroupServer) SetResourceGroupCount(context.Context, *SetResourceGroupCountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetResourceGroupCount not implemented")
}
func (UnimplementedSchedulerPluginsResourceGroupServer) mustEmbedUnimplementedSchedulerPluginsResourceGroupServer() {
}

// UnsafeSchedulerPluginsResourceGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerPluginsResourceGroupServer will
// result in compilation errors.
type UnsafeSchedulerPluginsResourceGroupServer interface {
	mustEmbedUnimplementedSchedulerPluginsResourceGroupServer()
}

func RegisterSchedulerPluginsResourceGroupServer(s grpc.ServiceRegistrar, srv SchedulerPluginsResourceGroupServer) {
	s.RegisterService(&SchedulerPluginsResourceGroup_ServiceDesc, srv)
}

func _SchedulerPluginsResourceGroup_GetResourceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerPluginsResourceGroupServer).GetResourceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerPluginsResourceGroup_GetResourceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerPluginsResourceGroupServer).GetResourceGroups(ctx, req.(*GetResourceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerPluginsResourceGroup_SetResourceGroupCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetResourceGroupCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerPluginsResourceGroupServer).SetResourceGroupCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchedulerPluginsResourceGroup_SetResourceGroupCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerPluginsResourceGroupServer).SetResourceGroupCount(ctx, req.(*SetResourceGroupCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulerPluginsResourceGroup_ServiceDesc is the grpc.ServiceDesc for SchedulerPluginsResourceGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerPluginsResourceGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.SchedulerPluginsResourceGroup",
	HandlerType: (*SchedulerPluginsResourceGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResourceGroups",
			Handler:    _SchedulerPluginsResourceGroup_GetResourceGroups_Handler,
		},
		{
			MethodName: "SetResourceGroupCount",
			Handler:    _SchedulerPluginsResourceGroup_SetResourceGroupCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job/scheduler_plugins.proto",
}
