// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/job/job_set.proto

package job

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	JobSetServer_GetJobSets_FullMethodName                      = "/job.JobSetServer/GetJobSets"
	JobSetServer_GetJobs_FullMethodName                         = "/job.JobSetServer/GetJobs"
	JobSetServer_GetJobSetCreator_FullMethodName                = "/job.JobSetServer/GetJobSetCreator"
	JobSetServer_CreateJobSet_FullMethodName                    = "/job.JobSetServer/CreateJobSet"
	JobSetServer_AddJob_FullMethodName                          = "/job.JobSetServer/AddJob"
	JobSetServer_DeleteJobSet_FullMethodName                    = "/job.JobSetServer/DeleteJobSet"
	JobSetServer_CancelJobSet_FullMethodName                    = "/job.JobSetServer/CancelJobSet"
	JobSetServer_OnEvent_FullMethodName                         = "/job.JobSetServer/OnEvent"
	JobSetServer_RemoveJobFromSet_FullMethodName                = "/job.JobSetServer/RemoveJobFromSet"
	JobSetServer_JobSetNameIsExists_FullMethodName              = "/job.JobSetServer/JobSetNameIsExists"
	JobSetServer_GetTotalNumberOfJobSetInProject_FullMethodName = "/job.JobSetServer/GetTotalNumberOfJobSetInProject"
)

// JobSetServerClient is the client API for JobSetServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobSetServerClient interface {
	GetJobSets(ctx context.Context, in *GetJobSetsRequest, opts ...grpc.CallOption) (*GetJobSetsResponse, error)
	GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error)
	GetJobSetCreator(ctx context.Context, in *GetJobSetCreatorRequest, opts ...grpc.CallOption) (*GetJobSetCreatorResponse, error)
	// 创建作业集
	CreateJobSet(ctx context.Context, in *CreateJobSetRequest, opts ...grpc.CallOption) (*JobSet, error)
	// 作业加入已存在作业集
	AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除作业集 (作业集内部状态 必须完成 2)
	DeleteJobSet(ctx context.Context, in *DeleteJobSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 取消作业集 (作业集内部状态 必须运行 1)
	CancelJobSet(ctx context.Context, in *CancelJobSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// JobID request
	OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveJobFromSet(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	JobSetNameIsExists(ctx context.Context, in *JobSetNameIsExistsRequest, opts ...grpc.CallOption) (*JobSetNameIsExistsResponse, error)
	// Get the total number job & completed job set in project
	GetTotalNumberOfJobSetInProject(ctx context.Context, in *GetTotalNumberOfJobSetInProjectRequest, opts ...grpc.CallOption) (*GetTotalNumberOfJobSetInProjectResponse, error)
}

type jobSetServerClient struct {
	cc grpc.ClientConnInterface
}

func NewJobSetServerClient(cc grpc.ClientConnInterface) JobSetServerClient {
	return &jobSetServerClient{cc}
}

func (c *jobSetServerClient) GetJobSets(ctx context.Context, in *GetJobSetsRequest, opts ...grpc.CallOption) (*GetJobSetsResponse, error) {
	out := new(GetJobSetsResponse)
	err := c.cc.Invoke(ctx, JobSetServer_GetJobSets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) GetJobs(ctx context.Context, in *GetJobsRequest, opts ...grpc.CallOption) (*GetJobsResponse, error) {
	out := new(GetJobsResponse)
	err := c.cc.Invoke(ctx, JobSetServer_GetJobs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) GetJobSetCreator(ctx context.Context, in *GetJobSetCreatorRequest, opts ...grpc.CallOption) (*GetJobSetCreatorResponse, error) {
	out := new(GetJobSetCreatorResponse)
	err := c.cc.Invoke(ctx, JobSetServer_GetJobSetCreator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) CreateJobSet(ctx context.Context, in *CreateJobSetRequest, opts ...grpc.CallOption) (*JobSet, error) {
	out := new(JobSet)
	err := c.cc.Invoke(ctx, JobSetServer_CreateJobSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) AddJob(ctx context.Context, in *AddJobRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JobSetServer_AddJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) DeleteJobSet(ctx context.Context, in *DeleteJobSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JobSetServer_DeleteJobSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) CancelJobSet(ctx context.Context, in *CancelJobSetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JobSetServer_CancelJobSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) OnEvent(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JobSetServer_OnEvent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) RemoveJobFromSet(ctx context.Context, in *OnEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, JobSetServer_RemoveJobFromSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) JobSetNameIsExists(ctx context.Context, in *JobSetNameIsExistsRequest, opts ...grpc.CallOption) (*JobSetNameIsExistsResponse, error) {
	out := new(JobSetNameIsExistsResponse)
	err := c.cc.Invoke(ctx, JobSetServer_JobSetNameIsExists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobSetServerClient) GetTotalNumberOfJobSetInProject(ctx context.Context, in *GetTotalNumberOfJobSetInProjectRequest, opts ...grpc.CallOption) (*GetTotalNumberOfJobSetInProjectResponse, error) {
	out := new(GetTotalNumberOfJobSetInProjectResponse)
	err := c.cc.Invoke(ctx, JobSetServer_GetTotalNumberOfJobSetInProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobSetServerServer is the server API for JobSetServer service.
// All implementations must embed UnimplementedJobSetServerServer
// for forward compatibility
type JobSetServerServer interface {
	GetJobSets(context.Context, *GetJobSetsRequest) (*GetJobSetsResponse, error)
	GetJobs(context.Context, *GetJobsRequest) (*GetJobsResponse, error)
	GetJobSetCreator(context.Context, *GetJobSetCreatorRequest) (*GetJobSetCreatorResponse, error)
	// 创建作业集
	CreateJobSet(context.Context, *CreateJobSetRequest) (*JobSet, error)
	// 作业加入已存在作业集
	AddJob(context.Context, *AddJobRequest) (*emptypb.Empty, error)
	// 删除作业集 (作业集内部状态 必须完成 2)
	DeleteJobSet(context.Context, *DeleteJobSetRequest) (*emptypb.Empty, error)
	// 取消作业集 (作业集内部状态 必须运行 1)
	CancelJobSet(context.Context, *CancelJobSetRequest) (*emptypb.Empty, error)
	// JobID request
	OnEvent(context.Context, *OnEventRequest) (*emptypb.Empty, error)
	RemoveJobFromSet(context.Context, *OnEventRequest) (*emptypb.Empty, error)
	JobSetNameIsExists(context.Context, *JobSetNameIsExistsRequest) (*JobSetNameIsExistsResponse, error)
	// Get the total number job & completed job set in project
	GetTotalNumberOfJobSetInProject(context.Context, *GetTotalNumberOfJobSetInProjectRequest) (*GetTotalNumberOfJobSetInProjectResponse, error)
	mustEmbedUnimplementedJobSetServerServer()
}

// UnimplementedJobSetServerServer must be embedded to have forward compatible implementations.
type UnimplementedJobSetServerServer struct {
}

func (UnimplementedJobSetServerServer) GetJobSets(context.Context, *GetJobSetsRequest) (*GetJobSetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobSets not implemented")
}
func (UnimplementedJobSetServerServer) GetJobs(context.Context, *GetJobsRequest) (*GetJobsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobs not implemented")
}
func (UnimplementedJobSetServerServer) GetJobSetCreator(context.Context, *GetJobSetCreatorRequest) (*GetJobSetCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobSetCreator not implemented")
}
func (UnimplementedJobSetServerServer) CreateJobSet(context.Context, *CreateJobSetRequest) (*JobSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJobSet not implemented")
}
func (UnimplementedJobSetServerServer) AddJob(context.Context, *AddJobRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJob not implemented")
}
func (UnimplementedJobSetServerServer) DeleteJobSet(context.Context, *DeleteJobSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobSet not implemented")
}
func (UnimplementedJobSetServerServer) CancelJobSet(context.Context, *CancelJobSetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelJobSet not implemented")
}
func (UnimplementedJobSetServerServer) OnEvent(context.Context, *OnEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnEvent not implemented")
}
func (UnimplementedJobSetServerServer) RemoveJobFromSet(context.Context, *OnEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJobFromSet not implemented")
}
func (UnimplementedJobSetServerServer) JobSetNameIsExists(context.Context, *JobSetNameIsExistsRequest) (*JobSetNameIsExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JobSetNameIsExists not implemented")
}
func (UnimplementedJobSetServerServer) GetTotalNumberOfJobSetInProject(context.Context, *GetTotalNumberOfJobSetInProjectRequest) (*GetTotalNumberOfJobSetInProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalNumberOfJobSetInProject not implemented")
}
func (UnimplementedJobSetServerServer) mustEmbedUnimplementedJobSetServerServer() {}

// UnsafeJobSetServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobSetServerServer will
// result in compilation errors.
type UnsafeJobSetServerServer interface {
	mustEmbedUnimplementedJobSetServerServer()
}

func RegisterJobSetServerServer(s grpc.ServiceRegistrar, srv JobSetServerServer) {
	s.RegisterService(&JobSetServer_ServiceDesc, srv)
}

func _JobSetServer_GetJobSets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobSetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).GetJobSets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_GetJobSets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).GetJobSets(ctx, req.(*GetJobSetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_GetJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).GetJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_GetJobs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).GetJobs(ctx, req.(*GetJobsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_GetJobSetCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobSetCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).GetJobSetCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_GetJobSetCreator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).GetJobSetCreator(ctx, req.(*GetJobSetCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_CreateJobSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).CreateJobSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_CreateJobSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).CreateJobSet(ctx, req.(*CreateJobSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_AddJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).AddJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_AddJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).AddJob(ctx, req.(*AddJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_DeleteJobSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).DeleteJobSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_DeleteJobSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).DeleteJobSet(ctx, req.(*DeleteJobSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_CancelJobSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelJobSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).CancelJobSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_CancelJobSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).CancelJobSet(ctx, req.(*CancelJobSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_OnEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).OnEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_OnEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).OnEvent(ctx, req.(*OnEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_RemoveJobFromSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).RemoveJobFromSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_RemoveJobFromSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).RemoveJobFromSet(ctx, req.(*OnEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_JobSetNameIsExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobSetNameIsExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).JobSetNameIsExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_JobSetNameIsExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).JobSetNameIsExists(ctx, req.(*JobSetNameIsExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobSetServer_GetTotalNumberOfJobSetInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalNumberOfJobSetInProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobSetServerServer).GetTotalNumberOfJobSetInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobSetServer_GetTotalNumberOfJobSetInProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobSetServerServer).GetTotalNumberOfJobSetInProject(ctx, req.(*GetTotalNumberOfJobSetInProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobSetServer_ServiceDesc is the grpc.ServiceDesc for JobSetServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobSetServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "job.JobSetServer",
	HandlerType: (*JobSetServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobSets",
			Handler:    _JobSetServer_GetJobSets_Handler,
		},
		{
			MethodName: "GetJobs",
			Handler:    _JobSetServer_GetJobs_Handler,
		},
		{
			MethodName: "GetJobSetCreator",
			Handler:    _JobSetServer_GetJobSetCreator_Handler,
		},
		{
			MethodName: "CreateJobSet",
			Handler:    _JobSetServer_CreateJobSet_Handler,
		},
		{
			MethodName: "AddJob",
			Handler:    _JobSetServer_AddJob_Handler,
		},
		{
			MethodName: "DeleteJobSet",
			Handler:    _JobSetServer_DeleteJobSet_Handler,
		},
		{
			MethodName: "CancelJobSet",
			Handler:    _JobSetServer_CancelJobSet_Handler,
		},
		{
			MethodName: "OnEvent",
			Handler:    _JobSetServer_OnEvent_Handler,
		},
		{
			MethodName: "RemoveJobFromSet",
			Handler:    _JobSetServer_RemoveJobFromSet_Handler,
		},
		{
			MethodName: "JobSetNameIsExists",
			Handler:    _JobSetServer_JobSetNameIsExists_Handler,
		},
		{
			MethodName: "GetTotalNumberOfJobSetInProject",
			Handler:    _JobSetServer_GetTotalNumberOfJobSetInProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/job/job_set.proto",
}
