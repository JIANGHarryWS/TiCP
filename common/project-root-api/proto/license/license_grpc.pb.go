// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/license/license.proto

package license

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LicenseManagerService_AcquireLicenses_FullMethodName = "/application.LicenseManagerService/AcquireLicenses"
	LicenseManagerService_ReleaseLicense_FullMethodName  = "/application.LicenseManagerService/ReleaseLicense"
)

// LicenseManagerServiceClient is the client API for LicenseManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LicenseManagerServiceClient interface {
	// 使用license
	AcquireLicenses(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error)
	// 结束使用license
	ReleaseLicense(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type licenseManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLicenseManagerServiceClient(cc grpc.ClientConnInterface) LicenseManagerServiceClient {
	return &licenseManagerServiceClient{cc}
}

func (c *licenseManagerServiceClient) AcquireLicenses(ctx context.Context, in *ConsumeRequest, opts ...grpc.CallOption) (*ConsumeResponse, error) {
	out := new(ConsumeResponse)
	err := c.cc.Invoke(ctx, LicenseManagerService_AcquireLicenses_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseManagerServiceClient) ReleaseLicense(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, LicenseManagerService_ReleaseLicense_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseManagerServiceServer is the server API for LicenseManagerService service.
// All implementations must embed UnimplementedLicenseManagerServiceServer
// for forward compatibility
type LicenseManagerServiceServer interface {
	// 使用license
	AcquireLicenses(context.Context, *ConsumeRequest) (*ConsumeResponse, error)
	// 结束使用license
	ReleaseLicense(context.Context, *ReleaseRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLicenseManagerServiceServer()
}

// UnimplementedLicenseManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLicenseManagerServiceServer struct {
}

func (UnimplementedLicenseManagerServiceServer) AcquireLicenses(context.Context, *ConsumeRequest) (*ConsumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLicenses not implemented")
}
func (UnimplementedLicenseManagerServiceServer) ReleaseLicense(context.Context, *ReleaseRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseLicense not implemented")
}
func (UnimplementedLicenseManagerServiceServer) mustEmbedUnimplementedLicenseManagerServiceServer() {}

// UnsafeLicenseManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LicenseManagerServiceServer will
// result in compilation errors.
type UnsafeLicenseManagerServiceServer interface {
	mustEmbedUnimplementedLicenseManagerServiceServer()
}

func RegisterLicenseManagerServiceServer(s grpc.ServiceRegistrar, srv LicenseManagerServiceServer) {
	s.RegisterService(&LicenseManagerService_ServiceDesc, srv)
}

func _LicenseManagerService_AcquireLicenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseManagerServiceServer).AcquireLicenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseManagerService_AcquireLicenses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseManagerServiceServer).AcquireLicenses(ctx, req.(*ConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LicenseManagerService_ReleaseLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseManagerServiceServer).ReleaseLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LicenseManagerService_ReleaseLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseManagerServiceServer).ReleaseLicense(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LicenseManagerService_ServiceDesc is the grpc.ServiceDesc for LicenseManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LicenseManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "application.LicenseManagerService",
	HandlerType: (*LicenseManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireLicenses",
			Handler:    _LicenseManagerService_AcquireLicenses_Handler,
		},
		{
			MethodName: "ReleaseLicense",
			Handler:    _LicenseManagerService_ReleaseLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/license/license.proto",
}
