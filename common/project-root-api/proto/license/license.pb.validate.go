// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/license/license.proto

package license

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ReleaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ReleaseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JobId

	return nil
}

// ReleaseRequestValidationError is the validation error returned by
// ReleaseRequest.Validate if the designated constraints aren't met.
type ReleaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReleaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReleaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReleaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReleaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReleaseRequestValidationError) ErrorName() string { return "ReleaseRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReleaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReleaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReleaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReleaseRequestValidationError{}

// Validate checks the field values on UsedRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UsedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ManagerId

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UsedRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UsedRequestValidationError is the validation error returned by
// UsedRequest.Validate if the designated constraints aren't met.
type UsedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsedRequestValidationError) ErrorName() string { return "UsedRequestValidationError" }

// Error satisfies the builtin error interface
func (e UsedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsedRequestValidationError{}

// Validate checks the field values on LicenseUsedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *LicenseUsedResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LicenseUsedResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LicenseUsedResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LicenseUsedResponseValidationError is the validation error returned by
// LicenseUsedResponse.Validate if the designated constraints aren't met.
type LicenseUsedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseUsedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseUsedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseUsedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseUsedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseUsedResponseValidationError) ErrorName() string {
	return "LicenseUsedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LicenseUsedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseUsedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseUsedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseUsedResponseValidationError{}

// Validate checks the field values on LicenseUsedResult with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LicenseUsedResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CompanyName

	// no validation rules for Licenses

	// no validation rules for JobId

	// no validation rules for JobName

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LicenseUsedResultValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppId

	return nil
}

// LicenseUsedResultValidationError is the validation error returned by
// LicenseUsedResult.Validate if the designated constraints aren't met.
type LicenseUsedResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseUsedResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseUsedResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseUsedResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseUsedResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseUsedResultValidationError) ErrorName() string {
	return "LicenseUsedResultValidationError"
}

// Error satisfies the builtin error interface
func (e LicenseUsedResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseUsedResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseUsedResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseUsedResultValidationError{}

// Validate checks the field values on ConsumeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ConsumeRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsumeRequestValidationError{
					field:  fmt.Sprintf("Info[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ConsumeRequestValidationError is the validation error returned by
// ConsumeRequest.Validate if the designated constraints aren't met.
type ConsumeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeRequestValidationError) ErrorName() string { return "ConsumeRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConsumeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeRequestValidationError{}

// Validate checks the field values on ConsumeInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ConsumeInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JobId

	// no validation rules for AppId

	// no validation rules for Cpus

	// no validation rules for LicManagerId

	// no validation rules for HpcEndpoint

	return nil
}

// ConsumeInfoValidationError is the validation error returned by
// ConsumeInfo.Validate if the designated constraints aren't met.
type ConsumeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeInfoValidationError) ErrorName() string { return "ConsumeInfoValidationError" }

// Error satisfies the builtin error interface
func (e ConsumeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeInfoValidationError{}

// Validate checks the field values on ConsumeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ConsumeResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConsumeResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ConsumeResponseValidationError is the validation error returned by
// ConsumeResponse.Validate if the designated constraints aren't met.
type ConsumeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeResponseValidationError) ErrorName() string { return "ConsumeResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConsumeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeResponseValidationError{}

// Validate checks the field values on ConsumeResult with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ConsumeResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JobId

	// no validation rules for ServerUrl

	// no validation rules for Status

	return nil
}

// ConsumeResultValidationError is the validation error returned by
// ConsumeResult.Validate if the designated constraints aren't met.
type ConsumeResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeResultValidationError) ErrorName() string { return "ConsumeResultValidationError" }

// Error satisfies the builtin error interface
func (e ConsumeResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeResultValidationError{}

// Validate checks the field values on Page with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Page) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Index

	// no validation rules for Size

	return nil
}

// PageValidationError is the validation error returned by Page.Validate if the
// designated constraints aren't met.
type PageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageValidationError) ErrorName() string { return "PageValidationError" }

// Error satisfies the builtin error interface
func (e PageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageValidationError{}

// Validate checks the field values on PageCtx with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PageCtx) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Index

	// no validation rules for Size

	// no validation rules for Total

	return nil
}

// PageCtxValidationError is the validation error returned by PageCtx.Validate
// if the designated constraints aren't met.
type PageCtxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PageCtxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PageCtxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PageCtxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PageCtxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PageCtxValidationError) ErrorName() string { return "PageCtxValidationError" }

// Error satisfies the builtin error interface
func (e PageCtxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPageCtx.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PageCtxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PageCtxValidationError{}
