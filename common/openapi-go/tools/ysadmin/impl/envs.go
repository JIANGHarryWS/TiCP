package impl

import (
	"fmt"
	"sort"

	"github.com/fatih/color"
	"github.com/spf13/cobra"
)

func init() {
	RegisterCmd(NewEnvCommand())
}

// NewEnvCommand ÂàõÂª∫ÁéØÂ¢ÉÁÆ°ÁêÜÂëΩ‰ª§
func NewEnvCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "envs",
		Short: "üéÑ ÁéØÂ¢ÉÁÆ°ÁêÜ",
		Long:  "üéÑ ÁéØÂ¢ÉÁÆ°ÁêÜ, Áî®‰∫éÊòæÁ§∫ÂíåÂàáÊç¢APIÁöÑÁéØÂ¢É, ÁéØÂ¢É‰ª•‰∏ÄÁªÑconfigÈÖçÁΩÆÊñá‰ª∂ÁöÑÂΩ¢ÂºèÂ≠òÂú®, ÈªòËÆ§ÂëΩ‰ª§‰ºöÊòæÁ§∫ÊúâÂì™‰∫õÁéØÂ¢É‰ª•ÂèäÂΩìÂâçÁéØÂ¢É(‰ªÖÂêçÁß∞), ÈÄöËøáÂ≠êÂëΩ‰ª§ÂèØ‰ª•ÂàáÊç¢ÁéØÂ¢É",
		Args:  cobra.NoArgs,
		Example: `- ÊòæÁ§∫ÊâÄÊúâÁéØÂ¢É
  - ysadmin envs`,
	}

	cmd.Run = func(cmd *cobra.Command, args []string) {
		// ÂàóÂá∫ÊâÄÊúâÁéØÂ¢ÉÔºà‰ªÖÂêçÁß∞Ôºâ
		current := Cfg.CurrentEnvironment
		keys := make([]string, 0, len(Cfg.Environments))
		for k := range Cfg.Environments {
			keys = append(keys, k)
		}

		sort.Strings(keys)

		fmt.Println("Environments:")
		for _, env := range keys {
			if env == current {
				fmt.Printf(" * %s  [%s]\n", color.New(color.FgGreen).Add(color.Bold).SprintFunc()(env), Cfg.Environments[env].Endpoint)
			} else {
				fmt.Printf("   %s  [%s]\n", env, Cfg.Environments[env].Endpoint)
			}
		}
	}

	cmd.AddCommand(
		newSwitchEnvCmd(),
		newShowEnvCmd(),
	)
	return cmd
}

func newSwitchEnvCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "switch [environment]",
		Short: "ÂàáÊç¢ÁéØÂ¢É",
		Long:  "ÂàáÊç¢ÁéØÂ¢É, ÈÄöËøáÊåáÂÆöÁéØÂ¢ÉÂêçÁß∞, ÂàáÊç¢Âà∞ÂØπÂ∫îÁéØÂ¢ÉÁöÑÈÖçÁΩÆ",
		Args:  cobra.ExactArgs(1),
		Example: `- ÂàáÊç¢Âà∞testÁéØÂ¢É
  - ysadmin envs switch test`,
	}

	cmd.Run = func(cmd *cobra.Command, args []string) {
		// ÂàáÊç¢Âà∞ÊåáÂÆöÁéØÂ¢É
		newEnv := args[0]
		if err := SwitchEnv(newEnv); err != nil {
			fmt.Printf("ÂàáÊç¢ÁéØÂ¢ÉÂ§±Ë¥•: %v\n", err)
			return
		}
	}

	return cmd
}

func newShowEnvCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "show [environment]",
		Short: "ÊòæÁ§∫ÁéØÂ¢É‰ø°ÊÅØ",
		Long:  "ÊòæÁ§∫ÁéØÂ¢É‰ø°ÊÅØ, ÈªòËÆ§ÊòæÁ§∫ÂΩìÂâçÁéØÂ¢É‰ø°ÊÅØ„ÄÇ Â¶ÇÊûúÊåáÂÆö‰∫ÜÂÖ∑‰ΩìÁéØÂ¢É, ÂàôÊòæÁ§∫ÊåáÂÆöÁéØÂ¢ÉÁöÑ‰ø°ÊÅØ",
		Args:  cobra.MaximumNArgs(1),
		Example: `- ÊòæÁ§∫ÂΩìÂâçÁéØÂ¢É‰ø°ÊÅØ
  - ysadmin envs show
- ÊòæÁ§∫ÊåáÂÆöÁéØÂ¢É‰ø°ÊÅØ
  - ysadmin envs show test`,
	}

	cmd.Run = func(cmd *cobra.Command, args []string) {
		// ÂàóÂá∫ÊåáÂÆöÁéØÂ¢ÉÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
		env := Cfg.CurrentEnvironment
		if len(args) > 0 {
			env = args[0]
		}

		if _, exist := Cfg.Environments[env]; !exist {
			fmt.Println("ÁéØÂ¢É‰∏çÂ≠òÂú®: ", env)
			return
		}

		fmt.Printf("Environment: %s\n", color.New(color.FgGreen).Add(color.Bold).SprintFunc()(env))
		printCompute(Cfg.Environments[env])
		printStorage(Cfg.Environments[env])
		printIam(Cfg.Environments[env])

	}

	return cmd
}

// SwitchEnv switches the current environment
func SwitchEnv(env string) error {
	if _, exist := Cfg.Environments[env]; !exist {
		return fmt.Errorf("ÁéØÂ¢É‰∏çÂ≠òÂú®: %s", env)
	}

	Cfg.CurrentEnvironment = env
	fmt.Println("Switched to environment:", color.New(color.FgGreen).Add(color.Bold).SprintFunc()(env))

	if err := SaveConfig(); err != nil {
		return err
	}

	return nil
}

func printCompute(cfg EnvironmentConfig) {
	fmt.Printf(" * %s\n", color.New(color.FgBlue).Add(color.Bold).SprintFunc()("Compute:"))
	fmt.Printf("   Endpoint: %s\n", cfg.Endpoint)
	fmt.Printf("   YsID: %s\n", cfg.ComputeYsID)
	fmt.Printf("   AccessKey: %s\n", cfg.ComputeAccessKeyID)
	fmt.Printf("   SecretKey: %s\n", cfg.ComputeAccessKeySecret)
}

func printStorage(cfg EnvironmentConfig) {
	fmt.Printf(" * %s\n", color.New(color.FgBlue).Add(color.Bold).SprintFunc()("Storage:"))
	fmt.Printf("   YsID: %s\n", cfg.StorageYsID)
	fmt.Printf("   AccessKey: %s\n", cfg.StorageAccessKeyID)
	fmt.Printf("   SecretKey: %s\n", cfg.StorageAccessKeySecret)
}

func printIam(cfg EnvironmentConfig) {
	fmt.Printf(" * %s\n", color.New(color.FgBlue).Add(color.Bold).SprintFunc()("IAM:"))
	fmt.Printf("   Endpoint: %s\n", cfg.IamAdminEndpoint)
	fmt.Printf("   AdminAccessKey: %s\n", cfg.IamAdminAccessKeyID)
	fmt.Printf("   AdminSecretKey: %s\n", cfg.IamAdminAccessKeySecret)
}
