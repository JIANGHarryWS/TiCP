// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HydraLcpServiceClient is the client API for HydraLcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HydraLcpServiceClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	ListUsers(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*UserInfoList, error)
	UpdateName(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	QueryInfoByPhoneNumber(ctx context.Context, in *QueryInfoByPhoneNumberReq, opts ...grpc.CallOption) (*UserInfo, error)
	CheckPassword(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckPassword2(ctx context.Context, in *CheckPasswordReq, opts ...grpc.CallOption) (*UserInfo, error)
	// 在SSO中添加一个用户
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	AddUser2(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
}

type hydraLcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHydraLcpServiceClient(cc grpc.ClientConnInterface) HydraLcpServiceClient {
	return &hydraLcpServiceClient{cc}
}

func (c *hydraLcpServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) ListUsers(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*UserInfoList, error) {
	out := new(UserInfoList)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdateName(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) QueryInfoByPhoneNumber(ctx context.Context, in *QueryInfoByPhoneNumberReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/QueryInfoByPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) CheckPassword(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/CheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) CheckPassword2(ctx context.Context, in *CheckPasswordReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/CheckPassword2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) AddUser2(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/AddUser2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HydraLcpServiceServer is the server API for HydraLcpService service.
// All implementations must embed UnimplementedHydraLcpServiceServer
// for forward compatibility
type HydraLcpServiceServer interface {
	GetUserInfo(context.Context, *GetUserInfoReq) (*UserInfo, error)
	ListUsers(context.Context, *ListUserReq) (*UserInfoList, error)
	UpdateName(context.Context, *UserInfoReq) (*UserInfo, error)
	QueryInfoByPhoneNumber(context.Context, *QueryInfoByPhoneNumberReq) (*UserInfo, error)
	CheckPassword(context.Context, *UserInfoReq) (*emptypb.Empty, error)
	CheckPassword2(context.Context, *CheckPasswordReq) (*UserInfo, error)
	// 在SSO中添加一个用户
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	AddUser2(context.Context, *AddUserReq) (*AddUserResp, error)
	mustEmbedUnimplementedHydraLcpServiceServer()
}

// UnimplementedHydraLcpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHydraLcpServiceServer struct {
}

func (UnimplementedHydraLcpServiceServer) GetUserInfo(context.Context, *GetUserInfoReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedHydraLcpServiceServer) ListUsers(context.Context, *ListUserReq) (*UserInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdateName(context.Context, *UserInfoReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedHydraLcpServiceServer) QueryInfoByPhoneNumber(context.Context, *QueryInfoByPhoneNumberReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInfoByPhoneNumber not implemented")
}
func (UnimplementedHydraLcpServiceServer) CheckPassword(context.Context, *UserInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedHydraLcpServiceServer) CheckPassword2(context.Context, *CheckPasswordReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword2 not implemented")
}
func (UnimplementedHydraLcpServiceServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedHydraLcpServiceServer) AddUser2(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser2 not implemented")
}
func (UnimplementedHydraLcpServiceServer) mustEmbedUnimplementedHydraLcpServiceServer() {}

// UnsafeHydraLcpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HydraLcpServiceServer will
// result in compilation errors.
type UnsafeHydraLcpServiceServer interface {
	mustEmbedUnimplementedHydraLcpServiceServer()
}

func RegisterHydraLcpServiceServer(s grpc.ServiceRegistrar, srv HydraLcpServiceServer) {
	s.RegisterService(&HydraLcpService_ServiceDesc, srv)
}

func _HydraLcpService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).ListUsers(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdateName(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_QueryInfoByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInfoByPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).QueryInfoByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/QueryInfoByPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).QueryInfoByPhoneNumber(ctx, req.(*QueryInfoByPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).CheckPassword(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_CheckPassword2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).CheckPassword2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/CheckPassword2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).CheckPassword2(ctx, req.(*CheckPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_AddUser2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).AddUser2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/AddUser2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).AddUser2(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HydraLcpService_ServiceDesc is the grpc.ServiceDesc for HydraLcpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HydraLcpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hydra_lcp.HydraLcpService",
	HandlerType: (*HydraLcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _HydraLcpService_GetUserInfo_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _HydraLcpService_ListUsers_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _HydraLcpService_UpdateName_Handler,
		},
		{
			MethodName: "QueryInfoByPhoneNumber",
			Handler:    _HydraLcpService_QueryInfoByPhoneNumber_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _HydraLcpService_CheckPassword_Handler,
		},
		{
			MethodName: "CheckPassword2",
			Handler:    _HydraLcpService_CheckPassword2_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _HydraLcpService_AddUser_Handler,
		},
		{
			MethodName: "AddUser2",
			Handler:    _HydraLcpService_AddUser2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/hydra_lcp.proto",
}
