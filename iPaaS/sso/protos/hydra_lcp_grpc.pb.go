// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HydraLcpServiceClient is the client API for HydraLcpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HydraLcpServiceClient interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	GetUserInfoBatch(ctx context.Context, in *GetUserInfoBatchReq, opts ...grpc.CallOption) (*UserInfoBatch, error)
	ListUsers(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*UserInfoList, error)
	UpdateName(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	QueryInfoByPhoneNumber(ctx context.Context, in *QueryInfoByPhoneNumberReq, opts ...grpc.CallOption) (*UserInfo, error)
	UpdatePhoneNumber(ctx context.Context, in *UpdatePhoneNumberReq, opts ...grpc.CallOption) (*UserInfo, error)
	UpdateEmail(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	UpdateWechatInfo(ctx context.Context, in *WechatInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	// 更新用户头像
	UpdateHeadimg(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	UpdateRealName(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error)
	CheckPassword(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckPassword2(ctx context.Context, in *CheckPasswordReq, opts ...grpc.CallOption) (*UserInfo, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdatePasswordByOld(ctx context.Context, in *UpdatePasswordByOldReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 直接重置用户的密码
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取外部认证用户信息
	GetExternalUserInfo(ctx context.Context, in *GetExternalUserInfoReq, opts ...grpc.CallOption) (*GetExternalUserInfoReply, error)
	// 检验外部认证用户是否存在
	CheckExternalUserExist(ctx context.Context, in *CheckExternalUserExistReq, opts ...grpc.CallOption) (*CheckExternalUserExistReply, error)
	// 通过手机号添加用户
	AddUserFromPhone(ctx context.Context, in *AddUserFromPhoneReq, opts ...grpc.CallOption) (*UserInfo, error)
	// 验证手机号与验证码
	VerifyPhoneCode(ctx context.Context, in *VerifyPhoneCodeReq, opts ...grpc.CallOption) (*VerifyPhoneCodeResp, error)
	// 验证手机号与验证码
	VerifyJwtToken(ctx context.Context, in *VerifyJwtTokenReq, opts ...grpc.CallOption) (*VerifyPhoneCodeResp, error)
	// 发送短信
	SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*SendSmsResp, error)
	// 获取微信公众号绑定数据
	GetOffiaccountBinding(ctx context.Context, in *GetOffiaccountBindingReq, opts ...grpc.CallOption) (*OffiaccountBinding, error)
	// 为余额通知获取公众号关注列表数据
	GetOffiaccountBalanceSubList(ctx context.Context, in *GetOffiaccountBalanceSubListReq, opts ...grpc.CallOption) (*GetOffiaccountBalanceSubListResp, error)
	// 发送公众号通知 单个发送
	SendOffiaccountNotification(ctx context.Context, in *SendOffiaccountNotificationReq, opts ...grpc.CallOption) (*SendOffiaccountNotificationResp, error)
	// 批量发送余额通知
	SendOffiaccountBalanceNotifications(ctx context.Context, in *SendOffiaccountBalanceNotificationsReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 发送可视化作业提醒
	SendOffiaccountVisJobNotification(ctx context.Context, in *SendOffiaccountVisJobNotificationReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 解除微信公众号通知
	DeactivateOffiaccountNotification(ctx context.Context, in *DeactivateOffiaccountNotificationReq, opts ...grpc.CallOption) (*DeactivateOffiaccountNotificationResp, error)
	// 添加作业到待通知列表
	AddJobToNotify(ctx context.Context, in *AddJobToNotifyReq, opts ...grpc.CallOption) (*JobToNotify, error)
	GetJobToNotify(ctx context.Context, in *GetJobToNotifyReq, opts ...grpc.CallOption) (*JobToNotify, error)
	// 设置待通知Job的通知状态
	SetJobToNotifyStatus(ctx context.Context, in *SetJobToNotifyStatusReq, opts ...grpc.CallOption) (*SetJobToNotifyStatusResp, error)
	// GetOffiaccountAK Get Official Account access token from central server. Internal use only!
	GetOffiaccountAK(ctx context.Context, in *GetOffiaccountAKReq, opts ...grpc.CallOption) (*GetOffiaccountAKResp, error)
	// 保存公众号菜单
	SaveOffiaccountMenu(ctx context.Context, in *SaveOffiaccountMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOffiaccountMenu(ctx context.Context, in *GetOffiaccountMenuReq, opts ...grpc.CallOption) (*OffiaccountMenu, error)
	// 创建关键词回复规则
	AddOffiaccountReplyRule(ctx context.Context, in *AddOffiaccountReplyRuleReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取关键词回复规则
	GetOffiaccountReplyRule(ctx context.Context, in *GetOffiaccountReplyRuleReq, opts ...grpc.CallOption) (*OffiaccountReplyRule, error)
	UpdateOffiaccountReplyRule(ctx context.Context, in *OffiaccountReplyRule, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取关键词回复规则列表
	GetOffiaccountReplyRuleList(ctx context.Context, in *GetOffiaccountReplyRuleListReq, opts ...grpc.CallOption) (*GetOffiaccountReplyRuleListResp, error)
	// 启用/禁用关键词回复规则
	SwitchOffiaccountReplyRule(ctx context.Context, in *SwitchOffiaccountReplyRuleReq, opts ...grpc.CallOption) (*OffiaccountReplyRule, error)
	// 保存公众号订阅自动回复/收到消息回复
	SaveOffiaccountSubGeneralReply(ctx context.Context, in *SaveOffiaccountSubGeneralReplyReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取公众号订阅自动回复/收到消息回复
	GetOffiaccountSubGeneralReply(ctx context.Context, in *GetOffiaccountSubGeneralReplyReq, opts ...grpc.CallOption) (*OffiaccountReplyRule, error)
	// 删除公众号订阅自动回复/收到消息回复
	DeleteOffiaccountSubGeneralReply(ctx context.Context, in *DeleteOffiaccountSubGeneralReplyReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取JSSDK的页面配置（签名）
	GetJsConfig(ctx context.Context, in *GetJsConfigReq, opts ...grpc.CallOption) (*GetJsConfigResp, error)
	// 获取JSSDK的临时票据
	GetJsTicket(ctx context.Context, in *GetJsTicketReq, opts ...grpc.CallOption) (*GetJsTicketResp, error)
	// 后台超级验证码
	SuperVerificationCodeForOms(ctx context.Context, in *SuperVerificationCodeForOmsReq, opts ...grpc.CallOption) (*SuperVerificationCodeForOmsResp, error)
	// 在SSO中添加一个用户
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
	AddUser2(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error)
}

type hydraLcpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHydraLcpServiceClient(cc grpc.ClientConnInterface) HydraLcpServiceClient {
	return &hydraLcpServiceClient{cc}
}

func (c *hydraLcpServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetUserInfoBatch(ctx context.Context, in *GetUserInfoBatchReq, opts ...grpc.CallOption) (*UserInfoBatch, error) {
	out := new(UserInfoBatch)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetUserInfoBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) ListUsers(ctx context.Context, in *ListUserReq, opts ...grpc.CallOption) (*UserInfoList, error) {
	out := new(UserInfoList)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdateName(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) QueryInfoByPhoneNumber(ctx context.Context, in *QueryInfoByPhoneNumberReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/QueryInfoByPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdatePhoneNumber(ctx context.Context, in *UpdatePhoneNumberReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdatePhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdateEmail(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdateWechatInfo(ctx context.Context, in *WechatInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdateWechatInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdateHeadimg(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdateHeadimg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdateRealName(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdateRealName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) CheckPassword(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/CheckPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) CheckPassword2(ctx context.Context, in *CheckPasswordReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/CheckPassword2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdatePassword(ctx context.Context, in *UpdatePasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdatePasswordByOld(ctx context.Context, in *UpdatePasswordByOldReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdatePasswordByOld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetExternalUserInfo(ctx context.Context, in *GetExternalUserInfoReq, opts ...grpc.CallOption) (*GetExternalUserInfoReply, error) {
	out := new(GetExternalUserInfoReply)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetExternalUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) CheckExternalUserExist(ctx context.Context, in *CheckExternalUserExistReq, opts ...grpc.CallOption) (*CheckExternalUserExistReply, error) {
	out := new(CheckExternalUserExistReply)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/CheckExternalUserExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) AddUserFromPhone(ctx context.Context, in *AddUserFromPhoneReq, opts ...grpc.CallOption) (*UserInfo, error) {
	out := new(UserInfo)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/AddUserFromPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) VerifyPhoneCode(ctx context.Context, in *VerifyPhoneCodeReq, opts ...grpc.CallOption) (*VerifyPhoneCodeResp, error) {
	out := new(VerifyPhoneCodeResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/VerifyPhoneCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) VerifyJwtToken(ctx context.Context, in *VerifyJwtTokenReq, opts ...grpc.CallOption) (*VerifyPhoneCodeResp, error) {
	out := new(VerifyPhoneCodeResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/VerifyJwtToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) SendSms(ctx context.Context, in *SendSmsReq, opts ...grpc.CallOption) (*SendSmsResp, error) {
	out := new(SendSmsResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/SendSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetOffiaccountBinding(ctx context.Context, in *GetOffiaccountBindingReq, opts ...grpc.CallOption) (*OffiaccountBinding, error) {
	out := new(OffiaccountBinding)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetOffiaccountBinding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetOffiaccountBalanceSubList(ctx context.Context, in *GetOffiaccountBalanceSubListReq, opts ...grpc.CallOption) (*GetOffiaccountBalanceSubListResp, error) {
	out := new(GetOffiaccountBalanceSubListResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetOffiaccountBalanceSubList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) SendOffiaccountNotification(ctx context.Context, in *SendOffiaccountNotificationReq, opts ...grpc.CallOption) (*SendOffiaccountNotificationResp, error) {
	out := new(SendOffiaccountNotificationResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/SendOffiaccountNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) SendOffiaccountBalanceNotifications(ctx context.Context, in *SendOffiaccountBalanceNotificationsReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/SendOffiaccountBalanceNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) SendOffiaccountVisJobNotification(ctx context.Context, in *SendOffiaccountVisJobNotificationReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/SendOffiaccountVisJobNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) DeactivateOffiaccountNotification(ctx context.Context, in *DeactivateOffiaccountNotificationReq, opts ...grpc.CallOption) (*DeactivateOffiaccountNotificationResp, error) {
	out := new(DeactivateOffiaccountNotificationResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/DeactivateOffiaccountNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) AddJobToNotify(ctx context.Context, in *AddJobToNotifyReq, opts ...grpc.CallOption) (*JobToNotify, error) {
	out := new(JobToNotify)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/AddJobToNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetJobToNotify(ctx context.Context, in *GetJobToNotifyReq, opts ...grpc.CallOption) (*JobToNotify, error) {
	out := new(JobToNotify)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetJobToNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) SetJobToNotifyStatus(ctx context.Context, in *SetJobToNotifyStatusReq, opts ...grpc.CallOption) (*SetJobToNotifyStatusResp, error) {
	out := new(SetJobToNotifyStatusResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/SetJobToNotifyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetOffiaccountAK(ctx context.Context, in *GetOffiaccountAKReq, opts ...grpc.CallOption) (*GetOffiaccountAKResp, error) {
	out := new(GetOffiaccountAKResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetOffiaccountAK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) SaveOffiaccountMenu(ctx context.Context, in *SaveOffiaccountMenuReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/SaveOffiaccountMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetOffiaccountMenu(ctx context.Context, in *GetOffiaccountMenuReq, opts ...grpc.CallOption) (*OffiaccountMenu, error) {
	out := new(OffiaccountMenu)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetOffiaccountMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) AddOffiaccountReplyRule(ctx context.Context, in *AddOffiaccountReplyRuleReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/AddOffiaccountReplyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetOffiaccountReplyRule(ctx context.Context, in *GetOffiaccountReplyRuleReq, opts ...grpc.CallOption) (*OffiaccountReplyRule, error) {
	out := new(OffiaccountReplyRule)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetOffiaccountReplyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) UpdateOffiaccountReplyRule(ctx context.Context, in *OffiaccountReplyRule, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/UpdateOffiaccountReplyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetOffiaccountReplyRuleList(ctx context.Context, in *GetOffiaccountReplyRuleListReq, opts ...grpc.CallOption) (*GetOffiaccountReplyRuleListResp, error) {
	out := new(GetOffiaccountReplyRuleListResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetOffiaccountReplyRuleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) SwitchOffiaccountReplyRule(ctx context.Context, in *SwitchOffiaccountReplyRuleReq, opts ...grpc.CallOption) (*OffiaccountReplyRule, error) {
	out := new(OffiaccountReplyRule)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/SwitchOffiaccountReplyRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) SaveOffiaccountSubGeneralReply(ctx context.Context, in *SaveOffiaccountSubGeneralReplyReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/SaveOffiaccountSubGeneralReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetOffiaccountSubGeneralReply(ctx context.Context, in *GetOffiaccountSubGeneralReplyReq, opts ...grpc.CallOption) (*OffiaccountReplyRule, error) {
	out := new(OffiaccountReplyRule)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetOffiaccountSubGeneralReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) DeleteOffiaccountSubGeneralReply(ctx context.Context, in *DeleteOffiaccountSubGeneralReplyReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/DeleteOffiaccountSubGeneralReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetJsConfig(ctx context.Context, in *GetJsConfigReq, opts ...grpc.CallOption) (*GetJsConfigResp, error) {
	out := new(GetJsConfigResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetJsConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) GetJsTicket(ctx context.Context, in *GetJsTicketReq, opts ...grpc.CallOption) (*GetJsTicketResp, error) {
	out := new(GetJsTicketResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/GetJsTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) SuperVerificationCodeForOms(ctx context.Context, in *SuperVerificationCodeForOmsReq, opts ...grpc.CallOption) (*SuperVerificationCodeForOmsResp, error) {
	out := new(SuperVerificationCodeForOmsResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/SuperVerificationCodeForOms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hydraLcpServiceClient) AddUser2(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserResp, error) {
	out := new(AddUserResp)
	err := c.cc.Invoke(ctx, "/hydra_lcp.HydraLcpService/AddUser2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HydraLcpServiceServer is the server API for HydraLcpService service.
// All implementations must embed UnimplementedHydraLcpServiceServer
// for forward compatibility
type HydraLcpServiceServer interface {
	GetUserInfo(context.Context, *GetUserInfoReq) (*UserInfo, error)
	GetUserInfoBatch(context.Context, *GetUserInfoBatchReq) (*UserInfoBatch, error)
	ListUsers(context.Context, *ListUserReq) (*UserInfoList, error)
	UpdateName(context.Context, *UserInfoReq) (*UserInfo, error)
	QueryInfoByPhoneNumber(context.Context, *QueryInfoByPhoneNumberReq) (*UserInfo, error)
	UpdatePhoneNumber(context.Context, *UpdatePhoneNumberReq) (*UserInfo, error)
	UpdateEmail(context.Context, *UserInfoReq) (*UserInfo, error)
	UpdateWechatInfo(context.Context, *WechatInfoReq) (*UserInfo, error)
	// 更新用户头像
	UpdateHeadimg(context.Context, *UserInfoReq) (*UserInfo, error)
	UpdateRealName(context.Context, *UserInfoReq) (*UserInfo, error)
	CheckPassword(context.Context, *UserInfoReq) (*emptypb.Empty, error)
	CheckPassword2(context.Context, *CheckPasswordReq) (*UserInfo, error)
	UpdatePassword(context.Context, *UpdatePasswordReq) (*emptypb.Empty, error)
	UpdatePasswordByOld(context.Context, *UpdatePasswordByOldReq) (*emptypb.Empty, error)
	// 直接重置用户的密码
	ResetPassword(context.Context, *ResetPasswordReq) (*emptypb.Empty, error)
	// 获取外部认证用户信息
	GetExternalUserInfo(context.Context, *GetExternalUserInfoReq) (*GetExternalUserInfoReply, error)
	// 检验外部认证用户是否存在
	CheckExternalUserExist(context.Context, *CheckExternalUserExistReq) (*CheckExternalUserExistReply, error)
	// 通过手机号添加用户
	AddUserFromPhone(context.Context, *AddUserFromPhoneReq) (*UserInfo, error)
	// 验证手机号与验证码
	VerifyPhoneCode(context.Context, *VerifyPhoneCodeReq) (*VerifyPhoneCodeResp, error)
	// 验证手机号与验证码
	VerifyJwtToken(context.Context, *VerifyJwtTokenReq) (*VerifyPhoneCodeResp, error)
	// 发送短信
	SendSms(context.Context, *SendSmsReq) (*SendSmsResp, error)
	// 获取微信公众号绑定数据
	GetOffiaccountBinding(context.Context, *GetOffiaccountBindingReq) (*OffiaccountBinding, error)
	// 为余额通知获取公众号关注列表数据
	GetOffiaccountBalanceSubList(context.Context, *GetOffiaccountBalanceSubListReq) (*GetOffiaccountBalanceSubListResp, error)
	// 发送公众号通知 单个发送
	SendOffiaccountNotification(context.Context, *SendOffiaccountNotificationReq) (*SendOffiaccountNotificationResp, error)
	// 批量发送余额通知
	SendOffiaccountBalanceNotifications(context.Context, *SendOffiaccountBalanceNotificationsReq) (*emptypb.Empty, error)
	// 发送可视化作业提醒
	SendOffiaccountVisJobNotification(context.Context, *SendOffiaccountVisJobNotificationReq) (*emptypb.Empty, error)
	// 解除微信公众号通知
	DeactivateOffiaccountNotification(context.Context, *DeactivateOffiaccountNotificationReq) (*DeactivateOffiaccountNotificationResp, error)
	// 添加作业到待通知列表
	AddJobToNotify(context.Context, *AddJobToNotifyReq) (*JobToNotify, error)
	GetJobToNotify(context.Context, *GetJobToNotifyReq) (*JobToNotify, error)
	// 设置待通知Job的通知状态
	SetJobToNotifyStatus(context.Context, *SetJobToNotifyStatusReq) (*SetJobToNotifyStatusResp, error)
	// GetOffiaccountAK Get Official Account access token from central server. Internal use only!
	GetOffiaccountAK(context.Context, *GetOffiaccountAKReq) (*GetOffiaccountAKResp, error)
	// 保存公众号菜单
	SaveOffiaccountMenu(context.Context, *SaveOffiaccountMenuReq) (*emptypb.Empty, error)
	GetOffiaccountMenu(context.Context, *GetOffiaccountMenuReq) (*OffiaccountMenu, error)
	// 创建关键词回复规则
	AddOffiaccountReplyRule(context.Context, *AddOffiaccountReplyRuleReq) (*emptypb.Empty, error)
	// 获取关键词回复规则
	GetOffiaccountReplyRule(context.Context, *GetOffiaccountReplyRuleReq) (*OffiaccountReplyRule, error)
	UpdateOffiaccountReplyRule(context.Context, *OffiaccountReplyRule) (*emptypb.Empty, error)
	// 获取关键词回复规则列表
	GetOffiaccountReplyRuleList(context.Context, *GetOffiaccountReplyRuleListReq) (*GetOffiaccountReplyRuleListResp, error)
	// 启用/禁用关键词回复规则
	SwitchOffiaccountReplyRule(context.Context, *SwitchOffiaccountReplyRuleReq) (*OffiaccountReplyRule, error)
	// 保存公众号订阅自动回复/收到消息回复
	SaveOffiaccountSubGeneralReply(context.Context, *SaveOffiaccountSubGeneralReplyReq) (*emptypb.Empty, error)
	// 获取公众号订阅自动回复/收到消息回复
	GetOffiaccountSubGeneralReply(context.Context, *GetOffiaccountSubGeneralReplyReq) (*OffiaccountReplyRule, error)
	// 删除公众号订阅自动回复/收到消息回复
	DeleteOffiaccountSubGeneralReply(context.Context, *DeleteOffiaccountSubGeneralReplyReq) (*emptypb.Empty, error)
	// 获取JSSDK的页面配置（签名）
	GetJsConfig(context.Context, *GetJsConfigReq) (*GetJsConfigResp, error)
	// 获取JSSDK的临时票据
	GetJsTicket(context.Context, *GetJsTicketReq) (*GetJsTicketResp, error)
	// 后台超级验证码
	SuperVerificationCodeForOms(context.Context, *SuperVerificationCodeForOmsReq) (*SuperVerificationCodeForOmsResp, error)
	// 在SSO中添加一个用户
	AddUser(context.Context, *AddUserReq) (*AddUserResp, error)
	AddUser2(context.Context, *AddUserReq) (*AddUserResp, error)
	mustEmbedUnimplementedHydraLcpServiceServer()
}

// UnimplementedHydraLcpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHydraLcpServiceServer struct {
}

func (UnimplementedHydraLcpServiceServer) GetUserInfo(context.Context, *GetUserInfoReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetUserInfoBatch(context.Context, *GetUserInfoBatchReq) (*UserInfoBatch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoBatch not implemented")
}
func (UnimplementedHydraLcpServiceServer) ListUsers(context.Context, *ListUserReq) (*UserInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdateName(context.Context, *UserInfoReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateName not implemented")
}
func (UnimplementedHydraLcpServiceServer) QueryInfoByPhoneNumber(context.Context, *QueryInfoByPhoneNumberReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInfoByPhoneNumber not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdatePhoneNumber(context.Context, *UpdatePhoneNumberReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoneNumber not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdateEmail(context.Context, *UserInfoReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmail not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdateWechatInfo(context.Context, *WechatInfoReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWechatInfo not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdateHeadimg(context.Context, *UserInfoReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHeadimg not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdateRealName(context.Context, *UserInfoReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRealName not implemented")
}
func (UnimplementedHydraLcpServiceServer) CheckPassword(context.Context, *UserInfoReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword not implemented")
}
func (UnimplementedHydraLcpServiceServer) CheckPassword2(context.Context, *CheckPasswordReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPassword2 not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdatePassword(context.Context, *UpdatePasswordReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdatePasswordByOld(context.Context, *UpdatePasswordByOldReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordByOld not implemented")
}
func (UnimplementedHydraLcpServiceServer) ResetPassword(context.Context, *ResetPasswordReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetExternalUserInfo(context.Context, *GetExternalUserInfoReq) (*GetExternalUserInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalUserInfo not implemented")
}
func (UnimplementedHydraLcpServiceServer) CheckExternalUserExist(context.Context, *CheckExternalUserExistReq) (*CheckExternalUserExistReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckExternalUserExist not implemented")
}
func (UnimplementedHydraLcpServiceServer) AddUserFromPhone(context.Context, *AddUserFromPhoneReq) (*UserInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserFromPhone not implemented")
}
func (UnimplementedHydraLcpServiceServer) VerifyPhoneCode(context.Context, *VerifyPhoneCodeReq) (*VerifyPhoneCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyPhoneCode not implemented")
}
func (UnimplementedHydraLcpServiceServer) VerifyJwtToken(context.Context, *VerifyJwtTokenReq) (*VerifyPhoneCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyJwtToken not implemented")
}
func (UnimplementedHydraLcpServiceServer) SendSms(context.Context, *SendSmsReq) (*SendSmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetOffiaccountBinding(context.Context, *GetOffiaccountBindingReq) (*OffiaccountBinding, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffiaccountBinding not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetOffiaccountBalanceSubList(context.Context, *GetOffiaccountBalanceSubListReq) (*GetOffiaccountBalanceSubListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffiaccountBalanceSubList not implemented")
}
func (UnimplementedHydraLcpServiceServer) SendOffiaccountNotification(context.Context, *SendOffiaccountNotificationReq) (*SendOffiaccountNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffiaccountNotification not implemented")
}
func (UnimplementedHydraLcpServiceServer) SendOffiaccountBalanceNotifications(context.Context, *SendOffiaccountBalanceNotificationsReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffiaccountBalanceNotifications not implemented")
}
func (UnimplementedHydraLcpServiceServer) SendOffiaccountVisJobNotification(context.Context, *SendOffiaccountVisJobNotificationReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOffiaccountVisJobNotification not implemented")
}
func (UnimplementedHydraLcpServiceServer) DeactivateOffiaccountNotification(context.Context, *DeactivateOffiaccountNotificationReq) (*DeactivateOffiaccountNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateOffiaccountNotification not implemented")
}
func (UnimplementedHydraLcpServiceServer) AddJobToNotify(context.Context, *AddJobToNotifyReq) (*JobToNotify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddJobToNotify not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetJobToNotify(context.Context, *GetJobToNotifyReq) (*JobToNotify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobToNotify not implemented")
}
func (UnimplementedHydraLcpServiceServer) SetJobToNotifyStatus(context.Context, *SetJobToNotifyStatusReq) (*SetJobToNotifyStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobToNotifyStatus not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetOffiaccountAK(context.Context, *GetOffiaccountAKReq) (*GetOffiaccountAKResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffiaccountAK not implemented")
}
func (UnimplementedHydraLcpServiceServer) SaveOffiaccountMenu(context.Context, *SaveOffiaccountMenuReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOffiaccountMenu not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetOffiaccountMenu(context.Context, *GetOffiaccountMenuReq) (*OffiaccountMenu, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffiaccountMenu not implemented")
}
func (UnimplementedHydraLcpServiceServer) AddOffiaccountReplyRule(context.Context, *AddOffiaccountReplyRuleReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOffiaccountReplyRule not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetOffiaccountReplyRule(context.Context, *GetOffiaccountReplyRuleReq) (*OffiaccountReplyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffiaccountReplyRule not implemented")
}
func (UnimplementedHydraLcpServiceServer) UpdateOffiaccountReplyRule(context.Context, *OffiaccountReplyRule) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOffiaccountReplyRule not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetOffiaccountReplyRuleList(context.Context, *GetOffiaccountReplyRuleListReq) (*GetOffiaccountReplyRuleListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffiaccountReplyRuleList not implemented")
}
func (UnimplementedHydraLcpServiceServer) SwitchOffiaccountReplyRule(context.Context, *SwitchOffiaccountReplyRuleReq) (*OffiaccountReplyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchOffiaccountReplyRule not implemented")
}
func (UnimplementedHydraLcpServiceServer) SaveOffiaccountSubGeneralReply(context.Context, *SaveOffiaccountSubGeneralReplyReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOffiaccountSubGeneralReply not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetOffiaccountSubGeneralReply(context.Context, *GetOffiaccountSubGeneralReplyReq) (*OffiaccountReplyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOffiaccountSubGeneralReply not implemented")
}
func (UnimplementedHydraLcpServiceServer) DeleteOffiaccountSubGeneralReply(context.Context, *DeleteOffiaccountSubGeneralReplyReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOffiaccountSubGeneralReply not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetJsConfig(context.Context, *GetJsConfigReq) (*GetJsConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJsConfig not implemented")
}
func (UnimplementedHydraLcpServiceServer) GetJsTicket(context.Context, *GetJsTicketReq) (*GetJsTicketResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJsTicket not implemented")
}
func (UnimplementedHydraLcpServiceServer) SuperVerificationCodeForOms(context.Context, *SuperVerificationCodeForOmsReq) (*SuperVerificationCodeForOmsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperVerificationCodeForOms not implemented")
}
func (UnimplementedHydraLcpServiceServer) AddUser(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedHydraLcpServiceServer) AddUser2(context.Context, *AddUserReq) (*AddUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser2 not implemented")
}
func (UnimplementedHydraLcpServiceServer) mustEmbedUnimplementedHydraLcpServiceServer() {}

// UnsafeHydraLcpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HydraLcpServiceServer will
// result in compilation errors.
type UnsafeHydraLcpServiceServer interface {
	mustEmbedUnimplementedHydraLcpServiceServer()
}

func RegisterHydraLcpServiceServer(s grpc.ServiceRegistrar, srv HydraLcpServiceServer) {
	s.RegisterService(&HydraLcpService_ServiceDesc, srv)
}

func _HydraLcpService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetUserInfoBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetUserInfoBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetUserInfoBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetUserInfoBatch(ctx, req.(*GetUserInfoBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).ListUsers(ctx, req.(*ListUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdateName(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_QueryInfoByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInfoByPhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).QueryInfoByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/QueryInfoByPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).QueryInfoByPhoneNumber(ctx, req.(*QueryInfoByPhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdatePhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneNumberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdatePhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdatePhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdatePhoneNumber(ctx, req.(*UpdatePhoneNumberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdateEmail(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdateWechatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WechatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdateWechatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdateWechatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdateWechatInfo(ctx, req.(*WechatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdateHeadimg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdateHeadimg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdateHeadimg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdateHeadimg(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdateRealName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdateRealName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdateRealName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdateRealName(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_CheckPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).CheckPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/CheckPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).CheckPassword(ctx, req.(*UserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_CheckPassword2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).CheckPassword2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/CheckPassword2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).CheckPassword2(ctx, req.(*CheckPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdatePassword(ctx, req.(*UpdatePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdatePasswordByOld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordByOldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdatePasswordByOld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdatePasswordByOld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdatePasswordByOld(ctx, req.(*UpdatePasswordByOldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetExternalUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetExternalUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetExternalUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetExternalUserInfo(ctx, req.(*GetExternalUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_CheckExternalUserExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckExternalUserExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).CheckExternalUserExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/CheckExternalUserExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).CheckExternalUserExist(ctx, req.(*CheckExternalUserExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_AddUserFromPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserFromPhoneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).AddUserFromPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/AddUserFromPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).AddUserFromPhone(ctx, req.(*AddUserFromPhoneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_VerifyPhoneCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPhoneCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).VerifyPhoneCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/VerifyPhoneCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).VerifyPhoneCode(ctx, req.(*VerifyPhoneCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_VerifyJwtToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyJwtTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).VerifyJwtToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/VerifyJwtToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).VerifyJwtToken(ctx, req.(*VerifyJwtTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/SendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).SendSms(ctx, req.(*SendSmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetOffiaccountBinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffiaccountBindingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetOffiaccountBinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetOffiaccountBinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetOffiaccountBinding(ctx, req.(*GetOffiaccountBindingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetOffiaccountBalanceSubList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffiaccountBalanceSubListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetOffiaccountBalanceSubList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetOffiaccountBalanceSubList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetOffiaccountBalanceSubList(ctx, req.(*GetOffiaccountBalanceSubListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_SendOffiaccountNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOffiaccountNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).SendOffiaccountNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/SendOffiaccountNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).SendOffiaccountNotification(ctx, req.(*SendOffiaccountNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_SendOffiaccountBalanceNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOffiaccountBalanceNotificationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).SendOffiaccountBalanceNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/SendOffiaccountBalanceNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).SendOffiaccountBalanceNotifications(ctx, req.(*SendOffiaccountBalanceNotificationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_SendOffiaccountVisJobNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOffiaccountVisJobNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).SendOffiaccountVisJobNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/SendOffiaccountVisJobNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).SendOffiaccountVisJobNotification(ctx, req.(*SendOffiaccountVisJobNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_DeactivateOffiaccountNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateOffiaccountNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).DeactivateOffiaccountNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/DeactivateOffiaccountNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).DeactivateOffiaccountNotification(ctx, req.(*DeactivateOffiaccountNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_AddJobToNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddJobToNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).AddJobToNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/AddJobToNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).AddJobToNotify(ctx, req.(*AddJobToNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetJobToNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobToNotifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetJobToNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetJobToNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetJobToNotify(ctx, req.(*GetJobToNotifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_SetJobToNotifyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobToNotifyStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).SetJobToNotifyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/SetJobToNotifyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).SetJobToNotifyStatus(ctx, req.(*SetJobToNotifyStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetOffiaccountAK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffiaccountAKReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetOffiaccountAK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetOffiaccountAK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetOffiaccountAK(ctx, req.(*GetOffiaccountAKReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_SaveOffiaccountMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOffiaccountMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).SaveOffiaccountMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/SaveOffiaccountMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).SaveOffiaccountMenu(ctx, req.(*SaveOffiaccountMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetOffiaccountMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffiaccountMenuReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetOffiaccountMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetOffiaccountMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetOffiaccountMenu(ctx, req.(*GetOffiaccountMenuReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_AddOffiaccountReplyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOffiaccountReplyRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).AddOffiaccountReplyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/AddOffiaccountReplyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).AddOffiaccountReplyRule(ctx, req.(*AddOffiaccountReplyRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetOffiaccountReplyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffiaccountReplyRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetOffiaccountReplyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetOffiaccountReplyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetOffiaccountReplyRule(ctx, req.(*GetOffiaccountReplyRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_UpdateOffiaccountReplyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffiaccountReplyRule)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).UpdateOffiaccountReplyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/UpdateOffiaccountReplyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).UpdateOffiaccountReplyRule(ctx, req.(*OffiaccountReplyRule))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetOffiaccountReplyRuleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffiaccountReplyRuleListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetOffiaccountReplyRuleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetOffiaccountReplyRuleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetOffiaccountReplyRuleList(ctx, req.(*GetOffiaccountReplyRuleListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_SwitchOffiaccountReplyRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchOffiaccountReplyRuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).SwitchOffiaccountReplyRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/SwitchOffiaccountReplyRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).SwitchOffiaccountReplyRule(ctx, req.(*SwitchOffiaccountReplyRuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_SaveOffiaccountSubGeneralReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveOffiaccountSubGeneralReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).SaveOffiaccountSubGeneralReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/SaveOffiaccountSubGeneralReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).SaveOffiaccountSubGeneralReply(ctx, req.(*SaveOffiaccountSubGeneralReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetOffiaccountSubGeneralReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOffiaccountSubGeneralReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetOffiaccountSubGeneralReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetOffiaccountSubGeneralReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetOffiaccountSubGeneralReply(ctx, req.(*GetOffiaccountSubGeneralReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_DeleteOffiaccountSubGeneralReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOffiaccountSubGeneralReplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).DeleteOffiaccountSubGeneralReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/DeleteOffiaccountSubGeneralReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).DeleteOffiaccountSubGeneralReply(ctx, req.(*DeleteOffiaccountSubGeneralReplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetJsConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJsConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetJsConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetJsConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetJsConfig(ctx, req.(*GetJsConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_GetJsTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJsTicketReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).GetJsTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/GetJsTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).GetJsTicket(ctx, req.(*GetJsTicketReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_SuperVerificationCodeForOms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperVerificationCodeForOmsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).SuperVerificationCodeForOms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/SuperVerificationCodeForOms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).SuperVerificationCodeForOms(ctx, req.(*SuperVerificationCodeForOmsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _HydraLcpService_AddUser2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HydraLcpServiceServer).AddUser2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hydra_lcp.HydraLcpService/AddUser2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HydraLcpServiceServer).AddUser2(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// HydraLcpService_ServiceDesc is the grpc.ServiceDesc for HydraLcpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HydraLcpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hydra_lcp.HydraLcpService",
	HandlerType: (*HydraLcpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _HydraLcpService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoBatch",
			Handler:    _HydraLcpService_GetUserInfoBatch_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _HydraLcpService_ListUsers_Handler,
		},
		{
			MethodName: "UpdateName",
			Handler:    _HydraLcpService_UpdateName_Handler,
		},
		{
			MethodName: "QueryInfoByPhoneNumber",
			Handler:    _HydraLcpService_QueryInfoByPhoneNumber_Handler,
		},
		{
			MethodName: "UpdatePhoneNumber",
			Handler:    _HydraLcpService_UpdatePhoneNumber_Handler,
		},
		{
			MethodName: "UpdateEmail",
			Handler:    _HydraLcpService_UpdateEmail_Handler,
		},
		{
			MethodName: "UpdateWechatInfo",
			Handler:    _HydraLcpService_UpdateWechatInfo_Handler,
		},
		{
			MethodName: "UpdateHeadimg",
			Handler:    _HydraLcpService_UpdateHeadimg_Handler,
		},
		{
			MethodName: "UpdateRealName",
			Handler:    _HydraLcpService_UpdateRealName_Handler,
		},
		{
			MethodName: "CheckPassword",
			Handler:    _HydraLcpService_CheckPassword_Handler,
		},
		{
			MethodName: "CheckPassword2",
			Handler:    _HydraLcpService_CheckPassword2_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _HydraLcpService_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdatePasswordByOld",
			Handler:    _HydraLcpService_UpdatePasswordByOld_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _HydraLcpService_ResetPassword_Handler,
		},
		{
			MethodName: "GetExternalUserInfo",
			Handler:    _HydraLcpService_GetExternalUserInfo_Handler,
		},
		{
			MethodName: "CheckExternalUserExist",
			Handler:    _HydraLcpService_CheckExternalUserExist_Handler,
		},
		{
			MethodName: "AddUserFromPhone",
			Handler:    _HydraLcpService_AddUserFromPhone_Handler,
		},
		{
			MethodName: "VerifyPhoneCode",
			Handler:    _HydraLcpService_VerifyPhoneCode_Handler,
		},
		{
			MethodName: "VerifyJwtToken",
			Handler:    _HydraLcpService_VerifyJwtToken_Handler,
		},
		{
			MethodName: "SendSms",
			Handler:    _HydraLcpService_SendSms_Handler,
		},
		{
			MethodName: "GetOffiaccountBinding",
			Handler:    _HydraLcpService_GetOffiaccountBinding_Handler,
		},
		{
			MethodName: "GetOffiaccountBalanceSubList",
			Handler:    _HydraLcpService_GetOffiaccountBalanceSubList_Handler,
		},
		{
			MethodName: "SendOffiaccountNotification",
			Handler:    _HydraLcpService_SendOffiaccountNotification_Handler,
		},
		{
			MethodName: "SendOffiaccountBalanceNotifications",
			Handler:    _HydraLcpService_SendOffiaccountBalanceNotifications_Handler,
		},
		{
			MethodName: "SendOffiaccountVisJobNotification",
			Handler:    _HydraLcpService_SendOffiaccountVisJobNotification_Handler,
		},
		{
			MethodName: "DeactivateOffiaccountNotification",
			Handler:    _HydraLcpService_DeactivateOffiaccountNotification_Handler,
		},
		{
			MethodName: "AddJobToNotify",
			Handler:    _HydraLcpService_AddJobToNotify_Handler,
		},
		{
			MethodName: "GetJobToNotify",
			Handler:    _HydraLcpService_GetJobToNotify_Handler,
		},
		{
			MethodName: "SetJobToNotifyStatus",
			Handler:    _HydraLcpService_SetJobToNotifyStatus_Handler,
		},
		{
			MethodName: "GetOffiaccountAK",
			Handler:    _HydraLcpService_GetOffiaccountAK_Handler,
		},
		{
			MethodName: "SaveOffiaccountMenu",
			Handler:    _HydraLcpService_SaveOffiaccountMenu_Handler,
		},
		{
			MethodName: "GetOffiaccountMenu",
			Handler:    _HydraLcpService_GetOffiaccountMenu_Handler,
		},
		{
			MethodName: "AddOffiaccountReplyRule",
			Handler:    _HydraLcpService_AddOffiaccountReplyRule_Handler,
		},
		{
			MethodName: "GetOffiaccountReplyRule",
			Handler:    _HydraLcpService_GetOffiaccountReplyRule_Handler,
		},
		{
			MethodName: "UpdateOffiaccountReplyRule",
			Handler:    _HydraLcpService_UpdateOffiaccountReplyRule_Handler,
		},
		{
			MethodName: "GetOffiaccountReplyRuleList",
			Handler:    _HydraLcpService_GetOffiaccountReplyRuleList_Handler,
		},
		{
			MethodName: "SwitchOffiaccountReplyRule",
			Handler:    _HydraLcpService_SwitchOffiaccountReplyRule_Handler,
		},
		{
			MethodName: "SaveOffiaccountSubGeneralReply",
			Handler:    _HydraLcpService_SaveOffiaccountSubGeneralReply_Handler,
		},
		{
			MethodName: "GetOffiaccountSubGeneralReply",
			Handler:    _HydraLcpService_GetOffiaccountSubGeneralReply_Handler,
		},
		{
			MethodName: "DeleteOffiaccountSubGeneralReply",
			Handler:    _HydraLcpService_DeleteOffiaccountSubGeneralReply_Handler,
		},
		{
			MethodName: "GetJsConfig",
			Handler:    _HydraLcpService_GetJsConfig_Handler,
		},
		{
			MethodName: "GetJsTicket",
			Handler:    _HydraLcpService_GetJsTicket_Handler,
		},
		{
			MethodName: "SuperVerificationCodeForOms",
			Handler:    _HydraLcpService_SuperVerificationCodeForOms_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _HydraLcpService_AddUser_Handler,
		},
		{
			MethodName: "AddUser2",
			Handler:    _HydraLcpService_AddUser2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/hydra_lcp.proto",
}
