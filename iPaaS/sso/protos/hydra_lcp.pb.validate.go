// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/hydra_lcp.proto

package protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on UpdatePasswordByOldReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePasswordByOldReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OldPwd

	// no validation rules for NewPwd

	// no validation rules for YsId

	return nil
}

// UpdatePasswordByOldReqValidationError is the validation error returned by
// UpdatePasswordByOldReq.Validate if the designated constraints aren't met.
type UpdatePasswordByOldReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordByOldReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordByOldReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordByOldReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordByOldReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordByOldReqValidationError) ErrorName() string {
	return "UpdatePasswordByOldReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordByOldReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordByOldReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordByOldReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordByOldReqValidationError{}

// Validate checks the field values on ResetPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetPasswordReq) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetYsid()) < 1 {
		return ResetPasswordReqValidationError{
			field:  "Ysid",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetNewPwd()) < 1 {
		return ResetPasswordReqValidationError{
			field:  "NewPwd",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ResetPasswordReqValidationError is the validation error returned by
// ResetPasswordReq.Validate if the designated constraints aren't met.
type ResetPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordReqValidationError) ErrorName() string { return "ResetPasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e ResetPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordReqValidationError{}

// Validate checks the field values on GetUserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	return nil
}

// GetUserInfoReqValidationError is the validation error returned by
// GetUserInfoReq.Validate if the designated constraints aren't met.
type GetUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReqValidationError) ErrorName() string { return "GetUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReqValidationError{}

// Validate checks the field values on GetUserInfoBatchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserInfoBatchReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetUserInfoBatchReqValidationError is the validation error returned by
// GetUserInfoBatchReq.Validate if the designated constraints aren't met.
type GetUserInfoBatchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoBatchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoBatchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoBatchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoBatchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoBatchReqValidationError) ErrorName() string {
	return "GetUserInfoBatchReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoBatchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoBatchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoBatchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoBatchReqValidationError{}

// Validate checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUserReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	return nil
}

// ListUserReqValidationError is the validation error returned by
// ListUserReq.Validate if the designated constraints aren't met.
type ListUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReqValidationError) ErrorName() string { return "ListUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReqValidationError{}

// Validate checks the field values on UserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for Param

	return nil
}

// UserInfoReqValidationError is the validation error returned by
// UserInfoReq.Validate if the designated constraints aren't met.
type UserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReqValidationError) ErrorName() string { return "UserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReqValidationError{}

// Validate checks the field values on CheckPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CheckPasswordReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Password

	return nil
}

// CheckPasswordReqValidationError is the validation error returned by
// CheckPasswordReq.Validate if the designated constraints aren't met.
type CheckPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPasswordReqValidationError) ErrorName() string { return "CheckPasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPasswordReqValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for WechatUnionId

	// no validation rules for WechatOpenId

	// no validation rules for WechatNickName

	// no validation rules for RealName

	// no validation rules for UserName

	// no validation rules for DisplayUserName

	// no validation rules for HeadimgUrl

	// no validation rules for UserChannel

	// no validation rules for UserSource

	// no validation rules for UserReferer

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Company

	return nil
}

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on UserInfoBatch with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserInfoBatch) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUserInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInfoBatchValidationError{
					field:  fmt.Sprintf("UserInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// UserInfoBatchValidationError is the validation error returned by
// UserInfoBatch.Validate if the designated constraints aren't met.
type UserInfoBatchValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoBatchValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoBatchValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoBatchValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoBatchValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoBatchValidationError) ErrorName() string { return "UserInfoBatchValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoBatchValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoBatch.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoBatchValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoBatchValidationError{}

// Validate checks the field values on UserInfoList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserInfoList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUserInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInfoListValidationError{
					field:  fmt.Sprintf("UserInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	return nil
}

// UserInfoListValidationError is the validation error returned by
// UserInfoList.Validate if the designated constraints aren't met.
type UserInfoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoListValidationError) ErrorName() string { return "UserInfoListValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoListValidationError{}

// Validate checks the field values on WechatInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *WechatInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for WechatUnionId

	// no validation rules for WechatOpenId

	// no validation rules for WechatNickName

	return nil
}

// WechatInfoReqValidationError is the validation error returned by
// WechatInfoReq.Validate if the designated constraints aren't met.
type WechatInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WechatInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WechatInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WechatInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WechatInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WechatInfoReqValidationError) ErrorName() string { return "WechatInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e WechatInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWechatInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WechatInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WechatInfoReqValidationError{}

// Validate checks the field values on UpdatePasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdatePasswordReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for PasswordNew

	// no validation rules for Captcha

	return nil
}

// UpdatePasswordReqValidationError is the validation error returned by
// UpdatePasswordReq.Validate if the designated constraints aren't met.
type UpdatePasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordReqValidationError) ErrorName() string {
	return "UpdatePasswordReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordReqValidationError{}

// Validate checks the field values on QueryInfoByPhoneNumberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QueryInfoByPhoneNumberReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PhoneNumber

	return nil
}

// QueryInfoByPhoneNumberReqValidationError is the validation error returned by
// QueryInfoByPhoneNumberReq.Validate if the designated constraints aren't met.
type QueryInfoByPhoneNumberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryInfoByPhoneNumberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryInfoByPhoneNumberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryInfoByPhoneNumberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryInfoByPhoneNumberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryInfoByPhoneNumberReqValidationError) ErrorName() string {
	return "QueryInfoByPhoneNumberReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryInfoByPhoneNumberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryInfoByPhoneNumberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryInfoByPhoneNumberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryInfoByPhoneNumberReqValidationError{}

// Validate checks the field values on UpdatePhoneNumberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePhoneNumberReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for PhoneNumberNew

	// no validation rules for Captcha

	return nil
}

// UpdatePhoneNumberReqValidationError is the validation error returned by
// UpdatePhoneNumberReq.Validate if the designated constraints aren't met.
type UpdatePhoneNumberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePhoneNumberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePhoneNumberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePhoneNumberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePhoneNumberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePhoneNumberReqValidationError) ErrorName() string {
	return "UpdatePhoneNumberReqValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePhoneNumberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePhoneNumberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePhoneNumberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePhoneNumberReqValidationError{}

// Validate checks the field values on GetExternalUserInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetExternalUserInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	return nil
}

// GetExternalUserInfoReqValidationError is the validation error returned by
// GetExternalUserInfoReq.Validate if the designated constraints aren't met.
type GetExternalUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExternalUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExternalUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExternalUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExternalUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExternalUserInfoReqValidationError) ErrorName() string {
	return "GetExternalUserInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetExternalUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExternalUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExternalUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExternalUserInfoReqValidationError{}

// Validate checks the field values on GetExternalUserInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetExternalUserInfoReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for UserName

	return nil
}

// GetExternalUserInfoReplyValidationError is the validation error returned by
// GetExternalUserInfoReply.Validate if the designated constraints aren't met.
type GetExternalUserInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetExternalUserInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetExternalUserInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetExternalUserInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetExternalUserInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetExternalUserInfoReplyValidationError) ErrorName() string {
	return "GetExternalUserInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetExternalUserInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetExternalUserInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetExternalUserInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetExternalUserInfoReplyValidationError{}

// Validate checks the field values on CheckExternalUserExistReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckExternalUserExistReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserName

	return nil
}

// CheckExternalUserExistReqValidationError is the validation error returned by
// CheckExternalUserExistReq.Validate if the designated constraints aren't met.
type CheckExternalUserExistReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckExternalUserExistReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckExternalUserExistReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckExternalUserExistReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckExternalUserExistReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckExternalUserExistReqValidationError) ErrorName() string {
	return "CheckExternalUserExistReqValidationError"
}

// Error satisfies the builtin error interface
func (e CheckExternalUserExistReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckExternalUserExistReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckExternalUserExistReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckExternalUserExistReqValidationError{}

// Validate checks the field values on CheckExternalUserExistReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckExternalUserExistReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsExist

	return nil
}

// CheckExternalUserExistReplyValidationError is the validation error returned
// by CheckExternalUserExistReply.Validate if the designated constraints
// aren't met.
type CheckExternalUserExistReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckExternalUserExistReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckExternalUserExistReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckExternalUserExistReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckExternalUserExistReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckExternalUserExistReplyValidationError) ErrorName() string {
	return "CheckExternalUserExistReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckExternalUserExistReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckExternalUserExistReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckExternalUserExistReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckExternalUserExistReplyValidationError{}

// Validate checks the field values on AddUserFromPhoneReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserFromPhoneReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for ProductId

	// no validation rules for CompanyId

	return nil
}

// AddUserFromPhoneReqValidationError is the validation error returned by
// AddUserFromPhoneReq.Validate if the designated constraints aren't met.
type AddUserFromPhoneReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserFromPhoneReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserFromPhoneReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserFromPhoneReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserFromPhoneReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserFromPhoneReqValidationError) ErrorName() string {
	return "AddUserFromPhoneReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserFromPhoneReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserFromPhoneReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserFromPhoneReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserFromPhoneReqValidationError{}

// Validate checks the field values on VerifyPhoneCodeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyPhoneCodeReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for Code

	return nil
}

// VerifyPhoneCodeReqValidationError is the validation error returned by
// VerifyPhoneCodeReq.Validate if the designated constraints aren't met.
type VerifyPhoneCodeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPhoneCodeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPhoneCodeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPhoneCodeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPhoneCodeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPhoneCodeReqValidationError) ErrorName() string {
	return "VerifyPhoneCodeReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPhoneCodeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPhoneCodeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPhoneCodeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPhoneCodeReqValidationError{}

// Validate checks the field values on VerifyJwtTokenReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VerifyJwtTokenReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for Token

	return nil
}

// VerifyJwtTokenReqValidationError is the validation error returned by
// VerifyJwtTokenReq.Validate if the designated constraints aren't met.
type VerifyJwtTokenReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyJwtTokenReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyJwtTokenReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyJwtTokenReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyJwtTokenReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyJwtTokenReqValidationError) ErrorName() string {
	return "VerifyJwtTokenReqValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyJwtTokenReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyJwtTokenReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyJwtTokenReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyJwtTokenReqValidationError{}

// Validate checks the field values on VerifyPhoneCodeResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyPhoneCodeResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsSucceed

	// no validation rules for Token

	return nil
}

// VerifyPhoneCodeRespValidationError is the validation error returned by
// VerifyPhoneCodeResp.Validate if the designated constraints aren't met.
type VerifyPhoneCodeRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyPhoneCodeRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyPhoneCodeRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyPhoneCodeRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyPhoneCodeRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyPhoneCodeRespValidationError) ErrorName() string {
	return "VerifyPhoneCodeRespValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyPhoneCodeRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyPhoneCodeResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyPhoneCodeRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyPhoneCodeRespValidationError{}

// Validate checks the field values on SendSmsReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SendSmsReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for TplName

	// no validation rules for ProductId

	return nil
}

// SendSmsReqValidationError is the validation error returned by
// SendSmsReq.Validate if the designated constraints aren't met.
type SendSmsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsReqValidationError) ErrorName() string { return "SendSmsReqValidationError" }

// Error satisfies the builtin error interface
func (e SendSmsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsReqValidationError{}

// Validate checks the field values on SendSmsResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SendSmsResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsSucceed

	return nil
}

// SendSmsRespValidationError is the validation error returned by
// SendSmsResp.Validate if the designated constraints aren't met.
type SendSmsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendSmsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendSmsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendSmsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendSmsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendSmsRespValidationError) ErrorName() string { return "SendSmsRespValidationError" }

// Error satisfies the builtin error interface
func (e SendSmsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendSmsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendSmsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendSmsRespValidationError{}

// Validate checks the field values on GetOffiaccountBindingReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOffiaccountBindingReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for WechatOpenid

	// no validation rules for Platform

	// no validation rules for NotificationType

	// no validation rules for CompanyId

	return nil
}

// GetOffiaccountBindingReqValidationError is the validation error returned by
// GetOffiaccountBindingReq.Validate if the designated constraints aren't met.
type GetOffiaccountBindingReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountBindingReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountBindingReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountBindingReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountBindingReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountBindingReqValidationError) ErrorName() string {
	return "GetOffiaccountBindingReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountBindingReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountBindingReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountBindingReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountBindingReqValidationError{}

// Validate checks the field values on OffiaccountBinding with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OffiaccountBinding) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Platform

	// no validation rules for UserId

	// no validation rules for CreateBy

	// no validation rules for UpdateBy

	// no validation rules for CompanyId

	// no validation rules for CompanyIds

	// no validation rules for WechatOpenid

	// no validation rules for WechatUnionid

	// no validation rules for WechatNickname

	// no validation rules for WechatHeadimgurl

	// no validation rules for WechatLanguage

	// no validation rules for UserGender

	// no validation rules for UserCity

	// no validation rules for NotificationType

	// no validation rules for NotificationActivated

	// no validation rules for IsSubscribed

	// no validation rules for SubscribeScene

	if v, ok := interface{}(m.GetSubscribeTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OffiaccountBindingValidationError{
				field:  "SubscribeTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUnsubscribeTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OffiaccountBindingValidationError{
				field:  "UnsubscribeTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetActivateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OffiaccountBindingValidationError{
				field:  "ActivateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDeactivateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OffiaccountBindingValidationError{
				field:  "DeactivateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OffiaccountBindingValidationError is the validation error returned by
// OffiaccountBinding.Validate if the designated constraints aren't met.
type OffiaccountBindingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OffiaccountBindingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OffiaccountBindingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OffiaccountBindingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OffiaccountBindingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OffiaccountBindingValidationError) ErrorName() string {
	return "OffiaccountBindingValidationError"
}

// Error satisfies the builtin error interface
func (e OffiaccountBindingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffiaccountBinding.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OffiaccountBindingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OffiaccountBindingValidationError{}

// Validate checks the field values on GetOffiaccountBalanceSubListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOffiaccountBalanceSubListReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for Platform

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOffiaccountBalanceSubListReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOffiaccountBalanceSubListReqValidationError is the validation error
// returned by GetOffiaccountBalanceSubListReq.Validate if the designated
// constraints aren't met.
type GetOffiaccountBalanceSubListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountBalanceSubListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountBalanceSubListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountBalanceSubListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountBalanceSubListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountBalanceSubListReqValidationError) ErrorName() string {
	return "GetOffiaccountBalanceSubListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountBalanceSubListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountBalanceSubListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountBalanceSubListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountBalanceSubListReqValidationError{}

// Validate checks the field values on GetOffiaccountBalanceSubListResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetOffiaccountBalanceSubListResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOffiaccountBindings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOffiaccountBalanceSubListRespValidationError{
					field:  fmt.Sprintf("OffiaccountBindings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOffiaccountBalanceSubListRespValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOffiaccountBalanceSubListRespValidationError is the validation error
// returned by GetOffiaccountBalanceSubListResp.Validate if the designated
// constraints aren't met.
type GetOffiaccountBalanceSubListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountBalanceSubListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountBalanceSubListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountBalanceSubListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountBalanceSubListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountBalanceSubListRespValidationError) ErrorName() string {
	return "GetOffiaccountBalanceSubListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountBalanceSubListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountBalanceSubListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountBalanceSubListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountBalanceSubListRespValidationError{}

// Validate checks the field values on NotificationContent with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *NotificationContent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for First

	// no validation rules for Keyword1

	// no validation rules for Keyword2

	// no validation rules for Keyword3

	// no validation rules for Keyword4

	// no validation rules for Remark

	return nil
}

// NotificationContentValidationError is the validation error returned by
// NotificationContent.Validate if the designated constraints aren't met.
type NotificationContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationContentValidationError) ErrorName() string {
	return "NotificationContentValidationError"
}

// Error satisfies the builtin error interface
func (e NotificationContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotificationContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationContentValidationError{}

// Validate checks the field values on SendOffiaccountNotificationReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendOffiaccountNotificationReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for NotificationType

	if v, ok := interface{}(m.GetNotificationContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendOffiaccountNotificationReqValidationError{
				field:  "NotificationContent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendOffiaccountNotificationReqValidationError is the validation error
// returned by SendOffiaccountNotificationReq.Validate if the designated
// constraints aren't met.
type SendOffiaccountNotificationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendOffiaccountNotificationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendOffiaccountNotificationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendOffiaccountNotificationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendOffiaccountNotificationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendOffiaccountNotificationReqValidationError) ErrorName() string {
	return "SendOffiaccountNotificationReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendOffiaccountNotificationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendOffiaccountNotificationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendOffiaccountNotificationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendOffiaccountNotificationReqValidationError{}

// Validate checks the field values on SendOffiaccountNotificationResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendOffiaccountNotificationResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NotificationId

	return nil
}

// SendOffiaccountNotificationRespValidationError is the validation error
// returned by SendOffiaccountNotificationResp.Validate if the designated
// constraints aren't met.
type SendOffiaccountNotificationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendOffiaccountNotificationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendOffiaccountNotificationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendOffiaccountNotificationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendOffiaccountNotificationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendOffiaccountNotificationRespValidationError) ErrorName() string {
	return "SendOffiaccountNotificationRespValidationError"
}

// Error satisfies the builtin error interface
func (e SendOffiaccountNotificationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendOffiaccountNotificationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendOffiaccountNotificationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendOffiaccountNotificationRespValidationError{}

// Validate checks the field values on SendOffiaccountBalanceNotificationsReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SendOffiaccountBalanceNotificationsReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for Platform

	// no validation rules for NotificationType

	if v, ok := interface{}(m.GetNotificationContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendOffiaccountBalanceNotificationsReqValidationError{
				field:  "NotificationContent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendOffiaccountBalanceNotificationsReqValidationError is the validation
// error returned by SendOffiaccountBalanceNotificationsReq.Validate if the
// designated constraints aren't met.
type SendOffiaccountBalanceNotificationsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendOffiaccountBalanceNotificationsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendOffiaccountBalanceNotificationsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendOffiaccountBalanceNotificationsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendOffiaccountBalanceNotificationsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendOffiaccountBalanceNotificationsReqValidationError) ErrorName() string {
	return "SendOffiaccountBalanceNotificationsReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendOffiaccountBalanceNotificationsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendOffiaccountBalanceNotificationsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendOffiaccountBalanceNotificationsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendOffiaccountBalanceNotificationsReqValidationError{}

// Validate checks the field values on SendOffiaccountVisJobNotificationReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SendOffiaccountVisJobNotificationReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Platform

	// no validation rules for NotificationType

	if v, ok := interface{}(m.GetNotificationContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendOffiaccountVisJobNotificationReqValidationError{
				field:  "NotificationContent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendOffiaccountVisJobNotificationReqValidationError is the validation error
// returned by SendOffiaccountVisJobNotificationReq.Validate if the designated
// constraints aren't met.
type SendOffiaccountVisJobNotificationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendOffiaccountVisJobNotificationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendOffiaccountVisJobNotificationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendOffiaccountVisJobNotificationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendOffiaccountVisJobNotificationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendOffiaccountVisJobNotificationReqValidationError) ErrorName() string {
	return "SendOffiaccountVisJobNotificationReqValidationError"
}

// Error satisfies the builtin error interface
func (e SendOffiaccountVisJobNotificationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendOffiaccountVisJobNotificationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendOffiaccountVisJobNotificationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendOffiaccountVisJobNotificationReqValidationError{}

// Validate checks the field values on DeactivateOffiaccountNotificationReq
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DeactivateOffiaccountNotificationReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Platform

	// no validation rules for UserId

	// no validation rules for WechatOpenid

	// no validation rules for NotificationType

	// no validation rules for CompanyId

	return nil
}

// DeactivateOffiaccountNotificationReqValidationError is the validation error
// returned by DeactivateOffiaccountNotificationReq.Validate if the designated
// constraints aren't met.
type DeactivateOffiaccountNotificationReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateOffiaccountNotificationReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateOffiaccountNotificationReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateOffiaccountNotificationReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateOffiaccountNotificationReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateOffiaccountNotificationReqValidationError) ErrorName() string {
	return "DeactivateOffiaccountNotificationReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateOffiaccountNotificationReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateOffiaccountNotificationReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateOffiaccountNotificationReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateOffiaccountNotificationReqValidationError{}

// Validate checks the field values on DeactivateOffiaccountNotificationResp
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *DeactivateOffiaccountNotificationResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UpdateNum

	return nil
}

// DeactivateOffiaccountNotificationRespValidationError is the validation error
// returned by DeactivateOffiaccountNotificationResp.Validate if the
// designated constraints aren't met.
type DeactivateOffiaccountNotificationRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateOffiaccountNotificationRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateOffiaccountNotificationRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateOffiaccountNotificationRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateOffiaccountNotificationRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateOffiaccountNotificationRespValidationError) ErrorName() string {
	return "DeactivateOffiaccountNotificationRespValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateOffiaccountNotificationRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateOffiaccountNotificationResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateOffiaccountNotificationRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateOffiaccountNotificationRespValidationError{}

// Validate checks the field values on JobToNotify with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *JobToNotify) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for JobId

	// no validation rules for Status

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobToNotifyValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobToNotifyValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// JobToNotifyValidationError is the validation error returned by
// JobToNotify.Validate if the designated constraints aren't met.
type JobToNotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobToNotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobToNotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobToNotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobToNotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobToNotifyValidationError) ErrorName() string { return "JobToNotifyValidationError" }

// Error satisfies the builtin error interface
func (e JobToNotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobToNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobToNotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobToNotifyValidationError{}

// Validate checks the field values on AddJobToNotifyReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddJobToNotifyReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for JobId

	// no validation rules for CompanyId

	return nil
}

// AddJobToNotifyReqValidationError is the validation error returned by
// AddJobToNotifyReq.Validate if the designated constraints aren't met.
type AddJobToNotifyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddJobToNotifyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddJobToNotifyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddJobToNotifyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddJobToNotifyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddJobToNotifyReqValidationError) ErrorName() string {
	return "AddJobToNotifyReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddJobToNotifyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddJobToNotifyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddJobToNotifyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddJobToNotifyReqValidationError{}

// Validate checks the field values on GetJobToNotifyReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetJobToNotifyReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for JobId

	return nil
}

// GetJobToNotifyReqValidationError is the validation error returned by
// GetJobToNotifyReq.Validate if the designated constraints aren't met.
type GetJobToNotifyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobToNotifyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobToNotifyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobToNotifyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobToNotifyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobToNotifyReqValidationError) ErrorName() string {
	return "GetJobToNotifyReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobToNotifyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobToNotifyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobToNotifyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobToNotifyReqValidationError{}

// Validate checks the field values on SetJobToNotifyStatusReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetJobToNotifyStatusReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for JobId

	// no validation rules for Status

	return nil
}

// SetJobToNotifyStatusReqValidationError is the validation error returned by
// SetJobToNotifyStatusReq.Validate if the designated constraints aren't met.
type SetJobToNotifyStatusReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobToNotifyStatusReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobToNotifyStatusReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobToNotifyStatusReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobToNotifyStatusReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobToNotifyStatusReqValidationError) ErrorName() string {
	return "SetJobToNotifyStatusReqValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobToNotifyStatusReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobToNotifyStatusReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobToNotifyStatusReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobToNotifyStatusReqValidationError{}

// Validate checks the field values on SetJobToNotifyStatusResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetJobToNotifyStatusResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UpdateNum

	return nil
}

// SetJobToNotifyStatusRespValidationError is the validation error returned by
// SetJobToNotifyStatusResp.Validate if the designated constraints aren't met.
type SetJobToNotifyStatusRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobToNotifyStatusRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobToNotifyStatusRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobToNotifyStatusRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobToNotifyStatusRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobToNotifyStatusRespValidationError) ErrorName() string {
	return "SetJobToNotifyStatusRespValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobToNotifyStatusRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobToNotifyStatusResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobToNotifyStatusRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobToNotifyStatusRespValidationError{}

// Validate checks the field values on GetOffiaccountAKReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOffiaccountAKReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	return nil
}

// GetOffiaccountAKReqValidationError is the validation error returned by
// GetOffiaccountAKReq.Validate if the designated constraints aren't met.
type GetOffiaccountAKReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountAKReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountAKReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountAKReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountAKReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountAKReqValidationError) ErrorName() string {
	return "GetOffiaccountAKReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountAKReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountAKReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountAKReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountAKReqValidationError{}

// Validate checks the field values on GetOffiaccountAKResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOffiaccountAKResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	return nil
}

// GetOffiaccountAKRespValidationError is the validation error returned by
// GetOffiaccountAKResp.Validate if the designated constraints aren't met.
type GetOffiaccountAKRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountAKRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountAKRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountAKRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountAKRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountAKRespValidationError) ErrorName() string {
	return "GetOffiaccountAKRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountAKRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountAKResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountAKRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountAKRespValidationError{}

// Validate checks the field values on SaveOffiaccountMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SaveOffiaccountMenuReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppId

	// no validation rules for Button

	// no validation rules for CreatorId

	// no validation rules for Publish

	return nil
}

// SaveOffiaccountMenuReqValidationError is the validation error returned by
// SaveOffiaccountMenuReq.Validate if the designated constraints aren't met.
type SaveOffiaccountMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveOffiaccountMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveOffiaccountMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveOffiaccountMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveOffiaccountMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveOffiaccountMenuReqValidationError) ErrorName() string {
	return "SaveOffiaccountMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e SaveOffiaccountMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveOffiaccountMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveOffiaccountMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveOffiaccountMenuReqValidationError{}

// Validate checks the field values on OffiaccountMenu with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OffiaccountMenu) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AppId

	// no validation rules for Button

	// no validation rules for CreatorId

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OffiaccountMenuValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OffiaccountMenuValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OffiaccountMenuValidationError is the validation error returned by
// OffiaccountMenu.Validate if the designated constraints aren't met.
type OffiaccountMenuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OffiaccountMenuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OffiaccountMenuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OffiaccountMenuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OffiaccountMenuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OffiaccountMenuValidationError) ErrorName() string { return "OffiaccountMenuValidationError" }

// Error satisfies the builtin error interface
func (e OffiaccountMenuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffiaccountMenu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OffiaccountMenuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OffiaccountMenuValidationError{}

// Validate checks the field values on GetOffiaccountMenuReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOffiaccountMenuReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	return nil
}

// GetOffiaccountMenuReqValidationError is the validation error returned by
// GetOffiaccountMenuReq.Validate if the designated constraints aren't met.
type GetOffiaccountMenuReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountMenuReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountMenuReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountMenuReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountMenuReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountMenuReqValidationError) ErrorName() string {
	return "GetOffiaccountMenuReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountMenuReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountMenuReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountMenuReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountMenuReqValidationError{}

// Validate checks the field values on OffiaccountReplyRule with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *OffiaccountReplyRule) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for RuleName

	// no validation rules for Keywords

	// no validation rules for ReplyList

	// no validation rules for ReplyMode

	// no validation rules for IsActive

	// no validation rules for CreatorId

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OffiaccountReplyRuleValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OffiaccountReplyRuleValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OffiaccountReplyRuleValidationError is the validation error returned by
// OffiaccountReplyRule.Validate if the designated constraints aren't met.
type OffiaccountReplyRuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OffiaccountReplyRuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OffiaccountReplyRuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OffiaccountReplyRuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OffiaccountReplyRuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OffiaccountReplyRuleValidationError) ErrorName() string {
	return "OffiaccountReplyRuleValidationError"
}

// Error satisfies the builtin error interface
func (e OffiaccountReplyRuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOffiaccountReplyRule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OffiaccountReplyRuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OffiaccountReplyRuleValidationError{}

// Validate checks the field values on AddOffiaccountReplyRuleReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOffiaccountReplyRuleReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for RuleName

	// no validation rules for Keywords

	// no validation rules for ReplyList

	// no validation rules for ReplyMode

	return nil
}

// AddOffiaccountReplyRuleReqValidationError is the validation error returned
// by AddOffiaccountReplyRuleReq.Validate if the designated constraints aren't met.
type AddOffiaccountReplyRuleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOffiaccountReplyRuleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOffiaccountReplyRuleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOffiaccountReplyRuleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOffiaccountReplyRuleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOffiaccountReplyRuleReqValidationError) ErrorName() string {
	return "AddOffiaccountReplyRuleReqValidationError"
}

// Error satisfies the builtin error interface
func (e AddOffiaccountReplyRuleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOffiaccountReplyRuleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOffiaccountReplyRuleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOffiaccountReplyRuleReqValidationError{}

// Validate checks the field values on GetOffiaccountReplyRuleReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOffiaccountReplyRuleReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RuleId

	return nil
}

// GetOffiaccountReplyRuleReqValidationError is the validation error returned
// by GetOffiaccountReplyRuleReq.Validate if the designated constraints aren't met.
type GetOffiaccountReplyRuleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountReplyRuleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountReplyRuleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountReplyRuleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountReplyRuleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountReplyRuleReqValidationError) ErrorName() string {
	return "GetOffiaccountReplyRuleReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountReplyRuleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountReplyRuleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountReplyRuleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountReplyRuleReqValidationError{}

// Validate checks the field values on GetOffiaccountReplyRuleListReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOffiaccountReplyRuleListReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOffiaccountReplyRuleListReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOffiaccountReplyRuleListReqValidationError is the validation error
// returned by GetOffiaccountReplyRuleListReq.Validate if the designated
// constraints aren't met.
type GetOffiaccountReplyRuleListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountReplyRuleListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountReplyRuleListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountReplyRuleListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountReplyRuleListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountReplyRuleListReqValidationError) ErrorName() string {
	return "GetOffiaccountReplyRuleListReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountReplyRuleListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountReplyRuleListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountReplyRuleListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountReplyRuleListReqValidationError{}

// Validate checks the field values on GetOffiaccountReplyRuleListResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOffiaccountReplyRuleListResp) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOffiaccountReplyRules() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOffiaccountReplyRuleListRespValidationError{
					field:  fmt.Sprintf("OffiaccountReplyRules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOffiaccountReplyRuleListRespValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOffiaccountReplyRuleListRespValidationError is the validation error
// returned by GetOffiaccountReplyRuleListResp.Validate if the designated
// constraints aren't met.
type GetOffiaccountReplyRuleListRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountReplyRuleListRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountReplyRuleListRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountReplyRuleListRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountReplyRuleListRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountReplyRuleListRespValidationError) ErrorName() string {
	return "GetOffiaccountReplyRuleListRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountReplyRuleListRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountReplyRuleListResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountReplyRuleListRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountReplyRuleListRespValidationError{}

// Validate checks the field values on SwitchOffiaccountReplyRuleReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SwitchOffiaccountReplyRuleReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RuleId

	return nil
}

// SwitchOffiaccountReplyRuleReqValidationError is the validation error
// returned by SwitchOffiaccountReplyRuleReq.Validate if the designated
// constraints aren't met.
type SwitchOffiaccountReplyRuleReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwitchOffiaccountReplyRuleReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwitchOffiaccountReplyRuleReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwitchOffiaccountReplyRuleReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwitchOffiaccountReplyRuleReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwitchOffiaccountReplyRuleReqValidationError) ErrorName() string {
	return "SwitchOffiaccountReplyRuleReqValidationError"
}

// Error satisfies the builtin error interface
func (e SwitchOffiaccountReplyRuleReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwitchOffiaccountReplyRuleReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwitchOffiaccountReplyRuleReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwitchOffiaccountReplyRuleReqValidationError{}

// Validate checks the field values on SaveOffiaccountSubGeneralReplyReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SaveOffiaccountSubGeneralReplyReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ReplyMode

	// no validation rules for ReplyList

	return nil
}

// SaveOffiaccountSubGeneralReplyReqValidationError is the validation error
// returned by SaveOffiaccountSubGeneralReplyReq.Validate if the designated
// constraints aren't met.
type SaveOffiaccountSubGeneralReplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveOffiaccountSubGeneralReplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveOffiaccountSubGeneralReplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveOffiaccountSubGeneralReplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveOffiaccountSubGeneralReplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveOffiaccountSubGeneralReplyReqValidationError) ErrorName() string {
	return "SaveOffiaccountSubGeneralReplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e SaveOffiaccountSubGeneralReplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveOffiaccountSubGeneralReplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveOffiaccountSubGeneralReplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveOffiaccountSubGeneralReplyReqValidationError{}

// Validate checks the field values on GetOffiaccountSubGeneralReplyReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetOffiaccountSubGeneralReplyReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReplyMode

	return nil
}

// GetOffiaccountSubGeneralReplyReqValidationError is the validation error
// returned by GetOffiaccountSubGeneralReplyReq.Validate if the designated
// constraints aren't met.
type GetOffiaccountSubGeneralReplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOffiaccountSubGeneralReplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOffiaccountSubGeneralReplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOffiaccountSubGeneralReplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOffiaccountSubGeneralReplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOffiaccountSubGeneralReplyReqValidationError) ErrorName() string {
	return "GetOffiaccountSubGeneralReplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetOffiaccountSubGeneralReplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOffiaccountSubGeneralReplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOffiaccountSubGeneralReplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOffiaccountSubGeneralReplyReqValidationError{}

// Validate checks the field values on DeleteOffiaccountSubGeneralReplyReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *DeleteOffiaccountSubGeneralReplyReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ReplyMode

	return nil
}

// DeleteOffiaccountSubGeneralReplyReqValidationError is the validation error
// returned by DeleteOffiaccountSubGeneralReplyReq.Validate if the designated
// constraints aren't met.
type DeleteOffiaccountSubGeneralReplyReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOffiaccountSubGeneralReplyReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOffiaccountSubGeneralReplyReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOffiaccountSubGeneralReplyReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOffiaccountSubGeneralReplyReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOffiaccountSubGeneralReplyReqValidationError) ErrorName() string {
	return "DeleteOffiaccountSubGeneralReplyReqValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOffiaccountSubGeneralReplyReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOffiaccountSubGeneralReplyReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOffiaccountSubGeneralReplyReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOffiaccountSubGeneralReplyReqValidationError{}

// Validate checks the field values on HandleIDMCallbackReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HandleIDMCallbackReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SessionState

	// no validation rules for Code

	// no validation rules for State

	return nil
}

// HandleIDMCallbackReqValidationError is the validation error returned by
// HandleIDMCallbackReq.Validate if the designated constraints aren't met.
type HandleIDMCallbackReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleIDMCallbackReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleIDMCallbackReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleIDMCallbackReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleIDMCallbackReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleIDMCallbackReqValidationError) ErrorName() string {
	return "HandleIDMCallbackReqValidationError"
}

// Error satisfies the builtin error interface
func (e HandleIDMCallbackReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleIDMCallbackReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleIDMCallbackReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleIDMCallbackReqValidationError{}

// Validate checks the field values on HandleIDMCallbackResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *HandleIDMCallbackResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	return nil
}

// HandleIDMCallbackRespValidationError is the validation error returned by
// HandleIDMCallbackResp.Validate if the designated constraints aren't met.
type HandleIDMCallbackRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HandleIDMCallbackRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HandleIDMCallbackRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HandleIDMCallbackRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HandleIDMCallbackRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HandleIDMCallbackRespValidationError) ErrorName() string {
	return "HandleIDMCallbackRespValidationError"
}

// Error satisfies the builtin error interface
func (e HandleIDMCallbackRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHandleIDMCallbackResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HandleIDMCallbackRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HandleIDMCallbackRespValidationError{}

// Validate checks the field values on SyncIDMUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SyncIDMUserReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SyncIDMUserReqValidationError is the validation error returned by
// SyncIDMUserReq.Validate if the designated constraints aren't met.
type SyncIDMUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncIDMUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncIDMUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncIDMUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncIDMUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncIDMUserReqValidationError) ErrorName() string { return "SyncIDMUserReqValidationError" }

// Error satisfies the builtin error interface
func (e SyncIDMUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncIDMUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncIDMUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncIDMUserReqValidationError{}

// Validate checks the field values on SyncIDMUserResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SyncIDMUserResp) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SyncIDMUserRespValidationError is the validation error returned by
// SyncIDMUserResp.Validate if the designated constraints aren't met.
type SyncIDMUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncIDMUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncIDMUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncIDMUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncIDMUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncIDMUserRespValidationError) ErrorName() string { return "SyncIDMUserRespValidationError" }

// Error satisfies the builtin error interface
func (e SyncIDMUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncIDMUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncIDMUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncIDMUserRespValidationError{}

// Validate checks the field values on GetJsConfigReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetJsConfigReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Uri

	return nil
}

// GetJsConfigReqValidationError is the validation error returned by
// GetJsConfigReq.Validate if the designated constraints aren't met.
type GetJsConfigReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJsConfigReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJsConfigReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJsConfigReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJsConfigReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJsConfigReqValidationError) ErrorName() string { return "GetJsConfigReqValidationError" }

// Error satisfies the builtin error interface
func (e GetJsConfigReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJsConfigReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJsConfigReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJsConfigReqValidationError{}

// Validate checks the field values on GetJsConfigResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetJsConfigResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	// no validation rules for Timestamp

	// no validation rules for NonceStr

	// no validation rules for Signature

	return nil
}

// GetJsConfigRespValidationError is the validation error returned by
// GetJsConfigResp.Validate if the designated constraints aren't met.
type GetJsConfigRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJsConfigRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJsConfigRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJsConfigRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJsConfigRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJsConfigRespValidationError) ErrorName() string { return "GetJsConfigRespValidationError" }

// Error satisfies the builtin error interface
func (e GetJsConfigRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJsConfigResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJsConfigRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJsConfigRespValidationError{}

// Validate checks the field values on GetJsTicketReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetJsTicketReq) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetJsTicketReqValidationError is the validation error returned by
// GetJsTicketReq.Validate if the designated constraints aren't met.
type GetJsTicketReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJsTicketReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJsTicketReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJsTicketReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJsTicketReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJsTicketReqValidationError) ErrorName() string { return "GetJsTicketReqValidationError" }

// Error satisfies the builtin error interface
func (e GetJsTicketReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJsTicketReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJsTicketReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJsTicketReqValidationError{}

// Validate checks the field values on GetJsTicketResp with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetJsTicketResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ticket

	return nil
}

// GetJsTicketRespValidationError is the validation error returned by
// GetJsTicketResp.Validate if the designated constraints aren't met.
type GetJsTicketRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJsTicketRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJsTicketRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJsTicketRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJsTicketRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJsTicketRespValidationError) ErrorName() string { return "GetJsTicketRespValidationError" }

// Error satisfies the builtin error interface
func (e GetJsTicketRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJsTicketResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJsTicketRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJsTicketRespValidationError{}

// Validate checks the field values on SuperVerificationCodeForOmsReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SuperVerificationCodeForOmsReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	return nil
}

// SuperVerificationCodeForOmsReqValidationError is the validation error
// returned by SuperVerificationCodeForOmsReq.Validate if the designated
// constraints aren't met.
type SuperVerificationCodeForOmsReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuperVerificationCodeForOmsReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuperVerificationCodeForOmsReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuperVerificationCodeForOmsReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuperVerificationCodeForOmsReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuperVerificationCodeForOmsReqValidationError) ErrorName() string {
	return "SuperVerificationCodeForOmsReqValidationError"
}

// Error satisfies the builtin error interface
func (e SuperVerificationCodeForOmsReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuperVerificationCodeForOmsReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuperVerificationCodeForOmsReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuperVerificationCodeForOmsReqValidationError{}

// Validate checks the field values on SuperVerificationCodeForOmsResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SuperVerificationCodeForOmsResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	return nil
}

// SuperVerificationCodeForOmsRespValidationError is the validation error
// returned by SuperVerificationCodeForOmsResp.Validate if the designated
// constraints aren't met.
type SuperVerificationCodeForOmsRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SuperVerificationCodeForOmsRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SuperVerificationCodeForOmsRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SuperVerificationCodeForOmsRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SuperVerificationCodeForOmsRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SuperVerificationCodeForOmsRespValidationError) ErrorName() string {
	return "SuperVerificationCodeForOmsRespValidationError"
}

// Error satisfies the builtin error interface
func (e SuperVerificationCodeForOmsRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSuperVerificationCodeForOmsResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SuperVerificationCodeForOmsRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SuperVerificationCodeForOmsRespValidationError{}

// Validate checks the field values on AddUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for Password

	// no validation rules for UserSource

	// no validation rules for UserChannel

	// no validation rules for Name

	// no validation rules for CompanyName

	// no validation rules for UnifiedSocialCreditCode

	// no validation rules for Email

	return nil
}

// AddUserReqValidationError is the validation error returned by
// AddUserReq.Validate if the designated constraints aren't met.
type AddUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserReqValidationError) ErrorName() string { return "AddUserReqValidationError" }

// Error satisfies the builtin error interface
func (e AddUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserReqValidationError{}

// Validate checks the field values on AddUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddUserResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// AddUserRespValidationError is the validation error returned by
// AddUserResp.Validate if the designated constraints aren't met.
type AddUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRespValidationError) ErrorName() string { return "AddUserRespValidationError" }

// Error satisfies the builtin error interface
func (e AddUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRespValidationError{}
