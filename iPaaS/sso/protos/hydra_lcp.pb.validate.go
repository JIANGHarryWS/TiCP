// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/hydra_lcp.proto

package protos

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on GetUserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	return nil
}

// GetUserInfoReqValidationError is the validation error returned by
// GetUserInfoReq.Validate if the designated constraints aren't met.
type GetUserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoReqValidationError) ErrorName() string { return "GetUserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetUserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoReqValidationError{}

// Validate checks the field values on ListUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUserReq) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserReqValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	return nil
}

// ListUserReqValidationError is the validation error returned by
// ListUserReq.Validate if the designated constraints aren't met.
type ListUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReqValidationError) ErrorName() string { return "ListUserReqValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReqValidationError{}

// Validate checks the field values on UserInfoReq with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for Param

	return nil
}

// UserInfoReqValidationError is the validation error returned by
// UserInfoReq.Validate if the designated constraints aren't met.
type UserInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoReqValidationError) ErrorName() string { return "UserInfoReqValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoReqValidationError{}

// Validate checks the field values on CheckPasswordReq with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CheckPasswordReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Password

	return nil
}

// CheckPasswordReqValidationError is the validation error returned by
// CheckPasswordReq.Validate if the designated constraints aren't met.
type CheckPasswordReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckPasswordReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckPasswordReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckPasswordReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckPasswordReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckPasswordReqValidationError) ErrorName() string { return "CheckPasswordReqValidationError" }

// Error satisfies the builtin error interface
func (e CheckPasswordReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckPasswordReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckPasswordReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckPasswordReqValidationError{}

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ysid

	// no validation rules for Name

	// no validation rules for Email

	// no validation rules for Phone

	// no validation rules for WechatUnionId

	// no validation rules for WechatOpenId

	// no validation rules for WechatNickName

	// no validation rules for RealName

	// no validation rules for UserName

	// no validation rules for DisplayUserName

	// no validation rules for HeadimgUrl

	// no validation rules for UserChannel

	// no validation rules for UserSource

	// no validation rules for UserReferer

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Company

	return nil
}

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on UserInfoList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UserInfoList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUserInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInfoListValidationError{
					field:  fmt.Sprintf("UserInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	return nil
}

// UserInfoListValidationError is the validation error returned by
// UserInfoList.Validate if the designated constraints aren't met.
type UserInfoListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoListValidationError) ErrorName() string { return "UserInfoListValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoListValidationError{}

// Validate checks the field values on QueryInfoByPhoneNumberReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QueryInfoByPhoneNumberReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PhoneNumber

	return nil
}

// QueryInfoByPhoneNumberReqValidationError is the validation error returned by
// QueryInfoByPhoneNumberReq.Validate if the designated constraints aren't met.
type QueryInfoByPhoneNumberReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryInfoByPhoneNumberReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryInfoByPhoneNumberReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryInfoByPhoneNumberReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryInfoByPhoneNumberReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryInfoByPhoneNumberReqValidationError) ErrorName() string {
	return "QueryInfoByPhoneNumberReqValidationError"
}

// Error satisfies the builtin error interface
func (e QueryInfoByPhoneNumberReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryInfoByPhoneNumberReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryInfoByPhoneNumberReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryInfoByPhoneNumberReqValidationError{}

// Validate checks the field values on AddUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddUserReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for Password

	// no validation rules for UserSource

	// no validation rules for UserChannel

	// no validation rules for Name

	// no validation rules for CompanyName

	// no validation rules for UnifiedSocialCreditCode

	// no validation rules for Email

	return nil
}

// AddUserReqValidationError is the validation error returned by
// AddUserReq.Validate if the designated constraints aren't met.
type AddUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserReqValidationError) ErrorName() string { return "AddUserReqValidationError" }

// Error satisfies the builtin error interface
func (e AddUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserReqValidationError{}

// Validate checks the field values on AddUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddUserResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// AddUserRespValidationError is the validation error returned by
// AddUserResp.Validate if the designated constraints aren't met.
type AddUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRespValidationError) ErrorName() string { return "AddUserRespValidationError" }

// Error satisfies the builtin error interface
func (e AddUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRespValidationError{}
