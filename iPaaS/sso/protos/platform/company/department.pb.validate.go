// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/department.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Department with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Department) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CompanyId

	// no validation rules for Status

	// no validation rules for Name

	// no validation rules for Remark

	// no validation rules for ModifyUid

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DepartmentValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateUid

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DepartmentValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DepartmentValidationError is the validation error returned by
// Department.Validate if the designated constraints aren't met.
type DepartmentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentValidationError) ErrorName() string { return "DepartmentValidationError" }

// Error satisfies the builtin error interface
func (e DepartmentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentValidationError{}

// Validate checks the field values on DepartmentUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *DepartmentUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for RealName

	// no validation rules for Phone

	// no validation rules for Email

	if v, ok := interface{}(m.GetJoinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DepartmentUserValidationError{
				field:  "JoinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserName

	// no validation rules for DisplayUserName

	return nil
}

// DepartmentUserValidationError is the validation error returned by
// DepartmentUser.Validate if the designated constraints aren't met.
type DepartmentUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentUserValidationError) ErrorName() string { return "DepartmentUserValidationError" }

// Error satisfies the builtin error interface
func (e DepartmentUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartmentUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentUserValidationError{}

// Validate checks the field values on GetDepartmentListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDepartmentListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for Status

	// no validation rules for NameKey

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepartmentListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDepartmentListRequestValidationError is the validation error returned by
// GetDepartmentListRequest.Validate if the designated constraints aren't met.
type GetDepartmentListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentListRequestValidationError) ErrorName() string {
	return "GetDepartmentListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentListRequestValidationError{}

// Validate checks the field values on GetDepartmentListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDepartmentListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDepartmentListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepartmentListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDepartmentListResponseValidationError is the validation error returned by
// GetDepartmentListResponse.Validate if the designated constraints aren't met.
type GetDepartmentListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentListResponseValidationError) ErrorName() string {
	return "GetDepartmentListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentListResponseValidationError{}

// Validate checks the field values on GetDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDepartmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DepartmentId

	return nil
}

// GetDepartmentRequestValidationError is the validation error returned by
// GetDepartmentRequest.Validate if the designated constraints aren't met.
type GetDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentRequestValidationError) ErrorName() string {
	return "GetDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentRequestValidationError{}

// Validate checks the field values on GetDepartmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDepartmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDepartment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepartmentResponseValidationError{
				field:  "Department",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDepartmentResponseValidationError is the validation error returned by
// GetDepartmentResponse.Validate if the designated constraints aren't met.
type GetDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentResponseValidationError) ErrorName() string {
	return "GetDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentResponseValidationError{}

// Validate checks the field values on GetDepartmentUserListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDepartmentUserListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DepartmentId

	// no validation rules for Key

	// no validation rules for CompanyId

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepartmentUserListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDepartmentUserListRequestValidationError is the validation error returned
// by GetDepartmentUserListRequest.Validate if the designated constraints
// aren't met.
type GetDepartmentUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentUserListRequestValidationError) ErrorName() string {
	return "GetDepartmentUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentUserListRequestValidationError{}

// Validate checks the field values on GetDepartmentUserListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDepartmentUserListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDepartmentUserListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDepartmentUserListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDepartmentUserListResponseValidationError is the validation error
// returned by GetDepartmentUserListResponse.Validate if the designated
// constraints aren't met.
type GetDepartmentUserListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDepartmentUserListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDepartmentUserListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDepartmentUserListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDepartmentUserListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDepartmentUserListResponseValidationError) ErrorName() string {
	return "GetDepartmentUserListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDepartmentUserListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDepartmentUserListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDepartmentUserListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDepartmentUserListResponseValidationError{}

// Validate checks the field values on ModifyDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ModifyDepartmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DepartmentId

	// no validation rules for Name

	// no validation rules for Remark

	// no validation rules for OpUserId

	return nil
}

// ModifyDepartmentRequestValidationError is the validation error returned by
// ModifyDepartmentRequest.Validate if the designated constraints aren't met.
type ModifyDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyDepartmentRequestValidationError) ErrorName() string {
	return "ModifyDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyDepartmentRequestValidationError{}

// Validate checks the field values on ModifyDepartmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ModifyDepartmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// ModifyDepartmentResponseValidationError is the validation error returned by
// ModifyDepartmentResponse.Validate if the designated constraints aren't met.
type ModifyDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyDepartmentResponseValidationError) ErrorName() string {
	return "ModifyDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyDepartmentResponseValidationError{}

// Validate checks the field values on CreateDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDepartmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for Remark

	// no validation rules for Name

	// no validation rules for OpUserId

	return nil
}

// CreateDepartmentRequestValidationError is the validation error returned by
// CreateDepartmentRequest.Validate if the designated constraints aren't met.
type CreateDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDepartmentRequestValidationError) ErrorName() string {
	return "CreateDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDepartmentRequestValidationError{}

// Validate checks the field values on CreateDepartmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateDepartmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDepartmentResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateDepartmentResponseValidationError is the validation error returned by
// CreateDepartmentResponse.Validate if the designated constraints aren't met.
type CreateDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDepartmentResponseValidationError) ErrorName() string {
	return "CreateDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDepartmentResponseValidationError{}

// Validate checks the field values on DelUserFromDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DelUserFromDepartmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DepartmentId

	// no validation rules for CompanyId

	// no validation rules for OpUserId

	return nil
}

// DelUserFromDepartmentRequestValidationError is the validation error returned
// by DelUserFromDepartmentRequest.Validate if the designated constraints
// aren't met.
type DelUserFromDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserFromDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserFromDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserFromDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserFromDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserFromDepartmentRequestValidationError) ErrorName() string {
	return "DelUserFromDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelUserFromDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserFromDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserFromDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserFromDepartmentRequestValidationError{}

// Validate checks the field values on DelUserFromDepartmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DelUserFromDepartmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeletedNum

	return nil
}

// DelUserFromDepartmentResponseValidationError is the validation error
// returned by DelUserFromDepartmentResponse.Validate if the designated
// constraints aren't met.
type DelUserFromDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserFromDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserFromDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserFromDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserFromDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserFromDepartmentResponseValidationError) ErrorName() string {
	return "DelUserFromDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DelUserFromDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserFromDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserFromDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserFromDepartmentResponseValidationError{}

// Validate checks the field values on AddUserToDepartmentRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserToDepartmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DepartmentId

	// no validation rules for CompanyId

	// no validation rules for OpUserId

	return nil
}

// AddUserToDepartmentRequestValidationError is the validation error returned
// by AddUserToDepartmentRequest.Validate if the designated constraints aren't met.
type AddUserToDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserToDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserToDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserToDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserToDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserToDepartmentRequestValidationError) ErrorName() string {
	return "AddUserToDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserToDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserToDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserToDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserToDepartmentRequestValidationError{}

// Validate checks the field values on AddUserToDepartmentResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserToDepartmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AddedNum

	return nil
}

// AddUserToDepartmentResponseValidationError is the validation error returned
// by AddUserToDepartmentResponse.Validate if the designated constraints
// aren't met.
type AddUserToDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserToDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserToDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserToDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserToDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserToDepartmentResponseValidationError) ErrorName() string {
	return "AddUserToDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserToDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserToDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserToDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserToDepartmentResponseValidationError{}

// Validate checks the field values on DeleteDepartmentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDepartmentRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DepartmentId

	// no validation rules for OpUserId

	return nil
}

// DeleteDepartmentRequestValidationError is the validation error returned by
// DeleteDepartmentRequest.Validate if the designated constraints aren't met.
type DeleteDepartmentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDepartmentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDepartmentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDepartmentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDepartmentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDepartmentRequestValidationError) ErrorName() string {
	return "DeleteDepartmentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDepartmentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDepartmentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDepartmentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDepartmentRequestValidationError{}

// Validate checks the field values on DeleteDepartmentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteDepartmentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// DeleteDepartmentResponseValidationError is the validation error returned by
// DeleteDepartmentResponse.Validate if the designated constraints aren't met.
type DeleteDepartmentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDepartmentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDepartmentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDepartmentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDepartmentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDepartmentResponseValidationError) ErrorName() string {
	return "DeleteDepartmentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDepartmentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDepartmentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDepartmentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDepartmentResponseValidationError{}

// Validate checks the field values on GetUserJoinCompanyDepartmentListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetUserJoinCompanyDepartmentListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserJoinCompanyDepartmentListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserJoinCompanyDepartmentListRequestValidationError is the validation
// error returned by GetUserJoinCompanyDepartmentListRequest.Validate if the
// designated constraints aren't met.
type GetUserJoinCompanyDepartmentListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserJoinCompanyDepartmentListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserJoinCompanyDepartmentListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserJoinCompanyDepartmentListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserJoinCompanyDepartmentListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserJoinCompanyDepartmentListRequestValidationError) ErrorName() string {
	return "GetUserJoinCompanyDepartmentListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserJoinCompanyDepartmentListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserJoinCompanyDepartmentListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserJoinCompanyDepartmentListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserJoinCompanyDepartmentListRequestValidationError{}

// Validate checks the field values on GetUserJoinCompanyDepartmentListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetUserJoinCompanyDepartmentListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserJoinCompanyDepartmentListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserJoinCompanyDepartmentListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserJoinCompanyDepartmentListResponseValidationError is the validation
// error returned by GetUserJoinCompanyDepartmentListResponse.Validate if the
// designated constraints aren't met.
type GetUserJoinCompanyDepartmentListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserJoinCompanyDepartmentListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserJoinCompanyDepartmentListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserJoinCompanyDepartmentListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserJoinCompanyDepartmentListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserJoinCompanyDepartmentListResponseValidationError) ErrorName() string {
	return "GetUserJoinCompanyDepartmentListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserJoinCompanyDepartmentListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserJoinCompanyDepartmentListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserJoinCompanyDepartmentListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserJoinCompanyDepartmentListResponseValidationError{}

// Validate checks the field values on DepartmentLiteInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DepartmentLiteInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CompanyId

	// no validation rules for CreateUid

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DepartmentLiteInfoValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DepartmentLiteInfoValidationError is the validation error returned by
// DepartmentLiteInfo.Validate if the designated constraints aren't met.
type DepartmentLiteInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DepartmentLiteInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DepartmentLiteInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DepartmentLiteInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DepartmentLiteInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DepartmentLiteInfoValidationError) ErrorName() string {
	return "DepartmentLiteInfoValidationError"
}

// Error satisfies the builtin error interface
func (e DepartmentLiteInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDepartmentLiteInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DepartmentLiteInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DepartmentLiteInfoValidationError{}
