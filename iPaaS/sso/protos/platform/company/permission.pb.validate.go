// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/permission.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Permission) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for CreateUid

	// no validation rules for CreateName

	// no validation rules for ModifyUid

	// no validation rules for ModifyName

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PermissionValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on CreatePermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePermissionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Remark

	// no validation rules for CreateUid

	// no validation rules for CreateName

	return nil
}

// CreatePermissionRequestValidationError is the validation error returned by
// CreatePermissionRequest.Validate if the designated constraints aren't met.
type CreatePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionRequestValidationError) ErrorName() string {
	return "CreatePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionRequestValidationError{}

// Validate checks the field values on CreatePermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePermissionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PermissionId

	return nil
}

// CreatePermissionResponseValidationError is the validation error returned by
// CreatePermissionResponse.Validate if the designated constraints aren't met.
type CreatePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePermissionResponseValidationError) ErrorName() string {
	return "CreatePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePermissionResponseValidationError{}

// Validate checks the field values on ModifyPermissionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ModifyPermissionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PermissionId

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for ModifyUid

	// no validation rules for ModifyName

	return nil
}

// ModifyPermissionRequestValidationError is the validation error returned by
// ModifyPermissionRequest.Validate if the designated constraints aren't met.
type ModifyPermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyPermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyPermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyPermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyPermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyPermissionRequestValidationError) ErrorName() string {
	return "ModifyPermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyPermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyPermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyPermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyPermissionRequestValidationError{}

// Validate checks the field values on ModifyPermissionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ModifyPermissionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// ModifyPermissionResponseValidationError is the validation error returned by
// ModifyPermissionResponse.Validate if the designated constraints aren't met.
type ModifyPermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyPermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyPermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyPermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyPermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyPermissionResponseValidationError) ErrorName() string {
	return "ModifyPermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyPermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyPermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyPermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyPermissionResponseValidationError{}

// Validate checks the field values on GetPermissionListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPermissionListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Code

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPermissionListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPermissionListRequestValidationError is the validation error returned by
// GetPermissionListRequest.Validate if the designated constraints aren't met.
type GetPermissionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionListRequestValidationError) ErrorName() string {
	return "GetPermissionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionListRequestValidationError{}

// Validate checks the field values on GetPermissionListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPermissionListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPermissionListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPermissionListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPermissionListResponseValidationError is the validation error returned by
// GetPermissionListResponse.Validate if the designated constraints aren't met.
type GetPermissionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionListResponseValidationError) ErrorName() string {
	return "GetPermissionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionListResponseValidationError{}
