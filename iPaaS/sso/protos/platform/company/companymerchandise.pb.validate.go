// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/companymerchandise.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	protoconsts "github.com/yuansuan/ticp/iPaaS/sso/protos/platform/protoconsts"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = protoconsts.ResourceType(0)

	_ = protoconsts.ResourceType(0)

	_ = protoconsts.ResourceType(0)
)

// Validate checks the field values on CompanyMerchandiseQueryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyMerchandiseQueryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Keyword

	// no validation rules for CompanyId

	// no validation rules for MerchandiseId

	// no validation rules for State

	// no validation rules for OrderBy

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyMerchandiseQueryRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	// no validation rules for OutResourceType

	// no validation rules for LicenseType

	// no validation rules for ScId

	return nil
}

// CompanyMerchandiseQueryRequestValidationError is the validation error
// returned by CompanyMerchandiseQueryRequest.Validate if the designated
// constraints aren't met.
type CompanyMerchandiseQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyMerchandiseQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyMerchandiseQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyMerchandiseQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyMerchandiseQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyMerchandiseQueryRequestValidationError) ErrorName() string {
	return "CompanyMerchandiseQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyMerchandiseQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyMerchandiseQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyMerchandiseQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyMerchandiseQueryRequestValidationError{}

// Validate checks the field values on CompanyMerchandiseQueryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyMerchandiseQueryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCompanyMerchandises() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyMerchandiseQueryResponseValidationError{
					field:  fmt.Sprintf("CompanyMerchandises[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyMerchandiseQueryResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CompanyMerchandiseQueryResponseValidationError is the validation error
// returned by CompanyMerchandiseQueryResponse.Validate if the designated
// constraints aren't met.
type CompanyMerchandiseQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyMerchandiseQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyMerchandiseQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyMerchandiseQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyMerchandiseQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyMerchandiseQueryResponseValidationError) ErrorName() string {
	return "CompanyMerchandiseQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyMerchandiseQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyMerchandiseQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyMerchandiseQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyMerchandiseQueryResponseValidationError{}

// Validate checks the field values on CompanyBundleMerchandiseQueryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CompanyBundleMerchandiseQueryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Keyword

	// no validation rules for CompanyId

	// no validation rules for MerchandiseId

	// no validation rules for State

	// no validation rules for OrderBy

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyBundleMerchandiseQueryRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	// no validation rules for OutResourceType

	// no validation rules for LicenseType

	// no validation rules for MerchandiseName

	return nil
}

// CompanyBundleMerchandiseQueryRequestValidationError is the validation error
// returned by CompanyBundleMerchandiseQueryRequest.Validate if the designated
// constraints aren't met.
type CompanyBundleMerchandiseQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyBundleMerchandiseQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyBundleMerchandiseQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyBundleMerchandiseQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyBundleMerchandiseQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyBundleMerchandiseQueryRequestValidationError) ErrorName() string {
	return "CompanyBundleMerchandiseQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyBundleMerchandiseQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyBundleMerchandiseQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyBundleMerchandiseQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyBundleMerchandiseQueryRequestValidationError{}

// Validate checks the field values on CompanyBundleMerchandiseQueryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CompanyBundleMerchandiseQueryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCompanyMerchandises() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyBundleMerchandiseQueryResponseValidationError{
					field:  fmt.Sprintf("CompanyMerchandises[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyBundleMerchandiseQueryResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CompanyBundleMerchandiseQueryResponseValidationError is the validation error
// returned by CompanyBundleMerchandiseQueryResponse.Validate if the
// designated constraints aren't met.
type CompanyBundleMerchandiseQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyBundleMerchandiseQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyBundleMerchandiseQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyBundleMerchandiseQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyBundleMerchandiseQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyBundleMerchandiseQueryResponseValidationError) ErrorName() string {
	return "CompanyBundleMerchandiseQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyBundleMerchandiseQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyBundleMerchandiseQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyBundleMerchandiseQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyBundleMerchandiseQueryResponseValidationError{}

// Validate checks the field values on CheckIsCompanyMerchandiseAcitveRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CheckIsCompanyMerchandiseAcitveRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for MerchandiseId

	return nil
}

// CheckIsCompanyMerchandiseAcitveRequestValidationError is the validation
// error returned by CheckIsCompanyMerchandiseAcitveRequest.Validate if the
// designated constraints aren't met.
type CheckIsCompanyMerchandiseAcitveRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIsCompanyMerchandiseAcitveRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIsCompanyMerchandiseAcitveRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIsCompanyMerchandiseAcitveRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIsCompanyMerchandiseAcitveRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIsCompanyMerchandiseAcitveRequestValidationError) ErrorName() string {
	return "CheckIsCompanyMerchandiseAcitveRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIsCompanyMerchandiseAcitveRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIsCompanyMerchandiseAcitveRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIsCompanyMerchandiseAcitveRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIsCompanyMerchandiseAcitveRequestValidationError{}

// Validate checks the field values on CheckIsCompanyMerchandiseAcitveResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CheckIsCompanyMerchandiseAcitveResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsActive

	// no validation rules for IsPriced

	return nil
}

// CheckIsCompanyMerchandiseAcitveResponseValidationError is the validation
// error returned by CheckIsCompanyMerchandiseAcitveResponse.Validate if the
// designated constraints aren't met.
type CheckIsCompanyMerchandiseAcitveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckIsCompanyMerchandiseAcitveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckIsCompanyMerchandiseAcitveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckIsCompanyMerchandiseAcitveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckIsCompanyMerchandiseAcitveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckIsCompanyMerchandiseAcitveResponseValidationError) ErrorName() string {
	return "CheckIsCompanyMerchandiseAcitveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckIsCompanyMerchandiseAcitveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckIsCompanyMerchandiseAcitveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckIsCompanyMerchandiseAcitveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckIsCompanyMerchandiseAcitveResponseValidationError{}

// Validate checks the field values on GetCompanyPriceMerchandiseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCompanyPriceMerchandiseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for ProductId

	// no validation rules for OutResourceType

	// no validation rules for LicenseType

	return nil
}

// GetCompanyPriceMerchandiseRequestValidationError is the validation error
// returned by GetCompanyPriceMerchandiseRequest.Validate if the designated
// constraints aren't met.
type GetCompanyPriceMerchandiseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyPriceMerchandiseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyPriceMerchandiseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyPriceMerchandiseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyPriceMerchandiseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyPriceMerchandiseRequestValidationError) ErrorName() string {
	return "GetCompanyPriceMerchandiseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyPriceMerchandiseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyPriceMerchandiseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyPriceMerchandiseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyPriceMerchandiseRequestValidationError{}

// Validate checks the field values on GetCompanyPriceMerchandiseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCompanyPriceMerchandiseResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetCompanyMerchandises() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCompanyPriceMerchandiseResponseValidationError{
					field:  fmt.Sprintf("CompanyMerchandises[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCompanyPriceMerchandiseResponseValidationError is the validation error
// returned by GetCompanyPriceMerchandiseResponse.Validate if the designated
// constraints aren't met.
type GetCompanyPriceMerchandiseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyPriceMerchandiseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyPriceMerchandiseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyPriceMerchandiseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyPriceMerchandiseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyPriceMerchandiseResponseValidationError) ErrorName() string {
	return "GetCompanyPriceMerchandiseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyPriceMerchandiseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyPriceMerchandiseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyPriceMerchandiseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyPriceMerchandiseResponseValidationError{}

// Validate checks the field values on GetCompanyMerchandiseLicenseReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyMerchandiseLicenseReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MerchandiseId

	// no validation rules for CompanyId

	return nil
}

// GetCompanyMerchandiseLicenseReqValidationError is the validation error
// returned by GetCompanyMerchandiseLicenseReq.Validate if the designated
// constraints aren't met.
type GetCompanyMerchandiseLicenseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyMerchandiseLicenseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyMerchandiseLicenseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyMerchandiseLicenseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyMerchandiseLicenseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyMerchandiseLicenseReqValidationError) ErrorName() string {
	return "GetCompanyMerchandiseLicenseReqValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyMerchandiseLicenseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyMerchandiseLicenseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyMerchandiseLicenseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyMerchandiseLicenseReqValidationError{}

// Validate checks the field values on SaveCompanyMerchandiseLicenseReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SaveCompanyMerchandiseLicenseReq) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CompanyId

	// no validation rules for MerchandiseId

	// no validation rules for AppRuntimeId

	// no validation rules for License

	// no validation rules for CreatorId

	return nil
}

// SaveCompanyMerchandiseLicenseReqValidationError is the validation error
// returned by SaveCompanyMerchandiseLicenseReq.Validate if the designated
// constraints aren't met.
type SaveCompanyMerchandiseLicenseReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveCompanyMerchandiseLicenseReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveCompanyMerchandiseLicenseReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveCompanyMerchandiseLicenseReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveCompanyMerchandiseLicenseReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveCompanyMerchandiseLicenseReqValidationError) ErrorName() string {
	return "SaveCompanyMerchandiseLicenseReqValidationError"
}

// Error satisfies the builtin error interface
func (e SaveCompanyMerchandiseLicenseReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveCompanyMerchandiseLicenseReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveCompanyMerchandiseLicenseReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveCompanyMerchandiseLicenseReqValidationError{}

// Validate checks the field values on CompanyMerchandiseLicense with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyMerchandiseLicense) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CompanyId

	// no validation rules for MerchandiseId

	// no validation rules for AppRuntimeId

	// no validation rules for License

	// no validation rules for IsActive

	// no validation rules for CreatorId

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyMerchandiseLicenseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyMerchandiseLicenseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CompanyMerchandiseLicenseValidationError is the validation error returned by
// CompanyMerchandiseLicense.Validate if the designated constraints aren't met.
type CompanyMerchandiseLicenseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyMerchandiseLicenseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyMerchandiseLicenseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyMerchandiseLicenseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyMerchandiseLicenseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyMerchandiseLicenseValidationError) ErrorName() string {
	return "CompanyMerchandiseLicenseValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyMerchandiseLicenseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyMerchandiseLicense.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyMerchandiseLicenseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyMerchandiseLicenseValidationError{}

// Validate checks the field values on AddCompanyMerchandiseRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCompanyMerchandiseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for MerchandiseId

	// no validation rules for CreateUid

	return nil
}

// AddCompanyMerchandiseRequestValidationError is the validation error returned
// by AddCompanyMerchandiseRequest.Validate if the designated constraints
// aren't met.
type AddCompanyMerchandiseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCompanyMerchandiseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCompanyMerchandiseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCompanyMerchandiseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCompanyMerchandiseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCompanyMerchandiseRequestValidationError) ErrorName() string {
	return "AddCompanyMerchandiseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCompanyMerchandiseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCompanyMerchandiseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCompanyMerchandiseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCompanyMerchandiseRequestValidationError{}

// Validate checks the field values on AddCompanyMerchandiseResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCompanyMerchandiseResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddCompanyMerchandiseResponseValidationError is the validation error
// returned by AddCompanyMerchandiseResponse.Validate if the designated
// constraints aren't met.
type AddCompanyMerchandiseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCompanyMerchandiseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCompanyMerchandiseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCompanyMerchandiseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCompanyMerchandiseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCompanyMerchandiseResponseValidationError) ErrorName() string {
	return "AddCompanyMerchandiseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCompanyMerchandiseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCompanyMerchandiseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCompanyMerchandiseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCompanyMerchandiseResponseValidationError{}

// Validate checks the field values on BatchAddCompanyMerchandiseRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *BatchAddCompanyMerchandiseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for CreateUid

	return nil
}

// BatchAddCompanyMerchandiseRequestValidationError is the validation error
// returned by BatchAddCompanyMerchandiseRequest.Validate if the designated
// constraints aren't met.
type BatchAddCompanyMerchandiseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchAddCompanyMerchandiseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchAddCompanyMerchandiseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchAddCompanyMerchandiseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchAddCompanyMerchandiseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchAddCompanyMerchandiseRequestValidationError) ErrorName() string {
	return "BatchAddCompanyMerchandiseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchAddCompanyMerchandiseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchAddCompanyMerchandiseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchAddCompanyMerchandiseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchAddCompanyMerchandiseRequestValidationError{}

// Validate checks the field values on BatchAddCompanyMerchandiseResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *BatchAddCompanyMerchandiseResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// BatchAddCompanyMerchandiseResponseValidationError is the validation error
// returned by BatchAddCompanyMerchandiseResponse.Validate if the designated
// constraints aren't met.
type BatchAddCompanyMerchandiseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchAddCompanyMerchandiseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchAddCompanyMerchandiseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchAddCompanyMerchandiseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchAddCompanyMerchandiseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchAddCompanyMerchandiseResponseValidationError) ErrorName() string {
	return "BatchAddCompanyMerchandiseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchAddCompanyMerchandiseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchAddCompanyMerchandiseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchAddCompanyMerchandiseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchAddCompanyMerchandiseResponseValidationError{}

// Validate checks the field values on UpdateCompanyMerchandiseStateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateCompanyMerchandiseStateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for State

	return nil
}

// UpdateCompanyMerchandiseStateRequestValidationError is the validation error
// returned by UpdateCompanyMerchandiseStateRequest.Validate if the designated
// constraints aren't met.
type UpdateCompanyMerchandiseStateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompanyMerchandiseStateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompanyMerchandiseStateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompanyMerchandiseStateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompanyMerchandiseStateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompanyMerchandiseStateRequestValidationError) ErrorName() string {
	return "UpdateCompanyMerchandiseStateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompanyMerchandiseStateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompanyMerchandiseStateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompanyMerchandiseStateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompanyMerchandiseStateRequestValidationError{}

// Validate checks the field values on UpdateCompanyMerchandiseStateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateCompanyMerchandiseStateResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateCompanyMerchandiseStateResponseValidationError is the validation error
// returned by UpdateCompanyMerchandiseStateResponse.Validate if the
// designated constraints aren't met.
type UpdateCompanyMerchandiseStateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCompanyMerchandiseStateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCompanyMerchandiseStateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCompanyMerchandiseStateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCompanyMerchandiseStateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCompanyMerchandiseStateResponseValidationError) ErrorName() string {
	return "UpdateCompanyMerchandiseStateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCompanyMerchandiseStateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCompanyMerchandiseStateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCompanyMerchandiseStateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCompanyMerchandiseStateResponseValidationError{}

// Validate checks the field values on CompanyMerchandise with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyMerchandise) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CompanyId

	// no validation rules for CompanyName

	// no validation rules for MerchandiseId

	// no validation rules for MerchandiseName

	// no validation rules for OutResourceType

	// no validation rules for OutResourceId

	// no validation rules for LicenseType

	// no validation rules for LicenseActive

	// no validation rules for State

	// no validation rules for CreateUid

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyMerchandiseValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyMerchandiseValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	return nil
}

// CompanyMerchandiseValidationError is the validation error returned by
// CompanyMerchandise.Validate if the designated constraints aren't met.
type CompanyMerchandiseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyMerchandiseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyMerchandiseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyMerchandiseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyMerchandiseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyMerchandiseValidationError) ErrorName() string {
	return "CompanyMerchandiseValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyMerchandiseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyMerchandise.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyMerchandiseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyMerchandiseValidationError{}

// Validate checks the field values on
// GetCompanyPriceApplicationMerchandiseRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCompanyPriceApplicationMerchandiseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for ProductId

	// no validation rules for AppId

	return nil
}

// GetCompanyPriceApplicationMerchandiseRequestValidationError is the
// validation error returned by
// GetCompanyPriceApplicationMerchandiseRequest.Validate if the designated
// constraints aren't met.
type GetCompanyPriceApplicationMerchandiseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyPriceApplicationMerchandiseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyPriceApplicationMerchandiseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyPriceApplicationMerchandiseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyPriceApplicationMerchandiseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyPriceApplicationMerchandiseRequestValidationError) ErrorName() string {
	return "GetCompanyPriceApplicationMerchandiseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyPriceApplicationMerchandiseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyPriceApplicationMerchandiseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyPriceApplicationMerchandiseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyPriceApplicationMerchandiseRequestValidationError{}

// Validate checks the field values on
// GetCompanyPriceApplicationMerchandiseResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCompanyPriceApplicationMerchandiseResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsAvaliable

	if v, ok := interface{}(m.GetCompanyMerchandises()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyPriceApplicationMerchandiseResponseValidationError{
				field:  "CompanyMerchandises",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCompanyPriceApplicationMerchandiseResponseValidationError is the
// validation error returned by
// GetCompanyPriceApplicationMerchandiseResponse.Validate if the designated
// constraints aren't met.
type GetCompanyPriceApplicationMerchandiseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyPriceApplicationMerchandiseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyPriceApplicationMerchandiseResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetCompanyPriceApplicationMerchandiseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyPriceApplicationMerchandiseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyPriceApplicationMerchandiseResponseValidationError) ErrorName() string {
	return "GetCompanyPriceApplicationMerchandiseResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyPriceApplicationMerchandiseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyPriceApplicationMerchandiseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyPriceApplicationMerchandiseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyPriceApplicationMerchandiseResponseValidationError{}
