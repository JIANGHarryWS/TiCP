// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/company_check.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on
// CompanyMerchandiseResourceIsPricedRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CompanyMerchandiseResourceIsPricedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for ProductId

	return nil
}

// CompanyMerchandiseResourceIsPricedRequestValidationError is the validation
// error returned by CompanyMerchandiseResourceIsPricedRequest.Validate if the
// designated constraints aren't met.
type CompanyMerchandiseResourceIsPricedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyMerchandiseResourceIsPricedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyMerchandiseResourceIsPricedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyMerchandiseResourceIsPricedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyMerchandiseResourceIsPricedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyMerchandiseResourceIsPricedRequestValidationError) ErrorName() string {
	return "CompanyMerchandiseResourceIsPricedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyMerchandiseResourceIsPricedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyMerchandiseResourceIsPricedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyMerchandiseResourceIsPricedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyMerchandiseResourceIsPricedRequestValidationError{}

// Validate checks the field values on CompanyMerchandiseResourceIsPricedResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CompanyMerchandiseResourceIsPricedResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppruntimeId

	// no validation rules for IsAvaliable

	return nil
}

// CompanyMerchandiseResourceIsPricedResultValidationError is the validation
// error returned by CompanyMerchandiseResourceIsPricedResult.Validate if the
// designated constraints aren't met.
type CompanyMerchandiseResourceIsPricedResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyMerchandiseResourceIsPricedResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyMerchandiseResourceIsPricedResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyMerchandiseResourceIsPricedResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyMerchandiseResourceIsPricedResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyMerchandiseResourceIsPricedResultValidationError) ErrorName() string {
	return "CompanyMerchandiseResourceIsPricedResultValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyMerchandiseResourceIsPricedResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyMerchandiseResourceIsPricedResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyMerchandiseResourceIsPricedResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyMerchandiseResourceIsPricedResultValidationError{}

// Validate checks the field values on
// CompanyMerchandiseResourceIsPricedResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CompanyMerchandiseResourceIsPricedResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyMerchandiseResourceIsPricedResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// CompanyMerchandiseResourceIsPricedResponseValidationError is the validation
// error returned by CompanyMerchandiseResourceIsPricedResponse.Validate if
// the designated constraints aren't met.
type CompanyMerchandiseResourceIsPricedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyMerchandiseResourceIsPricedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyMerchandiseResourceIsPricedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyMerchandiseResourceIsPricedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyMerchandiseResourceIsPricedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyMerchandiseResourceIsPricedResponseValidationError) ErrorName() string {
	return "CompanyMerchandiseResourceIsPricedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyMerchandiseResourceIsPricedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyMerchandiseResourceIsPricedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyMerchandiseResourceIsPricedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyMerchandiseResourceIsPricedResponseValidationError{}
