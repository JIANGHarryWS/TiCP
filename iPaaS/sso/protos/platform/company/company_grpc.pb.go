// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	// 创建企业
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// 修改企业
	Modify(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*ModifyResponse, error)
	// 查询企业
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	// 企业列表查询
	CompanyList(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyListResponse, error)
	// 企业用户查询
	UserQuery(ctx context.Context, in *UserQueryRequest, opts ...grpc.CallOption) (*UserQueryResponse, error)
	// 创建企业盒子
	CreateCompanyBox(ctx context.Context, in *CreateCompanyBoxRequest, opts ...grpc.CallOption) (*CreateCompanyBoxResponse, error)
	// 获取企业用户邀请列表
	GetCompanyInviteList(ctx context.Context, in *GetCompanyInviteListRequest, opts ...grpc.CallOption) (*GetCompanyInviteListResponse, error)
	// 获取用户被邀请列表
	GetUserInviteList(ctx context.Context, in *GetUserInviteListRequest, opts ...grpc.CallOption) (*GetUserInviteListResponse, error)
	// 企业用户信息修改
	CompanyUserModify(ctx context.Context, in *CompanyUserModifyRequest, opts ...grpc.CallOption) (*CompanyUserModifyResponse, error)
	// 获取企业盒子
	GetCompanyBoxList(ctx context.Context, in *GetCompanyBoxListRequest, opts ...grpc.CallOption) (*GetCompanyBoxListResponse, error)
	// 企业盒子修改
	CompanyBoxModify(ctx context.Context, in *CompanyBoxModifyRequest, opts ...grpc.CallOption) (*CompanyBoxModifyResponse, error)
	// 验证用户是否已加入企业
	CheckUserAlreadyJoinCompany(ctx context.Context, in *CheckUserAlreadyJoinCompanyRequest, opts ...grpc.CallOption) (*CheckUserAlreadyJoinCompanyResponse, error)
	// 企业用户设置角色
	SetRoleForCompanyUser(ctx context.Context, in *SetRoleForCompanyUserRequest, opts ...grpc.CallOption) (*SetRoleForCompanyUserResponse, error)
	// 更新超级管理员用户
	UpdateSuperAdminUser(ctx context.Context, in *UpdateSuperAdminUserRequest, opts ...grpc.CallOption) (*UpdateSuperAdminUserResponse, error)
	// 添加用户到企业
	AddUserToCompany(ctx context.Context, in *AddUserToCompanyRequest, opts ...grpc.CallOption) (*AddUserToCompanyResponse, error)
	// 通过域名获取企业盒子
	GetCompanyBoxByDomain(ctx context.Context, in *GetCompanyBoxByDomainRequest, opts ...grpc.CallOption) (*GetCompanyBoxByDomainResponse, error)
	// 获取用户加入企业信息
	GetUserJoinCompany(ctx context.Context, in *GetUserJoinCompanyRequest, opts ...grpc.CallOption) (*GetUserJoinCompanyResponse, error)
	// 获取企业用户操作权限列表（不分页）
	GetCompanyUserPermissionList(ctx context.Context, in *GetCompanyUserPermissionListRequest, opts ...grpc.CallOption) (*GetCompanyUserPermissionListResponse, error)
	// 获取企业订购的商品列表（不分页）
	GetCompanyProductList(ctx context.Context, in *GetCompanyProductListRequest, opts ...grpc.CallOption) (*GetCompanyProductListResponse, error)
	// 为企业添加产品
	AddProductToCompany(ctx context.Context, in *AddProductToCompanyRequest, opts ...grpc.CallOption) (*AddProductToCompanyResponse, error)
	// 移除企业产品
	RemoveProductFromCompany(ctx context.Context, in *RemoveProductFromCompanyRequest, opts ...grpc.CallOption) (*RemoveProductFromCompanyResponse, error)
	// 检查企业是否开通产品
	CheckCompanyProduct(ctx context.Context, in *CheckCompanyProductRequest, opts ...grpc.CallOption) (*CheckCompanyProductResponse, error)
	// 获取企业看板数据
	GetCompanyDashborad(ctx context.Context, in *GetCompanyDashboradRequest, opts ...grpc.CallOption) (*GetCompanyDashboardResponse, error)
	// 获取企业管理员
	GetCompanyAdmins(ctx context.Context, in *GetCompanyAdminsRequest, opts ...grpc.CallOption) (*GetCompanyAdminsResponse, error)
	// 删除企业用户
	DeleteCompanyUser(ctx context.Context, in *DeleteCompanyUserRequest, opts ...grpc.CallOption) (*DeleteCompanyUserResponse, error)
	// 新增文件操作日志
	AddOperateFileLog(ctx context.Context, in *AddOperateFileLogRequest, opts ...grpc.CallOption) (*AddOperateFileLogResponse, error)
	// 查询文件操作日志
	QueryOperateFileLog(ctx context.Context, in *QueryOperateFileLogRequest, opts ...grpc.CallOption) (*QueryOperateFileLogResponse, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Modify(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*ModifyResponse, error) {
	out := new(ModifyResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/Modify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CompanyList(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyListResponse, error) {
	out := new(CompanyListResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/CompanyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UserQuery(ctx context.Context, in *UserQueryRequest, opts ...grpc.CallOption) (*UserQueryResponse, error) {
	out := new(UserQueryResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/UserQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateCompanyBox(ctx context.Context, in *CreateCompanyBoxRequest, opts ...grpc.CallOption) (*CreateCompanyBoxResponse, error) {
	out := new(CreateCompanyBoxResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/CreateCompanyBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyInviteList(ctx context.Context, in *GetCompanyInviteListRequest, opts ...grpc.CallOption) (*GetCompanyInviteListResponse, error) {
	out := new(GetCompanyInviteListResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetCompanyInviteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetUserInviteList(ctx context.Context, in *GetUserInviteListRequest, opts ...grpc.CallOption) (*GetUserInviteListResponse, error) {
	out := new(GetUserInviteListResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetUserInviteList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CompanyUserModify(ctx context.Context, in *CompanyUserModifyRequest, opts ...grpc.CallOption) (*CompanyUserModifyResponse, error) {
	out := new(CompanyUserModifyResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/CompanyUserModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyBoxList(ctx context.Context, in *GetCompanyBoxListRequest, opts ...grpc.CallOption) (*GetCompanyBoxListResponse, error) {
	out := new(GetCompanyBoxListResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetCompanyBoxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CompanyBoxModify(ctx context.Context, in *CompanyBoxModifyRequest, opts ...grpc.CallOption) (*CompanyBoxModifyResponse, error) {
	out := new(CompanyBoxModifyResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/CompanyBoxModify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CheckUserAlreadyJoinCompany(ctx context.Context, in *CheckUserAlreadyJoinCompanyRequest, opts ...grpc.CallOption) (*CheckUserAlreadyJoinCompanyResponse, error) {
	out := new(CheckUserAlreadyJoinCompanyResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/CheckUserAlreadyJoinCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) SetRoleForCompanyUser(ctx context.Context, in *SetRoleForCompanyUserRequest, opts ...grpc.CallOption) (*SetRoleForCompanyUserResponse, error) {
	out := new(SetRoleForCompanyUserResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/SetRoleForCompanyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateSuperAdminUser(ctx context.Context, in *UpdateSuperAdminUserRequest, opts ...grpc.CallOption) (*UpdateSuperAdminUserResponse, error) {
	out := new(UpdateSuperAdminUserResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/UpdateSuperAdminUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AddUserToCompany(ctx context.Context, in *AddUserToCompanyRequest, opts ...grpc.CallOption) (*AddUserToCompanyResponse, error) {
	out := new(AddUserToCompanyResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/AddUserToCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyBoxByDomain(ctx context.Context, in *GetCompanyBoxByDomainRequest, opts ...grpc.CallOption) (*GetCompanyBoxByDomainResponse, error) {
	out := new(GetCompanyBoxByDomainResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetCompanyBoxByDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetUserJoinCompany(ctx context.Context, in *GetUserJoinCompanyRequest, opts ...grpc.CallOption) (*GetUserJoinCompanyResponse, error) {
	out := new(GetUserJoinCompanyResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetUserJoinCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyUserPermissionList(ctx context.Context, in *GetCompanyUserPermissionListRequest, opts ...grpc.CallOption) (*GetCompanyUserPermissionListResponse, error) {
	out := new(GetCompanyUserPermissionListResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetCompanyUserPermissionList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyProductList(ctx context.Context, in *GetCompanyProductListRequest, opts ...grpc.CallOption) (*GetCompanyProductListResponse, error) {
	out := new(GetCompanyProductListResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetCompanyProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AddProductToCompany(ctx context.Context, in *AddProductToCompanyRequest, opts ...grpc.CallOption) (*AddProductToCompanyResponse, error) {
	out := new(AddProductToCompanyResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/AddProductToCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) RemoveProductFromCompany(ctx context.Context, in *RemoveProductFromCompanyRequest, opts ...grpc.CallOption) (*RemoveProductFromCompanyResponse, error) {
	out := new(RemoveProductFromCompanyResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/RemoveProductFromCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CheckCompanyProduct(ctx context.Context, in *CheckCompanyProductRequest, opts ...grpc.CallOption) (*CheckCompanyProductResponse, error) {
	out := new(CheckCompanyProductResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/CheckCompanyProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyDashborad(ctx context.Context, in *GetCompanyDashboradRequest, opts ...grpc.CallOption) (*GetCompanyDashboardResponse, error) {
	out := new(GetCompanyDashboardResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetCompanyDashborad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompanyAdmins(ctx context.Context, in *GetCompanyAdminsRequest, opts ...grpc.CallOption) (*GetCompanyAdminsResponse, error) {
	out := new(GetCompanyAdminsResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/GetCompanyAdmins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteCompanyUser(ctx context.Context, in *DeleteCompanyUserRequest, opts ...grpc.CallOption) (*DeleteCompanyUserResponse, error) {
	out := new(DeleteCompanyUserResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/DeleteCompanyUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) AddOperateFileLog(ctx context.Context, in *AddOperateFileLogRequest, opts ...grpc.CallOption) (*AddOperateFileLogResponse, error) {
	out := new(AddOperateFileLogResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/AddOperateFileLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) QueryOperateFileLog(ctx context.Context, in *QueryOperateFileLogRequest, opts ...grpc.CallOption) (*QueryOperateFileLogResponse, error) {
	out := new(QueryOperateFileLogResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyService/QueryOperateFileLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	// 创建企业
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// 修改企业
	Modify(context.Context, *ModifyRequest) (*ModifyResponse, error)
	// 查询企业
	GetCompany(context.Context, *GetCompanyRequest) (*Company, error)
	// 企业列表查询
	CompanyList(context.Context, *CompanyListRequest) (*CompanyListResponse, error)
	// 企业用户查询
	UserQuery(context.Context, *UserQueryRequest) (*UserQueryResponse, error)
	// 创建企业盒子
	CreateCompanyBox(context.Context, *CreateCompanyBoxRequest) (*CreateCompanyBoxResponse, error)
	// 获取企业用户邀请列表
	GetCompanyInviteList(context.Context, *GetCompanyInviteListRequest) (*GetCompanyInviteListResponse, error)
	// 获取用户被邀请列表
	GetUserInviteList(context.Context, *GetUserInviteListRequest) (*GetUserInviteListResponse, error)
	// 企业用户信息修改
	CompanyUserModify(context.Context, *CompanyUserModifyRequest) (*CompanyUserModifyResponse, error)
	// 获取企业盒子
	GetCompanyBoxList(context.Context, *GetCompanyBoxListRequest) (*GetCompanyBoxListResponse, error)
	// 企业盒子修改
	CompanyBoxModify(context.Context, *CompanyBoxModifyRequest) (*CompanyBoxModifyResponse, error)
	// 验证用户是否已加入企业
	CheckUserAlreadyJoinCompany(context.Context, *CheckUserAlreadyJoinCompanyRequest) (*CheckUserAlreadyJoinCompanyResponse, error)
	// 企业用户设置角色
	SetRoleForCompanyUser(context.Context, *SetRoleForCompanyUserRequest) (*SetRoleForCompanyUserResponse, error)
	// 更新超级管理员用户
	UpdateSuperAdminUser(context.Context, *UpdateSuperAdminUserRequest) (*UpdateSuperAdminUserResponse, error)
	// 添加用户到企业
	AddUserToCompany(context.Context, *AddUserToCompanyRequest) (*AddUserToCompanyResponse, error)
	// 通过域名获取企业盒子
	GetCompanyBoxByDomain(context.Context, *GetCompanyBoxByDomainRequest) (*GetCompanyBoxByDomainResponse, error)
	// 获取用户加入企业信息
	GetUserJoinCompany(context.Context, *GetUserJoinCompanyRequest) (*GetUserJoinCompanyResponse, error)
	// 获取企业用户操作权限列表（不分页）
	GetCompanyUserPermissionList(context.Context, *GetCompanyUserPermissionListRequest) (*GetCompanyUserPermissionListResponse, error)
	// 获取企业订购的商品列表（不分页）
	GetCompanyProductList(context.Context, *GetCompanyProductListRequest) (*GetCompanyProductListResponse, error)
	// 为企业添加产品
	AddProductToCompany(context.Context, *AddProductToCompanyRequest) (*AddProductToCompanyResponse, error)
	// 移除企业产品
	RemoveProductFromCompany(context.Context, *RemoveProductFromCompanyRequest) (*RemoveProductFromCompanyResponse, error)
	// 检查企业是否开通产品
	CheckCompanyProduct(context.Context, *CheckCompanyProductRequest) (*CheckCompanyProductResponse, error)
	// 获取企业看板数据
	GetCompanyDashborad(context.Context, *GetCompanyDashboradRequest) (*GetCompanyDashboardResponse, error)
	// 获取企业管理员
	GetCompanyAdmins(context.Context, *GetCompanyAdminsRequest) (*GetCompanyAdminsResponse, error)
	// 删除企业用户
	DeleteCompanyUser(context.Context, *DeleteCompanyUserRequest) (*DeleteCompanyUserResponse, error)
	// 新增文件操作日志
	AddOperateFileLog(context.Context, *AddOperateFileLogRequest) (*AddOperateFileLogResponse, error)
	// 查询文件操作日志
	QueryOperateFileLog(context.Context, *QueryOperateFileLogRequest) (*QueryOperateFileLogResponse, error)
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCompanyServiceServer) Modify(context.Context, *ModifyRequest) (*ModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompany(context.Context, *GetCompanyRequest) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedCompanyServiceServer) CompanyList(context.Context, *CompanyListRequest) (*CompanyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyList not implemented")
}
func (UnimplementedCompanyServiceServer) UserQuery(context.Context, *UserQueryRequest) (*UserQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserQuery not implemented")
}
func (UnimplementedCompanyServiceServer) CreateCompanyBox(context.Context, *CreateCompanyBoxRequest) (*CreateCompanyBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyBox not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyInviteList(context.Context, *GetCompanyInviteListRequest) (*GetCompanyInviteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyInviteList not implemented")
}
func (UnimplementedCompanyServiceServer) GetUserInviteList(context.Context, *GetUserInviteListRequest) (*GetUserInviteListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInviteList not implemented")
}
func (UnimplementedCompanyServiceServer) CompanyUserModify(context.Context, *CompanyUserModifyRequest) (*CompanyUserModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyUserModify not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyBoxList(context.Context, *GetCompanyBoxListRequest) (*GetCompanyBoxListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyBoxList not implemented")
}
func (UnimplementedCompanyServiceServer) CompanyBoxModify(context.Context, *CompanyBoxModifyRequest) (*CompanyBoxModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyBoxModify not implemented")
}
func (UnimplementedCompanyServiceServer) CheckUserAlreadyJoinCompany(context.Context, *CheckUserAlreadyJoinCompanyRequest) (*CheckUserAlreadyJoinCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAlreadyJoinCompany not implemented")
}
func (UnimplementedCompanyServiceServer) SetRoleForCompanyUser(context.Context, *SetRoleForCompanyUserRequest) (*SetRoleForCompanyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoleForCompanyUser not implemented")
}
func (UnimplementedCompanyServiceServer) UpdateSuperAdminUser(context.Context, *UpdateSuperAdminUserRequest) (*UpdateSuperAdminUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuperAdminUser not implemented")
}
func (UnimplementedCompanyServiceServer) AddUserToCompany(context.Context, *AddUserToCompanyRequest) (*AddUserToCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToCompany not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyBoxByDomain(context.Context, *GetCompanyBoxByDomainRequest) (*GetCompanyBoxByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyBoxByDomain not implemented")
}
func (UnimplementedCompanyServiceServer) GetUserJoinCompany(context.Context, *GetUserJoinCompanyRequest) (*GetUserJoinCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJoinCompany not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyUserPermissionList(context.Context, *GetCompanyUserPermissionListRequest) (*GetCompanyUserPermissionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyUserPermissionList not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyProductList(context.Context, *GetCompanyProductListRequest) (*GetCompanyProductListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyProductList not implemented")
}
func (UnimplementedCompanyServiceServer) AddProductToCompany(context.Context, *AddProductToCompanyRequest) (*AddProductToCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToCompany not implemented")
}
func (UnimplementedCompanyServiceServer) RemoveProductFromCompany(context.Context, *RemoveProductFromCompanyRequest) (*RemoveProductFromCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProductFromCompany not implemented")
}
func (UnimplementedCompanyServiceServer) CheckCompanyProduct(context.Context, *CheckCompanyProductRequest) (*CheckCompanyProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCompanyProduct not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyDashborad(context.Context, *GetCompanyDashboradRequest) (*GetCompanyDashboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyDashborad not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompanyAdmins(context.Context, *GetCompanyAdminsRequest) (*GetCompanyAdminsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyAdmins not implemented")
}
func (UnimplementedCompanyServiceServer) DeleteCompanyUser(context.Context, *DeleteCompanyUserRequest) (*DeleteCompanyUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyUser not implemented")
}
func (UnimplementedCompanyServiceServer) AddOperateFileLog(context.Context, *AddOperateFileLogRequest) (*AddOperateFileLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOperateFileLog not implemented")
}
func (UnimplementedCompanyServiceServer) QueryOperateFileLog(context.Context, *QueryOperateFileLogRequest) (*QueryOperateFileLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOperateFileLog not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/Modify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Modify(ctx, req.(*ModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CompanyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CompanyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/CompanyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CompanyList(ctx, req.(*CompanyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UserQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UserQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/UserQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UserQuery(ctx, req.(*UserQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateCompanyBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateCompanyBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/CreateCompanyBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateCompanyBox(ctx, req.(*CreateCompanyBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyInviteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyInviteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyInviteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetCompanyInviteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyInviteList(ctx, req.(*GetCompanyInviteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetUserInviteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInviteListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetUserInviteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetUserInviteList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetUserInviteList(ctx, req.(*GetUserInviteListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CompanyUserModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyUserModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CompanyUserModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/CompanyUserModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CompanyUserModify(ctx, req.(*CompanyUserModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyBoxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyBoxListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyBoxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetCompanyBoxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyBoxList(ctx, req.(*GetCompanyBoxListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CompanyBoxModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyBoxModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CompanyBoxModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/CompanyBoxModify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CompanyBoxModify(ctx, req.(*CompanyBoxModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CheckUserAlreadyJoinCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserAlreadyJoinCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CheckUserAlreadyJoinCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/CheckUserAlreadyJoinCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CheckUserAlreadyJoinCompany(ctx, req.(*CheckUserAlreadyJoinCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_SetRoleForCompanyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRoleForCompanyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).SetRoleForCompanyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/SetRoleForCompanyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).SetRoleForCompanyUser(ctx, req.(*SetRoleForCompanyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateSuperAdminUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSuperAdminUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateSuperAdminUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/UpdateSuperAdminUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateSuperAdminUser(ctx, req.(*UpdateSuperAdminUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AddUserToCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddUserToCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/AddUserToCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddUserToCompany(ctx, req.(*AddUserToCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyBoxByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyBoxByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyBoxByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetCompanyBoxByDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyBoxByDomain(ctx, req.(*GetCompanyBoxByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetUserJoinCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserJoinCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetUserJoinCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetUserJoinCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetUserJoinCompany(ctx, req.(*GetUserJoinCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyUserPermissionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyUserPermissionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyUserPermissionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetCompanyUserPermissionList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyUserPermissionList(ctx, req.(*GetCompanyUserPermissionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetCompanyProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyProductList(ctx, req.(*GetCompanyProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AddProductToCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductToCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddProductToCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/AddProductToCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddProductToCompany(ctx, req.(*AddProductToCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_RemoveProductFromCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProductFromCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).RemoveProductFromCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/RemoveProductFromCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).RemoveProductFromCompany(ctx, req.(*RemoveProductFromCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CheckCompanyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckCompanyProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CheckCompanyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/CheckCompanyProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CheckCompanyProduct(ctx, req.(*CheckCompanyProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyDashborad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyDashboradRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyDashborad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetCompanyDashborad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyDashborad(ctx, req.(*GetCompanyDashboradRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompanyAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyAdminsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompanyAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/GetCompanyAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompanyAdmins(ctx, req.(*GetCompanyAdminsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteCompanyUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteCompanyUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/DeleteCompanyUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteCompanyUser(ctx, req.(*DeleteCompanyUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_AddOperateFileLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOperateFileLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).AddOperateFileLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/AddOperateFileLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).AddOperateFileLog(ctx, req.(*AddOperateFileLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_QueryOperateFileLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperateFileLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).QueryOperateFileLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyService/QueryOperateFileLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).QueryOperateFileLog(ctx, req.(*QueryOperateFileLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CompanyService_Create_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _CompanyService_Modify_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyService_GetCompany_Handler,
		},
		{
			MethodName: "CompanyList",
			Handler:    _CompanyService_CompanyList_Handler,
		},
		{
			MethodName: "UserQuery",
			Handler:    _CompanyService_UserQuery_Handler,
		},
		{
			MethodName: "CreateCompanyBox",
			Handler:    _CompanyService_CreateCompanyBox_Handler,
		},
		{
			MethodName: "GetCompanyInviteList",
			Handler:    _CompanyService_GetCompanyInviteList_Handler,
		},
		{
			MethodName: "GetUserInviteList",
			Handler:    _CompanyService_GetUserInviteList_Handler,
		},
		{
			MethodName: "CompanyUserModify",
			Handler:    _CompanyService_CompanyUserModify_Handler,
		},
		{
			MethodName: "GetCompanyBoxList",
			Handler:    _CompanyService_GetCompanyBoxList_Handler,
		},
		{
			MethodName: "CompanyBoxModify",
			Handler:    _CompanyService_CompanyBoxModify_Handler,
		},
		{
			MethodName: "CheckUserAlreadyJoinCompany",
			Handler:    _CompanyService_CheckUserAlreadyJoinCompany_Handler,
		},
		{
			MethodName: "SetRoleForCompanyUser",
			Handler:    _CompanyService_SetRoleForCompanyUser_Handler,
		},
		{
			MethodName: "UpdateSuperAdminUser",
			Handler:    _CompanyService_UpdateSuperAdminUser_Handler,
		},
		{
			MethodName: "AddUserToCompany",
			Handler:    _CompanyService_AddUserToCompany_Handler,
		},
		{
			MethodName: "GetCompanyBoxByDomain",
			Handler:    _CompanyService_GetCompanyBoxByDomain_Handler,
		},
		{
			MethodName: "GetUserJoinCompany",
			Handler:    _CompanyService_GetUserJoinCompany_Handler,
		},
		{
			MethodName: "GetCompanyUserPermissionList",
			Handler:    _CompanyService_GetCompanyUserPermissionList_Handler,
		},
		{
			MethodName: "GetCompanyProductList",
			Handler:    _CompanyService_GetCompanyProductList_Handler,
		},
		{
			MethodName: "AddProductToCompany",
			Handler:    _CompanyService_AddProductToCompany_Handler,
		},
		{
			MethodName: "RemoveProductFromCompany",
			Handler:    _CompanyService_RemoveProductFromCompany_Handler,
		},
		{
			MethodName: "CheckCompanyProduct",
			Handler:    _CompanyService_CheckCompanyProduct_Handler,
		},
		{
			MethodName: "GetCompanyDashborad",
			Handler:    _CompanyService_GetCompanyDashborad_Handler,
		},
		{
			MethodName: "GetCompanyAdmins",
			Handler:    _CompanyService_GetCompanyAdmins_Handler,
		},
		{
			MethodName: "DeleteCompanyUser",
			Handler:    _CompanyService_DeleteCompanyUser_Handler,
		},
		{
			MethodName: "AddOperateFileLog",
			Handler:    _CompanyService_AddOperateFileLog_Handler,
		},
		{
			MethodName: "QueryOperateFileLog",
			Handler:    _CompanyService_QueryOperateFileLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/company.proto",
}
