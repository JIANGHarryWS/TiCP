// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/role.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Role) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CompanyId

	// no validation rules for Type

	// no validation rules for Status

	// no validation rules for CreateUid

	// no validation rules for CreateName

	// no validation rules for ModifyUid

	// no validation rules for ModifyName

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on CreateSysRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSysRoleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for CreateUid

	// no validation rules for CreateName

	return nil
}

// CreateSysRoleRequestValidationError is the validation error returned by
// CreateSysRoleRequest.Validate if the designated constraints aren't met.
type CreateSysRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysRoleRequestValidationError) ErrorName() string {
	return "CreateSysRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSysRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysRoleRequestValidationError{}

// Validate checks the field values on CreateSysRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateSysRoleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RoleId

	return nil
}

// CreateSysRoleResponseValidationError is the validation error returned by
// CreateSysRoleResponse.Validate if the designated constraints aren't met.
type CreateSysRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysRoleResponseValidationError) ErrorName() string {
	return "CreateSysRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSysRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysRoleResponseValidationError{}

// Validate checks the field values on CreateCompanyRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCompanyRoleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for CompanyId

	// no validation rules for CreateUid

	// no validation rules for CreateName

	return nil
}

// CreateCompanyRoleRequestValidationError is the validation error returned by
// CreateCompanyRoleRequest.Validate if the designated constraints aren't met.
type CreateCompanyRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyRoleRequestValidationError) ErrorName() string {
	return "CreateCompanyRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyRoleRequestValidationError{}

// Validate checks the field values on CreateCompanyRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCompanyRoleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RoleId

	return nil
}

// CreateCompanyRoleResponseValidationError is the validation error returned by
// CreateCompanyRoleResponse.Validate if the designated constraints aren't met.
type CreateCompanyRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyRoleResponseValidationError) ErrorName() string {
	return "CreateCompanyRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyRoleResponseValidationError{}

// Validate checks the field values on ModifyRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ModifyRoleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RoleId

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for ModifyUid

	// no validation rules for ModifyName

	return nil
}

// ModifyRoleRequestValidationError is the validation error returned by
// ModifyRoleRequest.Validate if the designated constraints aren't met.
type ModifyRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyRoleRequestValidationError) ErrorName() string {
	return "ModifyRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyRoleRequestValidationError{}

// Validate checks the field values on ModifyRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ModifyRoleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// ModifyRoleResponseValidationError is the validation error returned by
// ModifyRoleResponse.Validate if the designated constraints aren't met.
type ModifyRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyRoleResponseValidationError) ErrorName() string {
	return "ModifyRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyRoleResponseValidationError{}

// Validate checks the field values on GetCompanyRoleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyRoleListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for CompanyId

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyRoleListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCompanyRoleListRequestValidationError is the validation error returned by
// GetCompanyRoleListRequest.Validate if the designated constraints aren't met.
type GetCompanyRoleListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyRoleListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyRoleListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyRoleListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyRoleListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyRoleListRequestValidationError) ErrorName() string {
	return "GetCompanyRoleListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyRoleListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyRoleListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyRoleListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyRoleListRequestValidationError{}

// Validate checks the field values on GetCompanyRoleListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyRoleListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCompanyRoleListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyRoleListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCompanyRoleListResponseValidationError is the validation error returned
// by GetCompanyRoleListResponse.Validate if the designated constraints aren't met.
type GetCompanyRoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyRoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyRoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyRoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyRoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyRoleListResponseValidationError) ErrorName() string {
	return "GetCompanyRoleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyRoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyRoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyRoleListResponseValidationError{}

// Validate checks the field values on GetSysRoleListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSysRoleListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysRoleListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSysRoleListRequestValidationError is the validation error returned by
// GetSysRoleListRequest.Validate if the designated constraints aren't met.
type GetSysRoleListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleListRequestValidationError) ErrorName() string {
	return "GetSysRoleListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleListRequestValidationError{}

// Validate checks the field values on GetSysRoleListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSysRoleListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSysRoleListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysRoleListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSysRoleListResponseValidationError is the validation error returned by
// GetSysRoleListResponse.Validate if the designated constraints aren't met.
type GetSysRoleListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleListResponseValidationError) ErrorName() string {
	return "GetSysRoleListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleListResponseValidationError{}

// Validate checks the field values on GrantPermissionToRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GrantPermissionToRoleRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RoleId

	// no validation rules for CreateUid

	// no validation rules for CreateName

	return nil
}

// GrantPermissionToRoleRequestValidationError is the validation error returned
// by GrantPermissionToRoleRequest.Validate if the designated constraints
// aren't met.
type GrantPermissionToRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantPermissionToRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantPermissionToRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantPermissionToRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantPermissionToRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantPermissionToRoleRequestValidationError) ErrorName() string {
	return "GrantPermissionToRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantPermissionToRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantPermissionToRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantPermissionToRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantPermissionToRoleRequestValidationError{}

// Validate checks the field values on GrantPermissionToRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GrantPermissionToRoleResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// GrantPermissionToRoleResponseValidationError is the validation error
// returned by GrantPermissionToRoleResponse.Validate if the designated
// constraints aren't met.
type GrantPermissionToRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantPermissionToRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantPermissionToRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantPermissionToRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantPermissionToRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantPermissionToRoleResponseValidationError) ErrorName() string {
	return "GrantPermissionToRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantPermissionToRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantPermissionToRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantPermissionToRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantPermissionToRoleResponseValidationError{}

// Validate checks the field values on GetPermissionByRoleIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPermissionByRoleIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RoleId

	return nil
}

// GetPermissionByRoleIDRequestValidationError is the validation error returned
// by GetPermissionByRoleIDRequest.Validate if the designated constraints
// aren't met.
type GetPermissionByRoleIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionByRoleIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionByRoleIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionByRoleIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionByRoleIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionByRoleIDRequestValidationError) ErrorName() string {
	return "GetPermissionByRoleIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionByRoleIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionByRoleIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionByRoleIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionByRoleIDRequestValidationError{}

// Validate checks the field values on GetPermissionByRoleIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPermissionByRoleIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPermissionByRoleIDResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetPermissionByRoleIDResponseValidationError is the validation error
// returned by GetPermissionByRoleIDResponse.Validate if the designated
// constraints aren't met.
type GetPermissionByRoleIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionByRoleIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionByRoleIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionByRoleIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionByRoleIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionByRoleIDResponseValidationError) ErrorName() string {
	return "GetPermissionByRoleIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionByRoleIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionByRoleIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionByRoleIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionByRoleIDResponseValidationError{}
