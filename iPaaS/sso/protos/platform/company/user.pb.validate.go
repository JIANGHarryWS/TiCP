// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/user.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for RealName

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for AccountId

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastLoginTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "LastLoginTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserName

	// no validation rules for DisplayUserName

	// no validation rules for MaxProjects

	return nil
}

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on InviteUser with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *InviteUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CompanyId

	// no validation rules for CompanyName

	// no validation rules for RealName

	// no validation rules for UserId

	// no validation rules for Status

	// no validation rules for IsAdmin

	// no validation rules for CreateUid

	// no validation rules for CreateName

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteUserValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteUserValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Phone

	// no validation rules for RoleId

	// no validation rules for DepartmentId

	// no validation rules for MaxProjects

	return nil
}

// InviteUserValidationError is the validation error returned by
// InviteUser.Validate if the designated constraints aren't met.
type InviteUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserValidationError) ErrorName() string { return "InviteUserValidationError" }

// Error satisfies the builtin error interface
func (e InviteUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserValidationError{}

// Validate checks the field values on InviteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *InviteUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for UserId

	// no validation rules for IsAdmin

	// no validation rules for CreateUid

	// no validation rules for CreateName

	// no validation rules for Phone

	// no validation rules for RealName

	// no validation rules for DepartmentId

	return nil
}

// InviteUserRequestValidationError is the validation error returned by
// InviteUserRequest.Validate if the designated constraints aren't met.
type InviteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserRequestValidationError) ErrorName() string {
	return "InviteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserRequestValidationError{}

// Validate checks the field values on InviteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *InviteUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// InviteUserResponseValidationError is the validation error returned by
// InviteUserResponse.Validate if the designated constraints aren't met.
type InviteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteUserResponseValidationError) ErrorName() string {
	return "InviteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InviteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteUserResponseValidationError{}

// Validate checks the field values on ConfirmInviteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConfirmInviteRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for UserId

	// no validation rules for Status

	// no validation rules for RealName

	// no validation rules for Email

	// no validation rules for Phone

	return nil
}

// ConfirmInviteRequestValidationError is the validation error returned by
// ConfirmInviteRequest.Validate if the designated constraints aren't met.
type ConfirmInviteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmInviteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmInviteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmInviteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmInviteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmInviteRequestValidationError) ErrorName() string {
	return "ConfirmInviteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmInviteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmInviteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmInviteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmInviteRequestValidationError{}

// Validate checks the field values on ConfirmInviteResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ConfirmInviteResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// ConfirmInviteResponseValidationError is the validation error returned by
// ConfirmInviteResponse.Validate if the designated constraints aren't met.
type ConfirmInviteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmInviteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmInviteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmInviteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmInviteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmInviteResponseValidationError) ErrorName() string {
	return "ConfirmInviteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfirmInviteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmInviteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmInviteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmInviteResponseValidationError{}

// Validate checks the field values on GetUserInviteInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserInviteInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InviteId

	// no validation rules for UserId

	return nil
}

// GetUserInviteInfoRequestValidationError is the validation error returned by
// GetUserInviteInfoRequest.Validate if the designated constraints aren't met.
type GetUserInviteInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInviteInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInviteInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInviteInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInviteInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInviteInfoRequestValidationError) ErrorName() string {
	return "GetUserInviteInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInviteInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInviteInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInviteInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInviteInfoRequestValidationError{}

// Validate checks the field values on GetUserInviteInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserInviteInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInviteInfoResponseValidationError{
				field:  "Info",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserInviteInfoResponseValidationError is the validation error returned by
// GetUserInviteInfoResponse.Validate if the designated constraints aren't met.
type GetUserInviteInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInviteInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInviteInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInviteInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInviteInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInviteInfoResponseValidationError) ErrorName() string {
	return "GetUserInviteInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInviteInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInviteInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInviteInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInviteInfoResponseValidationError{}

// Validate checks the field values on UserModifyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserModifyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Phone

	// no validation rules for RealName

	// no validation rules for Email

	if v, ok := interface{}(m.GetLastLoginTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserModifyRequestValidationError{
				field:  "LastLoginTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MaxProjects

	return nil
}

// UserModifyRequestValidationError is the validation error returned by
// UserModifyRequest.Validate if the designated constraints aren't met.
type UserModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserModifyRequestValidationError) ErrorName() string {
	return "UserModifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserModifyRequestValidationError{}

// Validate checks the field values on UserModifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserModifyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// UserModifyResponseValidationError is the validation error returned by
// UserModifyResponse.Validate if the designated constraints aren't met.
type UserModifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserModifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserModifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserModifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserModifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserModifyResponseValidationError) ErrorName() string {
	return "UserModifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserModifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserModifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserModifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserModifyResponseValidationError{}

// Validate checks the field values on UserInitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserInitRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Phone

	// no validation rules for RealName

	// no validation rules for Email

	// no validation rules for UserName

	// no validation rules for ProductId

	return nil
}

// UserInitRequestValidationError is the validation error returned by
// UserInitRequest.Validate if the designated constraints aren't met.
type UserInitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInitRequestValidationError) ErrorName() string { return "UserInitRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserInitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInitRequestValidationError{}

// Validate checks the field values on UserInitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserInitResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// UserInitResponseValidationError is the validation error returned by
// UserInitResponse.Validate if the designated constraints aren't met.
type UserInitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInitResponseValidationError) ErrorName() string { return "UserInitResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserInitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInitResponseValidationError{}

// Validate checks the field values on GetUserRoleAndPermissonRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserRoleAndPermissonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	return nil
}

// GetUserRoleAndPermissonRequestValidationError is the validation error
// returned by GetUserRoleAndPermissonRequest.Validate if the designated
// constraints aren't met.
type GetUserRoleAndPermissonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoleAndPermissonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoleAndPermissonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoleAndPermissonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoleAndPermissonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoleAndPermissonRequestValidationError) ErrorName() string {
	return "GetUserRoleAndPermissonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRoleAndPermissonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoleAndPermissonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoleAndPermissonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoleAndPermissonRequestValidationError{}

// Validate checks the field values on GetUserRoleAndPermissonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserRoleAndPermissonResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRoleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRoleAndPermissonResponseValidationError{
					field:  fmt.Sprintf("RoleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPermissionList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserRoleAndPermissonResponseValidationError{
					field:  fmt.Sprintf("PermissionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUserRoleAndPermissonResponseValidationError is the validation error
// returned by GetUserRoleAndPermissonResponse.Validate if the designated
// constraints aren't met.
type GetUserRoleAndPermissonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRoleAndPermissonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRoleAndPermissonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRoleAndPermissonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRoleAndPermissonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRoleAndPermissonResponseValidationError) ErrorName() string {
	return "GetUserRoleAndPermissonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserRoleAndPermissonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRoleAndPermissonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRoleAndPermissonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRoleAndPermissonResponseValidationError{}

// Validate checks the field values on CheckUserPermissonRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckUserPermissonRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for PermissionCode

	return nil
}

// CheckUserPermissonRequestValidationError is the validation error returned by
// CheckUserPermissonRequest.Validate if the designated constraints aren't met.
type CheckUserPermissonRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserPermissonRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserPermissonRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserPermissonRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserPermissonRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserPermissonRequestValidationError) ErrorName() string {
	return "CheckUserPermissonRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserPermissonRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserPermissonRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserPermissonRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserPermissonRequestValidationError{}

// Validate checks the field values on CheckUserPermissonResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckUserPermissonResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// CheckUserPermissonResponseValidationError is the validation error returned
// by CheckUserPermissonResponse.Validate if the designated constraints aren't met.
type CheckUserPermissonResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserPermissonResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserPermissonResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserPermissonResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserPermissonResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserPermissonResponseValidationError) ErrorName() string {
	return "CheckUserPermissonResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserPermissonResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserPermissonResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserPermissonResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserPermissonResponseValidationError{}

// Validate checks the field values on GetUserCompanyInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserCompanyInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ProductId

	return nil
}

// GetUserCompanyInfoRequestValidationError is the validation error returned by
// GetUserCompanyInfoRequest.Validate if the designated constraints aren't met.
type GetUserCompanyInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCompanyInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCompanyInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCompanyInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCompanyInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCompanyInfoRequestValidationError) ErrorName() string {
	return "GetUserCompanyInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCompanyInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCompanyInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCompanyInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCompanyInfoRequestValidationError{}

// Validate checks the field values on GetUserCompanyInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserCompanyInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for CompanyName

	return nil
}

// GetUserCompanyInfoResponseValidationError is the validation error returned
// by GetUserCompanyInfoResponse.Validate if the designated constraints aren't met.
type GetUserCompanyInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserCompanyInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserCompanyInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserCompanyInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserCompanyInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserCompanyInfoResponseValidationError) ErrorName() string {
	return "GetUserCompanyInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserCompanyInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserCompanyInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserCompanyInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserCompanyInfoResponseValidationError{}

// Validate checks the field values on GetUserInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ProductId

	return nil
}

// GetUserInfoRequestValidationError is the validation error returned by
// GetUserInfoRequest.Validate if the designated constraints aren't met.
type GetUserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoRequestValidationError) ErrorName() string {
	return "GetUserInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoRequestValidationError{}

// Validate checks the field values on GetUserInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Phone

	// no validation rules for RealName

	// no validation rules for AccountId

	// no validation rules for CompanyId

	// no validation rules for CompanyName

	// no validation rules for CompanyBoxDomain

	for idx, item := range m.GetPermissionList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserInfoResponseValidationError{
					field:  fmt.Sprintf("PermissionList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PublicBoxDomain

	// no validation rules for UserName

	// no validation rules for DisplayUserName

	// no validation rules for UserSource

	// no validation rules for UserChannel

	// no validation rules for UserReferer

	// no validation rules for HeadimgUrl

	// no validation rules for WechatUnionId

	// no validation rules for CreateTime

	// no validation rules for Email

	// no validation rules for WechatNickName

	// no validation rules for FeCode

	// no validation rules for DepartmentId

	// no validation rules for MaxProjects

	// no validation rules for StorageQuota

	return nil
}

// GetUserInfoResponseValidationError is the validation error returned by
// GetUserInfoResponse.Validate if the designated constraints aren't met.
type GetUserInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInfoResponseValidationError) ErrorName() string {
	return "GetUserInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInfoResponseValidationError{}

// Validate checks the field values on PUser with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *PUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for RealName

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Remark

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PUserValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PUserValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastLoginTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PUserValidationError{
				field:  "LastLoginTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsJoinCompany

	// no validation rules for UserName

	// no validation rules for DisplayUserName

	// no validation rules for UserChannel

	// no validation rules for UserSource

	// no validation rules for UserReferer

	// no validation rules for HeadimgUrl

	// no validation rules for WechatUnionId

	// no validation rules for WechatNickName

	// no validation rules for CompanyName

	return nil
}

// PUserValidationError is the validation error returned by PUser.Validate if
// the designated constraints aren't met.
type PUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PUserValidationError) ErrorName() string { return "PUserValidationError" }

// Error satisfies the builtin error interface
func (e PUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PUserValidationError{}

// Validate checks the field values on UserListQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserListQueryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for IsJoinCompany

	// no validation rules for OrderBy

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserListQueryRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Remark

	// no validation rules for Source

	// no validation rules for ExcludeSource

	// no validation rules for Channel

	// no validation rules for NameKey

	return nil
}

// UserListQueryRequestValidationError is the validation error returned by
// UserListQueryRequest.Validate if the designated constraints aren't met.
type UserListQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListQueryRequestValidationError) ErrorName() string {
	return "UserListQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UserListQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListQueryRequestValidationError{}

// Validate checks the field values on UserListQueryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UserListQueryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserListQueryResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserListQueryResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserListQueryResponseValidationError is the validation error returned by
// UserListQueryResponse.Validate if the designated constraints aren't met.
type UserListQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserListQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserListQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserListQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserListQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserListQueryResponseValidationError) ErrorName() string {
	return "UserListQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserListQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserListQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserListQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserListQueryResponseValidationError{}

// Validate checks the field values on AddUserRemarkRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserRemarkRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Remark

	return nil
}

// AddUserRemarkRequestValidationError is the validation error returned by
// AddUserRemarkRequest.Validate if the designated constraints aren't met.
type AddUserRemarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRemarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRemarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRemarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRemarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRemarkRequestValidationError) ErrorName() string {
	return "AddUserRemarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserRemarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserRemarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRemarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRemarkRequestValidationError{}

// Validate checks the field values on AddUserRemarkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserRemarkResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// AddUserRemarkResponseValidationError is the validation error returned by
// AddUserRemarkResponse.Validate if the designated constraints aren't met.
type AddUserRemarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRemarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRemarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRemarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRemarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRemarkResponseValidationError) ErrorName() string {
	return "AddUserRemarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserRemarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserRemarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRemarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRemarkResponseValidationError{}

// Validate checks the field values on InviteResult with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *InviteResult) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Phone

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for UserId

	return nil
}

// InviteResultValidationError is the validation error returned by
// InviteResult.Validate if the designated constraints aren't met.
type InviteResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteResultValidationError) ErrorName() string { return "InviteResultValidationError" }

// Error satisfies the builtin error interface
func (e InviteResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteResultValidationError{}

// Validate checks the field values on BatchInviteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BatchInviteUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for RoleId

	// no validation rules for CreateUid

	// no validation rules for CreateName

	// no validation rules for DepartmentId

	return nil
}

// BatchInviteUserRequestValidationError is the validation error returned by
// BatchInviteUserRequest.Validate if the designated constraints aren't met.
type BatchInviteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchInviteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchInviteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchInviteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchInviteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchInviteUserRequestValidationError) ErrorName() string {
	return "BatchInviteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BatchInviteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchInviteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchInviteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchInviteUserRequestValidationError{}

// Validate checks the field values on BatchInviteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BatchInviteUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetInviteResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BatchInviteUserResponseValidationError{
					field:  fmt.Sprintf("InviteResult[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for FailCount

	// no validation rules for SuccessCount

	return nil
}

// BatchInviteUserResponseValidationError is the validation error returned by
// BatchInviteUserResponse.Validate if the designated constraints aren't met.
type BatchInviteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchInviteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchInviteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchInviteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchInviteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchInviteUserResponseValidationError) ErrorName() string {
	return "BatchInviteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BatchInviteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchInviteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchInviteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchInviteUserResponseValidationError{}

// Validate checks the field values on GetReferedUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetReferedUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetReferedUserResponseValidationError is the validation error returned by
// GetReferedUserResponse.Validate if the designated constraints aren't met.
type GetReferedUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReferedUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReferedUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReferedUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReferedUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReferedUserResponseValidationError) ErrorName() string {
	return "GetReferedUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReferedUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReferedUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReferedUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReferedUserResponseValidationError{}

// Validate checks the field values on UpdateUserFeCodeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserFeCodeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for FeCode

	return nil
}

// UpdateUserFeCodeRequestValidationError is the validation error returned by
// UpdateUserFeCodeRequest.Validate if the designated constraints aren't met.
type UpdateUserFeCodeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserFeCodeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserFeCodeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserFeCodeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserFeCodeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserFeCodeRequestValidationError) ErrorName() string {
	return "UpdateUserFeCodeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserFeCodeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserFeCodeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserFeCodeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserFeCodeRequestValidationError{}

// Validate checks the field values on UpdateUserFeCodeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserFeCodeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// UpdateUserFeCodeResponseValidationError is the validation error returned by
// UpdateUserFeCodeResponse.Validate if the designated constraints aren't met.
type UpdateUserFeCodeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserFeCodeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserFeCodeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserFeCodeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserFeCodeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserFeCodeResponseValidationError) ErrorName() string {
	return "UpdateUserFeCodeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserFeCodeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserFeCodeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserFeCodeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserFeCodeResponseValidationError{}

// Validate checks the field values on GetUserProductListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserProductListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetUserProductListRequestValidationError is the validation error returned by
// GetUserProductListRequest.Validate if the designated constraints aren't met.
type GetUserProductListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProductListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProductListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProductListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProductListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProductListRequestValidationError) ErrorName() string {
	return "GetUserProductListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProductListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProductListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProductListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProductListRequestValidationError{}

// Validate checks the field values on GetUserProductListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserProductListResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetUserProductListResponseValidationError is the validation error returned
// by GetUserProductListResponse.Validate if the designated constraints aren't met.
type GetUserProductListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProductListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProductListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProductListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProductListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProductListResponseValidationError) ErrorName() string {
	return "GetUserProductListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProductListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProductListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProductListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProductListResponseValidationError{}

// Validate checks the field values on AddProductToUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProductToUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ProductId

	return nil
}

// AddProductToUserRequestValidationError is the validation error returned by
// AddProductToUserRequest.Validate if the designated constraints aren't met.
type AddProductToUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductToUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductToUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductToUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductToUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductToUserRequestValidationError) ErrorName() string {
	return "AddProductToUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductToUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductToUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductToUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductToUserRequestValidationError{}

// Validate checks the field values on AddProductToUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProductToUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// AddProductToUserResponseValidationError is the validation error returned by
// AddProductToUserResponse.Validate if the designated constraints aren't met.
type AddProductToUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductToUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductToUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductToUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductToUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductToUserResponseValidationError) ErrorName() string {
	return "AddProductToUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductToUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductToUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductToUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductToUserResponseValidationError{}

// Validate checks the field values on RemoveProductFromUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProductFromUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ProductId

	return nil
}

// RemoveProductFromUserRequestValidationError is the validation error returned
// by RemoveProductFromUserRequest.Validate if the designated constraints
// aren't met.
type RemoveProductFromUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProductFromUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProductFromUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProductFromUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProductFromUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProductFromUserRequestValidationError) ErrorName() string {
	return "RemoveProductFromUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProductFromUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProductFromUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProductFromUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProductFromUserRequestValidationError{}

// Validate checks the field values on RemoveProductFromUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProductFromUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// RemoveProductFromUserResponseValidationError is the validation error
// returned by RemoveProductFromUserResponse.Validate if the designated
// constraints aren't met.
type RemoveProductFromUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProductFromUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProductFromUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProductFromUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProductFromUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProductFromUserResponseValidationError) ErrorName() string {
	return "RemoveProductFromUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProductFromUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProductFromUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProductFromUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProductFromUserResponseValidationError{}

// Validate checks the field values on CheckUserProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckUserProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ProductId

	return nil
}

// CheckUserProductRequestValidationError is the validation error returned by
// CheckUserProductRequest.Validate if the designated constraints aren't met.
type CheckUserProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserProductRequestValidationError) ErrorName() string {
	return "CheckUserProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserProductRequestValidationError{}

// Validate checks the field values on CheckUserProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckUserProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Has

	return nil
}

// CheckUserProductResponseValidationError is the validation error returned by
// CheckUserProductResponse.Validate if the designated constraints aren't met.
type CheckUserProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserProductResponseValidationError) ErrorName() string {
	return "CheckUserProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserProductResponseValidationError{}
