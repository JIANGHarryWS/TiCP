// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DepartmentServiceClient is the client API for DepartmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DepartmentServiceClient interface {
	// 获取用户加入的企业部门列表
	GetUserJoinCompanyDepartmentList(ctx context.Context, in *GetUserJoinCompanyDepartmentListRequest, opts ...grpc.CallOption) (*GetUserJoinCompanyDepartmentListResponse, error)
	// 获取企业部门列表
	GetDepartmentList(ctx context.Context, in *GetDepartmentListRequest, opts ...grpc.CallOption) (*GetDepartmentListResponse, error)
	// 获取部门详情
	GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error)
	// 获取部门成员列表
	GetDepartmentUserList(ctx context.Context, in *GetDepartmentUserListRequest, opts ...grpc.CallOption) (*GetDepartmentUserListResponse, error)
	// 新增部门
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error)
	// 删除部门
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DeleteDepartmentResponse, error)
	// 修改部门
	ModifyDepartment(ctx context.Context, in *ModifyDepartmentRequest, opts ...grpc.CallOption) (*ModifyDepartmentResponse, error)
	// 删除部门成员
	DelUserFromDepartment(ctx context.Context, in *DelUserFromDepartmentRequest, opts ...grpc.CallOption) (*DelUserFromDepartmentResponse, error)
	// 添加部门成员
	AddUserToDepartment(ctx context.Context, in *AddUserToDepartmentRequest, opts ...grpc.CallOption) (*AddUserToDepartmentResponse, error)
}

type departmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDepartmentServiceClient(cc grpc.ClientConnInterface) DepartmentServiceClient {
	return &departmentServiceClient{cc}
}

func (c *departmentServiceClient) GetUserJoinCompanyDepartmentList(ctx context.Context, in *GetUserJoinCompanyDepartmentListRequest, opts ...grpc.CallOption) (*GetUserJoinCompanyDepartmentListResponse, error) {
	out := new(GetUserJoinCompanyDepartmentListResponse)
	err := c.cc.Invoke(ctx, "/company.DepartmentService/GetUserJoinCompanyDepartmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) GetDepartmentList(ctx context.Context, in *GetDepartmentListRequest, opts ...grpc.CallOption) (*GetDepartmentListResponse, error) {
	out := new(GetDepartmentListResponse)
	err := c.cc.Invoke(ctx, "/company.DepartmentService/GetDepartmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) GetDepartment(ctx context.Context, in *GetDepartmentRequest, opts ...grpc.CallOption) (*GetDepartmentResponse, error) {
	out := new(GetDepartmentResponse)
	err := c.cc.Invoke(ctx, "/company.DepartmentService/GetDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) GetDepartmentUserList(ctx context.Context, in *GetDepartmentUserListRequest, opts ...grpc.CallOption) (*GetDepartmentUserListResponse, error) {
	out := new(GetDepartmentUserListResponse)
	err := c.cc.Invoke(ctx, "/company.DepartmentService/GetDepartmentUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error) {
	out := new(CreateDepartmentResponse)
	err := c.cc.Invoke(ctx, "/company.DepartmentService/CreateDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DeleteDepartmentResponse, error) {
	out := new(DeleteDepartmentResponse)
	err := c.cc.Invoke(ctx, "/company.DepartmentService/DeleteDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) ModifyDepartment(ctx context.Context, in *ModifyDepartmentRequest, opts ...grpc.CallOption) (*ModifyDepartmentResponse, error) {
	out := new(ModifyDepartmentResponse)
	err := c.cc.Invoke(ctx, "/company.DepartmentService/ModifyDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) DelUserFromDepartment(ctx context.Context, in *DelUserFromDepartmentRequest, opts ...grpc.CallOption) (*DelUserFromDepartmentResponse, error) {
	out := new(DelUserFromDepartmentResponse)
	err := c.cc.Invoke(ctx, "/company.DepartmentService/DelUserFromDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) AddUserToDepartment(ctx context.Context, in *AddUserToDepartmentRequest, opts ...grpc.CallOption) (*AddUserToDepartmentResponse, error) {
	out := new(AddUserToDepartmentResponse)
	err := c.cc.Invoke(ctx, "/company.DepartmentService/AddUserToDepartment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DepartmentServiceServer is the server API for DepartmentService service.
// All implementations must embed UnimplementedDepartmentServiceServer
// for forward compatibility
type DepartmentServiceServer interface {
	// 获取用户加入的企业部门列表
	GetUserJoinCompanyDepartmentList(context.Context, *GetUserJoinCompanyDepartmentListRequest) (*GetUserJoinCompanyDepartmentListResponse, error)
	// 获取企业部门列表
	GetDepartmentList(context.Context, *GetDepartmentListRequest) (*GetDepartmentListResponse, error)
	// 获取部门详情
	GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error)
	// 获取部门成员列表
	GetDepartmentUserList(context.Context, *GetDepartmentUserListRequest) (*GetDepartmentUserListResponse, error)
	// 新增部门
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error)
	// 删除部门
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DeleteDepartmentResponse, error)
	// 修改部门
	ModifyDepartment(context.Context, *ModifyDepartmentRequest) (*ModifyDepartmentResponse, error)
	// 删除部门成员
	DelUserFromDepartment(context.Context, *DelUserFromDepartmentRequest) (*DelUserFromDepartmentResponse, error)
	// 添加部门成员
	AddUserToDepartment(context.Context, *AddUserToDepartmentRequest) (*AddUserToDepartmentResponse, error)
	mustEmbedUnimplementedDepartmentServiceServer()
}

// UnimplementedDepartmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDepartmentServiceServer struct {
}

func (UnimplementedDepartmentServiceServer) GetUserJoinCompanyDepartmentList(context.Context, *GetUserJoinCompanyDepartmentListRequest) (*GetUserJoinCompanyDepartmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJoinCompanyDepartmentList not implemented")
}
func (UnimplementedDepartmentServiceServer) GetDepartmentList(context.Context, *GetDepartmentListRequest) (*GetDepartmentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentList not implemented")
}
func (UnimplementedDepartmentServiceServer) GetDepartment(context.Context, *GetDepartmentRequest) (*GetDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) GetDepartmentUserList(context.Context, *GetDepartmentUserListRequest) (*GetDepartmentUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentUserList not implemented")
}
func (UnimplementedDepartmentServiceServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DeleteDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) ModifyDepartment(context.Context, *ModifyDepartmentRequest) (*ModifyDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) DelUserFromDepartment(context.Context, *DelUserFromDepartmentRequest) (*DelUserFromDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserFromDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) AddUserToDepartment(context.Context, *AddUserToDepartmentRequest) (*AddUserToDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToDepartment not implemented")
}
func (UnimplementedDepartmentServiceServer) mustEmbedUnimplementedDepartmentServiceServer() {}

// UnsafeDepartmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DepartmentServiceServer will
// result in compilation errors.
type UnsafeDepartmentServiceServer interface {
	mustEmbedUnimplementedDepartmentServiceServer()
}

func RegisterDepartmentServiceServer(s grpc.ServiceRegistrar, srv DepartmentServiceServer) {
	s.RegisterService(&DepartmentService_ServiceDesc, srv)
}

func _DepartmentService_GetUserJoinCompanyDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserJoinCompanyDepartmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetUserJoinCompanyDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.DepartmentService/GetUserJoinCompanyDepartmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetUserJoinCompanyDepartmentList(ctx, req.(*GetUserJoinCompanyDepartmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_GetDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.DepartmentService/GetDepartmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetDepartmentList(ctx, req.(*GetDepartmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_GetDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.DepartmentService/GetDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetDepartment(ctx, req.(*GetDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_GetDepartmentUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).GetDepartmentUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.DepartmentService/GetDepartmentUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).GetDepartmentUserList(ctx, req.(*GetDepartmentUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.DepartmentService/CreateDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.DepartmentService/DeleteDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_ModifyDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).ModifyDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.DepartmentService/ModifyDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).ModifyDepartment(ctx, req.(*ModifyDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_DelUserFromDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserFromDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).DelUserFromDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.DepartmentService/DelUserFromDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).DelUserFromDepartment(ctx, req.(*DelUserFromDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_AddUserToDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).AddUserToDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.DepartmentService/AddUserToDepartment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).AddUserToDepartment(ctx, req.(*AddUserToDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DepartmentService_ServiceDesc is the grpc.ServiceDesc for DepartmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DepartmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.DepartmentService",
	HandlerType: (*DepartmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserJoinCompanyDepartmentList",
			Handler:    _DepartmentService_GetUserJoinCompanyDepartmentList_Handler,
		},
		{
			MethodName: "GetDepartmentList",
			Handler:    _DepartmentService_GetDepartmentList_Handler,
		},
		{
			MethodName: "GetDepartment",
			Handler:    _DepartmentService_GetDepartment_Handler,
		},
		{
			MethodName: "GetDepartmentUserList",
			Handler:    _DepartmentService_GetDepartmentUserList_Handler,
		},
		{
			MethodName: "CreateDepartment",
			Handler:    _DepartmentService_CreateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _DepartmentService_DeleteDepartment_Handler,
		},
		{
			MethodName: "ModifyDepartment",
			Handler:    _DepartmentService_ModifyDepartment_Handler,
		},
		{
			MethodName: "DelUserFromDepartment",
			Handler:    _DepartmentService_DelUserFromDepartment_Handler,
		},
		{
			MethodName: "AddUserToDepartment",
			Handler:    _DepartmentService_AddUserToDepartment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/department.proto",
}
