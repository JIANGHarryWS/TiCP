// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TroubleShootServiceClient is the client API for TroubleShootService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TroubleShootServiceClient interface {
	CreateTroubleShoot(ctx context.Context, in *CreateTroubleShootRequest, opts ...grpc.CallOption) (*CreateTroubleShootResponse, error)
	ListTroubleShoot(ctx context.Context, in *ListTroubleShootRequest, opts ...grpc.CallOption) (*ListTroubleShootResponse, error)
	UpdateTroubleShootResolved(ctx context.Context, in *UpdateTroubleShootResolvedRequest, opts ...grpc.CallOption) (*UpdateTroubleShootResolvedResponse, error)
	CreateTroubleShootRecord(ctx context.Context, in *CreateTroubleShootRecordRequest, opts ...grpc.CallOption) (*CreateTroubleShootRecordResponse, error)
	GetTroubleShoot(ctx context.Context, in *GetTroubleShootRequest, opts ...grpc.CallOption) (*GetTroubleShootResponse, error)
	GetTroubleShootCount(ctx context.Context, in *GetTroubleShootCountRequest, opts ...grpc.CallOption) (*GetTroubleShootCountResponse, error)
	MigrateTroubleShoot(ctx context.Context, in *MigrateTroubleShootRequest, opts ...grpc.CallOption) (*MigrateTroubleShootResponse, error)
}

type troubleShootServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTroubleShootServiceClient(cc grpc.ClientConnInterface) TroubleShootServiceClient {
	return &troubleShootServiceClient{cc}
}

func (c *troubleShootServiceClient) CreateTroubleShoot(ctx context.Context, in *CreateTroubleShootRequest, opts ...grpc.CallOption) (*CreateTroubleShootResponse, error) {
	out := new(CreateTroubleShootResponse)
	err := c.cc.Invoke(ctx, "/company.TroubleShootService/CreateTroubleShoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleShootServiceClient) ListTroubleShoot(ctx context.Context, in *ListTroubleShootRequest, opts ...grpc.CallOption) (*ListTroubleShootResponse, error) {
	out := new(ListTroubleShootResponse)
	err := c.cc.Invoke(ctx, "/company.TroubleShootService/ListTroubleShoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleShootServiceClient) UpdateTroubleShootResolved(ctx context.Context, in *UpdateTroubleShootResolvedRequest, opts ...grpc.CallOption) (*UpdateTroubleShootResolvedResponse, error) {
	out := new(UpdateTroubleShootResolvedResponse)
	err := c.cc.Invoke(ctx, "/company.TroubleShootService/UpdateTroubleShootResolved", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleShootServiceClient) CreateTroubleShootRecord(ctx context.Context, in *CreateTroubleShootRecordRequest, opts ...grpc.CallOption) (*CreateTroubleShootRecordResponse, error) {
	out := new(CreateTroubleShootRecordResponse)
	err := c.cc.Invoke(ctx, "/company.TroubleShootService/CreateTroubleShootRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleShootServiceClient) GetTroubleShoot(ctx context.Context, in *GetTroubleShootRequest, opts ...grpc.CallOption) (*GetTroubleShootResponse, error) {
	out := new(GetTroubleShootResponse)
	err := c.cc.Invoke(ctx, "/company.TroubleShootService/GetTroubleShoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleShootServiceClient) GetTroubleShootCount(ctx context.Context, in *GetTroubleShootCountRequest, opts ...grpc.CallOption) (*GetTroubleShootCountResponse, error) {
	out := new(GetTroubleShootCountResponse)
	err := c.cc.Invoke(ctx, "/company.TroubleShootService/GetTroubleShootCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *troubleShootServiceClient) MigrateTroubleShoot(ctx context.Context, in *MigrateTroubleShootRequest, opts ...grpc.CallOption) (*MigrateTroubleShootResponse, error) {
	out := new(MigrateTroubleShootResponse)
	err := c.cc.Invoke(ctx, "/company.TroubleShootService/MigrateTroubleShoot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TroubleShootServiceServer is the server API for TroubleShootService service.
// All implementations must embed UnimplementedTroubleShootServiceServer
// for forward compatibility
type TroubleShootServiceServer interface {
	CreateTroubleShoot(context.Context, *CreateTroubleShootRequest) (*CreateTroubleShootResponse, error)
	ListTroubleShoot(context.Context, *ListTroubleShootRequest) (*ListTroubleShootResponse, error)
	UpdateTroubleShootResolved(context.Context, *UpdateTroubleShootResolvedRequest) (*UpdateTroubleShootResolvedResponse, error)
	CreateTroubleShootRecord(context.Context, *CreateTroubleShootRecordRequest) (*CreateTroubleShootRecordResponse, error)
	GetTroubleShoot(context.Context, *GetTroubleShootRequest) (*GetTroubleShootResponse, error)
	GetTroubleShootCount(context.Context, *GetTroubleShootCountRequest) (*GetTroubleShootCountResponse, error)
	MigrateTroubleShoot(context.Context, *MigrateTroubleShootRequest) (*MigrateTroubleShootResponse, error)
	mustEmbedUnimplementedTroubleShootServiceServer()
}

// UnimplementedTroubleShootServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTroubleShootServiceServer struct {
}

func (UnimplementedTroubleShootServiceServer) CreateTroubleShoot(context.Context, *CreateTroubleShootRequest) (*CreateTroubleShootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTroubleShoot not implemented")
}
func (UnimplementedTroubleShootServiceServer) ListTroubleShoot(context.Context, *ListTroubleShootRequest) (*ListTroubleShootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTroubleShoot not implemented")
}
func (UnimplementedTroubleShootServiceServer) UpdateTroubleShootResolved(context.Context, *UpdateTroubleShootResolvedRequest) (*UpdateTroubleShootResolvedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTroubleShootResolved not implemented")
}
func (UnimplementedTroubleShootServiceServer) CreateTroubleShootRecord(context.Context, *CreateTroubleShootRecordRequest) (*CreateTroubleShootRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTroubleShootRecord not implemented")
}
func (UnimplementedTroubleShootServiceServer) GetTroubleShoot(context.Context, *GetTroubleShootRequest) (*GetTroubleShootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTroubleShoot not implemented")
}
func (UnimplementedTroubleShootServiceServer) GetTroubleShootCount(context.Context, *GetTroubleShootCountRequest) (*GetTroubleShootCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTroubleShootCount not implemented")
}
func (UnimplementedTroubleShootServiceServer) MigrateTroubleShoot(context.Context, *MigrateTroubleShootRequest) (*MigrateTroubleShootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateTroubleShoot not implemented")
}
func (UnimplementedTroubleShootServiceServer) mustEmbedUnimplementedTroubleShootServiceServer() {}

// UnsafeTroubleShootServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TroubleShootServiceServer will
// result in compilation errors.
type UnsafeTroubleShootServiceServer interface {
	mustEmbedUnimplementedTroubleShootServiceServer()
}

func RegisterTroubleShootServiceServer(s grpc.ServiceRegistrar, srv TroubleShootServiceServer) {
	s.RegisterService(&TroubleShootService_ServiceDesc, srv)
}

func _TroubleShootService_CreateTroubleShoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTroubleShootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleShootServiceServer).CreateTroubleShoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TroubleShootService/CreateTroubleShoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleShootServiceServer).CreateTroubleShoot(ctx, req.(*CreateTroubleShootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleShootService_ListTroubleShoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTroubleShootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleShootServiceServer).ListTroubleShoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TroubleShootService/ListTroubleShoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleShootServiceServer).ListTroubleShoot(ctx, req.(*ListTroubleShootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleShootService_UpdateTroubleShootResolved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTroubleShootResolvedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleShootServiceServer).UpdateTroubleShootResolved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TroubleShootService/UpdateTroubleShootResolved",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleShootServiceServer).UpdateTroubleShootResolved(ctx, req.(*UpdateTroubleShootResolvedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleShootService_CreateTroubleShootRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTroubleShootRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleShootServiceServer).CreateTroubleShootRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TroubleShootService/CreateTroubleShootRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleShootServiceServer).CreateTroubleShootRecord(ctx, req.(*CreateTroubleShootRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleShootService_GetTroubleShoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTroubleShootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleShootServiceServer).GetTroubleShoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TroubleShootService/GetTroubleShoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleShootServiceServer).GetTroubleShoot(ctx, req.(*GetTroubleShootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleShootService_GetTroubleShootCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTroubleShootCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleShootServiceServer).GetTroubleShootCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TroubleShootService/GetTroubleShootCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleShootServiceServer).GetTroubleShootCount(ctx, req.(*GetTroubleShootCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TroubleShootService_MigrateTroubleShoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateTroubleShootRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TroubleShootServiceServer).MigrateTroubleShoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TroubleShootService/MigrateTroubleShoot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TroubleShootServiceServer).MigrateTroubleShoot(ctx, req.(*MigrateTroubleShootRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TroubleShootService_ServiceDesc is the grpc.ServiceDesc for TroubleShootService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TroubleShootService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.TroubleShootService",
	HandlerType: (*TroubleShootServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTroubleShoot",
			Handler:    _TroubleShootService_CreateTroubleShoot_Handler,
		},
		{
			MethodName: "ListTroubleShoot",
			Handler:    _TroubleShootService_ListTroubleShoot_Handler,
		},
		{
			MethodName: "UpdateTroubleShootResolved",
			Handler:    _TroubleShootService_UpdateTroubleShootResolved_Handler,
		},
		{
			MethodName: "CreateTroubleShootRecord",
			Handler:    _TroubleShootService_CreateTroubleShootRecord_Handler,
		},
		{
			MethodName: "GetTroubleShoot",
			Handler:    _TroubleShootService_GetTroubleShoot_Handler,
		},
		{
			MethodName: "GetTroubleShootCount",
			Handler:    _TroubleShootService_GetTroubleShootCount_Handler,
		},
		{
			MethodName: "MigrateTroubleShoot",
			Handler:    _TroubleShootService_MigrateTroubleShoot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/troubleshoot.proto",
}
