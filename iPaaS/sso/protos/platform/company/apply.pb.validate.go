// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/apply.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CompanyApply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CompanyApply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplyId

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for CompanyName

	// no validation rules for Industry

	// no validation rules for Phone

	// no validation rules for EngineerNum

	// no validation rules for ProductId

	// no validation rules for Status

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyApplyValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyApplyValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CompanyApplyValidationError is the validation error returned by
// CompanyApply.Validate if the designated constraints aren't met.
type CompanyApplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyApplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyApplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyApplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyApplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyApplyValidationError) ErrorName() string { return "CompanyApplyValidationError" }

// Error satisfies the builtin error interface
func (e CompanyApplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyApply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyApplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyApplyValidationError{}

// Validate checks the field values on ApplyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ApplyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyName

	// no validation rules for Industry

	// no validation rules for EngineerNum

	// no validation rules for UserName

	return nil
}

// ApplyRequestValidationError is the validation error returned by
// ApplyRequest.Validate if the designated constraints aren't met.
type ApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyRequestValidationError) ErrorName() string { return "ApplyRequestValidationError" }

// Error satisfies the builtin error interface
func (e ApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyRequestValidationError{}

// Validate checks the field values on GetApplyByUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetApplyByUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetApplyByUserRequestValidationError is the validation error returned by
// GetApplyByUserRequest.Validate if the designated constraints aren't met.
type GetApplyByUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetApplyByUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetApplyByUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetApplyByUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetApplyByUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetApplyByUserRequestValidationError) ErrorName() string {
	return "GetApplyByUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetApplyByUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetApplyByUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetApplyByUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetApplyByUserRequestValidationError{}

// Validate checks the field values on GetAllApplyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllApplyListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for NameKeyword

	// no validation rules for SoftwareKeyword

	// no validation rules for ReasonKeyword

	// no validation rules for IndustryKeyword

	// no validation rules for MinEngineerNum

	// no validation rules for MaxEngineerNum

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllApplyListRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllApplyListRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllApplyListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAllApplyListRequestValidationError is the validation error returned by
// GetAllApplyListRequest.Validate if the designated constraints aren't met.
type GetAllApplyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllApplyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllApplyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllApplyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllApplyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllApplyListRequestValidationError) ErrorName() string {
	return "GetAllApplyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllApplyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllApplyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllApplyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllApplyListRequestValidationError{}

// Validate checks the field values on GetAllApplyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAllApplyListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllApplyListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAllApplyListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAllApplyListResponseValidationError is the validation error returned by
// GetAllApplyListResponse.Validate if the designated constraints aren't met.
type GetAllApplyListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllApplyListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllApplyListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllApplyListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllApplyListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllApplyListResponseValidationError) ErrorName() string {
	return "GetAllApplyListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllApplyListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllApplyListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllApplyListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllApplyListResponseValidationError{}

// Validate checks the field values on TrialApply with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TrialApply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for TrialResourceType

	// no validation rules for TrialResourceKey

	// no validation rules for Status

	// no validation rules for ApplySource

	// no validation rules for Remark

	// no validation rules for ProductId

	// no validation rules for CoreHour

	// no validation rules for AuditUname

	if v, ok := interface{}(m.GetAuditTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrialApplyValidationError{
				field:  "AuditTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrialApplyValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TrialApplyValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TrialApplyValidationError is the validation error returned by
// TrialApply.Validate if the designated constraints aren't met.
type TrialApplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrialApplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrialApplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrialApplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrialApplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrialApplyValidationError) ErrorName() string { return "TrialApplyValidationError" }

// Error satisfies the builtin error interface
func (e TrialApplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrialApply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrialApplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrialApplyValidationError{}

// Validate checks the field values on TrialInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TrialInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for UserName

	// no validation rules for CompanyId

	// no validation rules for CompanyName

	// no validation rules for Phone

	// no validation rules for TotalAvaliableCorehour

	// no validation rules for UsedCorehour

	// no validation rules for RemainCorehour

	// no validation rules for ProductId

	// no validation rules for TrialResourceType

	// no validation rules for TrialResourceKey

	return nil
}

// TrialInfoValidationError is the validation error returned by
// TrialInfo.Validate if the designated constraints aren't met.
type TrialInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrialInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrialInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrialInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrialInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrialInfoValidationError) ErrorName() string { return "TrialInfoValidationError" }

// Error satisfies the builtin error interface
func (e TrialInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrialInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrialInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrialInfoValidationError{}

// Validate checks the field values on CreateTrialApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTrialApplyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for TrialResourceType

	// no validation rules for TrialResourceKey

	// no validation rules for Status

	// no validation rules for ApplySource

	// no validation rules for ProductId

	// no validation rules for Remark

	return nil
}

// CreateTrialApplyRequestValidationError is the validation error returned by
// CreateTrialApplyRequest.Validate if the designated constraints aren't met.
type CreateTrialApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTrialApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTrialApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTrialApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTrialApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTrialApplyRequestValidationError) ErrorName() string {
	return "CreateTrialApplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTrialApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTrialApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTrialApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTrialApplyRequestValidationError{}

// Validate checks the field values on UpdateTrialApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTrialApplyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplyId

	// no validation rules for Status

	// no validation rules for Remark

	return nil
}

// UpdateTrialApplyRequestValidationError is the validation error returned by
// UpdateTrialApplyRequest.Validate if the designated constraints aren't met.
type UpdateTrialApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTrialApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTrialApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTrialApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTrialApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTrialApplyRequestValidationError) ErrorName() string {
	return "UpdateTrialApplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTrialApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTrialApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTrialApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTrialApplyRequestValidationError{}

// Validate checks the field values on AuditTrailApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuditTrailApplyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplyId

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for AuditUname

	return nil
}

// AuditTrailApplyRequestValidationError is the validation error returned by
// AuditTrailApplyRequest.Validate if the designated constraints aren't met.
type AuditTrailApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuditTrailApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuditTrailApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuditTrailApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuditTrailApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuditTrailApplyRequestValidationError) ErrorName() string {
	return "AuditTrailApplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuditTrailApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuditTrailApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuditTrailApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuditTrailApplyRequestValidationError{}

// Validate checks the field values on GetTrailApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTrailApplyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ApplyId

	return nil
}

// GetTrailApplyRequestValidationError is the validation error returned by
// GetTrailApplyRequest.Validate if the designated constraints aren't met.
type GetTrailApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrailApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrailApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrailApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrailApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrailApplyRequestValidationError) ErrorName() string {
	return "GetTrailApplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrailApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrailApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrailApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrailApplyRequestValidationError{}

// Validate checks the field values on ListTrailApplyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTrailApplyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for UserKey

	// no validation rules for TrialResourceType

	// no validation rules for TrialResourceKey

	// no validation rules for ProductId

	// no validation rules for CompanyId

	// no validation rules for RemarkKey

	// no validation rules for ApplySource

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTrailApplyRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTrailApplyRequestValidationError is the validation error returned by
// ListTrailApplyRequest.Validate if the designated constraints aren't met.
type ListTrailApplyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrailApplyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrailApplyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrailApplyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrailApplyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrailApplyRequestValidationError) ErrorName() string {
	return "ListTrailApplyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrailApplyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrailApplyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrailApplyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrailApplyRequestValidationError{}

// Validate checks the field values on ListTrailApplyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTrailApplyResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTrailApplyResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTrailApplyResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTrailApplyResponseValidationError is the validation error returned by
// ListTrailApplyResponse.Validate if the designated constraints aren't met.
type ListTrailApplyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrailApplyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrailApplyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrailApplyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrailApplyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrailApplyResponseValidationError) ErrorName() string {
	return "ListTrailApplyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrailApplyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrailApplyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrailApplyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrailApplyResponseValidationError{}

// Validate checks the field values on GetTrialInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTrialInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetTrialInfoRequestValidationError is the validation error returned by
// GetTrialInfoRequest.Validate if the designated constraints aren't met.
type GetTrialInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTrialInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTrialInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTrialInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTrialInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTrialInfoRequestValidationError) ErrorName() string {
	return "GetTrialInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTrialInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTrialInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTrialInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTrialInfoRequestValidationError{}

// Validate checks the field values on UpdateTrialInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTrialInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// UpdateTrialInfoRequestValidationError is the validation error returned by
// UpdateTrialInfoRequest.Validate if the designated constraints aren't met.
type UpdateTrialInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTrialInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTrialInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTrialInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTrialInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTrialInfoRequestValidationError) ErrorName() string {
	return "UpdateTrialInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTrialInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTrialInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTrialInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTrialInfoRequestValidationError{}

// Validate checks the field values on ListTrialInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTrialInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserKey

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTrialInfoRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTrialInfoRequestValidationError is the validation error returned by
// ListTrialInfoRequest.Validate if the designated constraints aren't met.
type ListTrialInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrialInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrialInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrialInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrialInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrialInfoRequestValidationError) ErrorName() string {
	return "ListTrialInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrialInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrialInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrialInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrialInfoRequestValidationError{}

// Validate checks the field values on ListTrialInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTrialInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTrialInfoResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTrialInfoResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTrialInfoResponseValidationError is the validation error returned by
// ListTrialInfoResponse.Validate if the designated constraints aren't met.
type ListTrialInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTrialInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTrialInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTrialInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTrialInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTrialInfoResponseValidationError) ErrorName() string {
	return "ListTrialInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTrialInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTrialInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTrialInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTrialInfoResponseValidationError{}
