// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyCheckServiceClient is the client API for CompanyCheckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyCheckServiceClient interface {
	// CompanyMerchandiseResourceIsPriced check is app runtime in list priced in company
	CompanyMerchandiseResourceIsPriced(ctx context.Context, in *CompanyMerchandiseResourceIsPricedRequest, opts ...grpc.CallOption) (*CompanyMerchandiseResourceIsPricedResponse, error)
}

type companyCheckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyCheckServiceClient(cc grpc.ClientConnInterface) CompanyCheckServiceClient {
	return &companyCheckServiceClient{cc}
}

func (c *companyCheckServiceClient) CompanyMerchandiseResourceIsPriced(ctx context.Context, in *CompanyMerchandiseResourceIsPricedRequest, opts ...grpc.CallOption) (*CompanyMerchandiseResourceIsPricedResponse, error) {
	out := new(CompanyMerchandiseResourceIsPricedResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyCheckService/CompanyMerchandiseResourceIsPriced", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyCheckServiceServer is the server API for CompanyCheckService service.
// All implementations must embed UnimplementedCompanyCheckServiceServer
// for forward compatibility
type CompanyCheckServiceServer interface {
	// CompanyMerchandiseResourceIsPriced check is app runtime in list priced in company
	CompanyMerchandiseResourceIsPriced(context.Context, *CompanyMerchandiseResourceIsPricedRequest) (*CompanyMerchandiseResourceIsPricedResponse, error)
	mustEmbedUnimplementedCompanyCheckServiceServer()
}

// UnimplementedCompanyCheckServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyCheckServiceServer struct {
}

func (UnimplementedCompanyCheckServiceServer) CompanyMerchandiseResourceIsPriced(context.Context, *CompanyMerchandiseResourceIsPricedRequest) (*CompanyMerchandiseResourceIsPricedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyMerchandiseResourceIsPriced not implemented")
}
func (UnimplementedCompanyCheckServiceServer) mustEmbedUnimplementedCompanyCheckServiceServer() {}

// UnsafeCompanyCheckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyCheckServiceServer will
// result in compilation errors.
type UnsafeCompanyCheckServiceServer interface {
	mustEmbedUnimplementedCompanyCheckServiceServer()
}

func RegisterCompanyCheckServiceServer(s grpc.ServiceRegistrar, srv CompanyCheckServiceServer) {
	s.RegisterService(&CompanyCheckService_ServiceDesc, srv)
}

func _CompanyCheckService_CompanyMerchandiseResourceIsPriced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyMerchandiseResourceIsPricedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyCheckServiceServer).CompanyMerchandiseResourceIsPriced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyCheckService/CompanyMerchandiseResourceIsPriced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyCheckServiceServer).CompanyMerchandiseResourceIsPriced(ctx, req.(*CompanyMerchandiseResourceIsPricedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyCheckService_ServiceDesc is the grpc.ServiceDesc for CompanyCheckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyCheckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyCheckService",
	HandlerType: (*CompanyCheckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompanyMerchandiseResourceIsPriced",
			Handler:    _CompanyCheckService_CompanyMerchandiseResourceIsPriced_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/company_check.proto",
}
