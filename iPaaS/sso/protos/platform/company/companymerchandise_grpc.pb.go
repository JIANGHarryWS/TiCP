// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyMerchandiseServiceClient is the client API for CompanyMerchandiseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyMerchandiseServiceClient interface {
	// Query company merchandises
	CompanyMerchandiseQuery(ctx context.Context, in *CompanyMerchandiseQueryRequest, opts ...grpc.CallOption) (*CompanyMerchandiseQueryResponse, error)
	// Query company bundle merchandises
	CompanyBundleMerchandiseQuery(ctx context.Context, in *CompanyBundleMerchandiseQueryRequest, opts ...grpc.CallOption) (*CompanyBundleMerchandiseQueryResponse, error)
	// Add merchandise to a company.
	AddCompanyMerchandise(ctx context.Context, in *AddCompanyMerchandiseRequest, opts ...grpc.CallOption) (*AddCompanyMerchandiseResponse, error)
	// 批量添加企业商品
	BatchAddCompanyMerchandise(ctx context.Context, in *BatchAddCompanyMerchandiseRequest, opts ...grpc.CallOption) (*BatchAddCompanyMerchandiseResponse, error)
	// Update company merchandise info.
	UpdateCompanyMerchandiseState(ctx context.Context, in *UpdateCompanyMerchandiseStateRequest, opts ...grpc.CallOption) (*UpdateCompanyMerchandiseStateResponse, error)
	// 获取企业/个人已生效价格商品列表 未分页
	GetCompanyPriceMerchandise(ctx context.Context, in *GetCompanyPriceMerchandiseRequest, opts ...grpc.CallOption) (*GetCompanyPriceMerchandiseResponse, error)
	// 获取企业已生效商品License
	GetCompanyMerchandiseLicense(ctx context.Context, in *GetCompanyMerchandiseLicenseReq, opts ...grpc.CallOption) (*CompanyMerchandiseLicense, error)
	// 为企业商品设置License
	SaveCompanyMerchandiseLicense(ctx context.Context, in *SaveCompanyMerchandiseLicenseReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取企业/个人已生效价格的指定商品
	GetCompanyPriceApplicationMerchandise(ctx context.Context, in *GetCompanyPriceApplicationMerchandiseRequest, opts ...grpc.CallOption) (*GetCompanyPriceApplicationMerchandiseResponse, error)
}

type companyMerchandiseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyMerchandiseServiceClient(cc grpc.ClientConnInterface) CompanyMerchandiseServiceClient {
	return &companyMerchandiseServiceClient{cc}
}

func (c *companyMerchandiseServiceClient) CompanyMerchandiseQuery(ctx context.Context, in *CompanyMerchandiseQueryRequest, opts ...grpc.CallOption) (*CompanyMerchandiseQueryResponse, error) {
	out := new(CompanyMerchandiseQueryResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyMerchandiseService/CompanyMerchandiseQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyMerchandiseServiceClient) CompanyBundleMerchandiseQuery(ctx context.Context, in *CompanyBundleMerchandiseQueryRequest, opts ...grpc.CallOption) (*CompanyBundleMerchandiseQueryResponse, error) {
	out := new(CompanyBundleMerchandiseQueryResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyMerchandiseService/CompanyBundleMerchandiseQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyMerchandiseServiceClient) AddCompanyMerchandise(ctx context.Context, in *AddCompanyMerchandiseRequest, opts ...grpc.CallOption) (*AddCompanyMerchandiseResponse, error) {
	out := new(AddCompanyMerchandiseResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyMerchandiseService/AddCompanyMerchandise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyMerchandiseServiceClient) BatchAddCompanyMerchandise(ctx context.Context, in *BatchAddCompanyMerchandiseRequest, opts ...grpc.CallOption) (*BatchAddCompanyMerchandiseResponse, error) {
	out := new(BatchAddCompanyMerchandiseResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyMerchandiseService/BatchAddCompanyMerchandise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyMerchandiseServiceClient) UpdateCompanyMerchandiseState(ctx context.Context, in *UpdateCompanyMerchandiseStateRequest, opts ...grpc.CallOption) (*UpdateCompanyMerchandiseStateResponse, error) {
	out := new(UpdateCompanyMerchandiseStateResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyMerchandiseService/UpdateCompanyMerchandiseState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyMerchandiseServiceClient) GetCompanyPriceMerchandise(ctx context.Context, in *GetCompanyPriceMerchandiseRequest, opts ...grpc.CallOption) (*GetCompanyPriceMerchandiseResponse, error) {
	out := new(GetCompanyPriceMerchandiseResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyMerchandiseService/GetCompanyPriceMerchandise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyMerchandiseServiceClient) GetCompanyMerchandiseLicense(ctx context.Context, in *GetCompanyMerchandiseLicenseReq, opts ...grpc.CallOption) (*CompanyMerchandiseLicense, error) {
	out := new(CompanyMerchandiseLicense)
	err := c.cc.Invoke(ctx, "/company.CompanyMerchandiseService/GetCompanyMerchandiseLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyMerchandiseServiceClient) SaveCompanyMerchandiseLicense(ctx context.Context, in *SaveCompanyMerchandiseLicenseReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/company.CompanyMerchandiseService/SaveCompanyMerchandiseLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyMerchandiseServiceClient) GetCompanyPriceApplicationMerchandise(ctx context.Context, in *GetCompanyPriceApplicationMerchandiseRequest, opts ...grpc.CallOption) (*GetCompanyPriceApplicationMerchandiseResponse, error) {
	out := new(GetCompanyPriceApplicationMerchandiseResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyMerchandiseService/GetCompanyPriceApplicationMerchandise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyMerchandiseServiceServer is the server API for CompanyMerchandiseService service.
// All implementations must embed UnimplementedCompanyMerchandiseServiceServer
// for forward compatibility
type CompanyMerchandiseServiceServer interface {
	// Query company merchandises
	CompanyMerchandiseQuery(context.Context, *CompanyMerchandiseQueryRequest) (*CompanyMerchandiseQueryResponse, error)
	// Query company bundle merchandises
	CompanyBundleMerchandiseQuery(context.Context, *CompanyBundleMerchandiseQueryRequest) (*CompanyBundleMerchandiseQueryResponse, error)
	// Add merchandise to a company.
	AddCompanyMerchandise(context.Context, *AddCompanyMerchandiseRequest) (*AddCompanyMerchandiseResponse, error)
	// 批量添加企业商品
	BatchAddCompanyMerchandise(context.Context, *BatchAddCompanyMerchandiseRequest) (*BatchAddCompanyMerchandiseResponse, error)
	// Update company merchandise info.
	UpdateCompanyMerchandiseState(context.Context, *UpdateCompanyMerchandiseStateRequest) (*UpdateCompanyMerchandiseStateResponse, error)
	// 获取企业/个人已生效价格商品列表 未分页
	GetCompanyPriceMerchandise(context.Context, *GetCompanyPriceMerchandiseRequest) (*GetCompanyPriceMerchandiseResponse, error)
	// 获取企业已生效商品License
	GetCompanyMerchandiseLicense(context.Context, *GetCompanyMerchandiseLicenseReq) (*CompanyMerchandiseLicense, error)
	// 为企业商品设置License
	SaveCompanyMerchandiseLicense(context.Context, *SaveCompanyMerchandiseLicenseReq) (*emptypb.Empty, error)
	// 获取企业/个人已生效价格的指定商品
	GetCompanyPriceApplicationMerchandise(context.Context, *GetCompanyPriceApplicationMerchandiseRequest) (*GetCompanyPriceApplicationMerchandiseResponse, error)
	mustEmbedUnimplementedCompanyMerchandiseServiceServer()
}

// UnimplementedCompanyMerchandiseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyMerchandiseServiceServer struct {
}

func (UnimplementedCompanyMerchandiseServiceServer) CompanyMerchandiseQuery(context.Context, *CompanyMerchandiseQueryRequest) (*CompanyMerchandiseQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyMerchandiseQuery not implemented")
}
func (UnimplementedCompanyMerchandiseServiceServer) CompanyBundleMerchandiseQuery(context.Context, *CompanyBundleMerchandiseQueryRequest) (*CompanyBundleMerchandiseQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompanyBundleMerchandiseQuery not implemented")
}
func (UnimplementedCompanyMerchandiseServiceServer) AddCompanyMerchandise(context.Context, *AddCompanyMerchandiseRequest) (*AddCompanyMerchandiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCompanyMerchandise not implemented")
}
func (UnimplementedCompanyMerchandiseServiceServer) BatchAddCompanyMerchandise(context.Context, *BatchAddCompanyMerchandiseRequest) (*BatchAddCompanyMerchandiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAddCompanyMerchandise not implemented")
}
func (UnimplementedCompanyMerchandiseServiceServer) UpdateCompanyMerchandiseState(context.Context, *UpdateCompanyMerchandiseStateRequest) (*UpdateCompanyMerchandiseStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyMerchandiseState not implemented")
}
func (UnimplementedCompanyMerchandiseServiceServer) GetCompanyPriceMerchandise(context.Context, *GetCompanyPriceMerchandiseRequest) (*GetCompanyPriceMerchandiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyPriceMerchandise not implemented")
}
func (UnimplementedCompanyMerchandiseServiceServer) GetCompanyMerchandiseLicense(context.Context, *GetCompanyMerchandiseLicenseReq) (*CompanyMerchandiseLicense, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyMerchandiseLicense not implemented")
}
func (UnimplementedCompanyMerchandiseServiceServer) SaveCompanyMerchandiseLicense(context.Context, *SaveCompanyMerchandiseLicenseReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCompanyMerchandiseLicense not implemented")
}
func (UnimplementedCompanyMerchandiseServiceServer) GetCompanyPriceApplicationMerchandise(context.Context, *GetCompanyPriceApplicationMerchandiseRequest) (*GetCompanyPriceApplicationMerchandiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyPriceApplicationMerchandise not implemented")
}
func (UnimplementedCompanyMerchandiseServiceServer) mustEmbedUnimplementedCompanyMerchandiseServiceServer() {
}

// UnsafeCompanyMerchandiseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyMerchandiseServiceServer will
// result in compilation errors.
type UnsafeCompanyMerchandiseServiceServer interface {
	mustEmbedUnimplementedCompanyMerchandiseServiceServer()
}

func RegisterCompanyMerchandiseServiceServer(s grpc.ServiceRegistrar, srv CompanyMerchandiseServiceServer) {
	s.RegisterService(&CompanyMerchandiseService_ServiceDesc, srv)
}

func _CompanyMerchandiseService_CompanyMerchandiseQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyMerchandiseQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyMerchandiseServiceServer).CompanyMerchandiseQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyMerchandiseService/CompanyMerchandiseQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyMerchandiseServiceServer).CompanyMerchandiseQuery(ctx, req.(*CompanyMerchandiseQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyMerchandiseService_CompanyBundleMerchandiseQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyBundleMerchandiseQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyMerchandiseServiceServer).CompanyBundleMerchandiseQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyMerchandiseService/CompanyBundleMerchandiseQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyMerchandiseServiceServer).CompanyBundleMerchandiseQuery(ctx, req.(*CompanyBundleMerchandiseQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyMerchandiseService_AddCompanyMerchandise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCompanyMerchandiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyMerchandiseServiceServer).AddCompanyMerchandise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyMerchandiseService/AddCompanyMerchandise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyMerchandiseServiceServer).AddCompanyMerchandise(ctx, req.(*AddCompanyMerchandiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyMerchandiseService_BatchAddCompanyMerchandise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAddCompanyMerchandiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyMerchandiseServiceServer).BatchAddCompanyMerchandise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyMerchandiseService/BatchAddCompanyMerchandise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyMerchandiseServiceServer).BatchAddCompanyMerchandise(ctx, req.(*BatchAddCompanyMerchandiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyMerchandiseService_UpdateCompanyMerchandiseState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyMerchandiseStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyMerchandiseServiceServer).UpdateCompanyMerchandiseState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyMerchandiseService/UpdateCompanyMerchandiseState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyMerchandiseServiceServer).UpdateCompanyMerchandiseState(ctx, req.(*UpdateCompanyMerchandiseStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyMerchandiseService_GetCompanyPriceMerchandise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyPriceMerchandiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyMerchandiseServiceServer).GetCompanyPriceMerchandise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyMerchandiseService/GetCompanyPriceMerchandise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyMerchandiseServiceServer).GetCompanyPriceMerchandise(ctx, req.(*GetCompanyPriceMerchandiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyMerchandiseService_GetCompanyMerchandiseLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyMerchandiseLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyMerchandiseServiceServer).GetCompanyMerchandiseLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyMerchandiseService/GetCompanyMerchandiseLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyMerchandiseServiceServer).GetCompanyMerchandiseLicense(ctx, req.(*GetCompanyMerchandiseLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyMerchandiseService_SaveCompanyMerchandiseLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveCompanyMerchandiseLicenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyMerchandiseServiceServer).SaveCompanyMerchandiseLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyMerchandiseService/SaveCompanyMerchandiseLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyMerchandiseServiceServer).SaveCompanyMerchandiseLicense(ctx, req.(*SaveCompanyMerchandiseLicenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyMerchandiseService_GetCompanyPriceApplicationMerchandise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyPriceApplicationMerchandiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyMerchandiseServiceServer).GetCompanyPriceApplicationMerchandise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyMerchandiseService/GetCompanyPriceApplicationMerchandise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyMerchandiseServiceServer).GetCompanyPriceApplicationMerchandise(ctx, req.(*GetCompanyPriceApplicationMerchandiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyMerchandiseService_ServiceDesc is the grpc.ServiceDesc for CompanyMerchandiseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyMerchandiseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyMerchandiseService",
	HandlerType: (*CompanyMerchandiseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CompanyMerchandiseQuery",
			Handler:    _CompanyMerchandiseService_CompanyMerchandiseQuery_Handler,
		},
		{
			MethodName: "CompanyBundleMerchandiseQuery",
			Handler:    _CompanyMerchandiseService_CompanyBundleMerchandiseQuery_Handler,
		},
		{
			MethodName: "AddCompanyMerchandise",
			Handler:    _CompanyMerchandiseService_AddCompanyMerchandise_Handler,
		},
		{
			MethodName: "BatchAddCompanyMerchandise",
			Handler:    _CompanyMerchandiseService_BatchAddCompanyMerchandise_Handler,
		},
		{
			MethodName: "UpdateCompanyMerchandiseState",
			Handler:    _CompanyMerchandiseService_UpdateCompanyMerchandiseState_Handler,
		},
		{
			MethodName: "GetCompanyPriceMerchandise",
			Handler:    _CompanyMerchandiseService_GetCompanyPriceMerchandise_Handler,
		},
		{
			MethodName: "GetCompanyMerchandiseLicense",
			Handler:    _CompanyMerchandiseService_GetCompanyMerchandiseLicense_Handler,
		},
		{
			MethodName: "SaveCompanyMerchandiseLicense",
			Handler:    _CompanyMerchandiseService_SaveCompanyMerchandiseLicense_Handler,
		},
		{
			MethodName: "GetCompanyPriceApplicationMerchandise",
			Handler:    _CompanyMerchandiseService_GetCompanyPriceApplicationMerchandise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/companymerchandise.proto",
}
