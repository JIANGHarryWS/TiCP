// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/box.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Box with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Box) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CompanyId

	// no validation rules for BoxSerialNumber

	// no validation rules for BoxDomain

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for ModifyUid

	// no validation rules for ModifyName

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BoxValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateUid

	// no validation rules for CreateName

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BoxValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BoxValidationError is the validation error returned by Box.Validate if the
// designated constraints aren't met.
type BoxValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoxValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoxValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoxValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoxValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoxValidationError) ErrorName() string { return "BoxValidationError" }

// Error satisfies the builtin error interface
func (e BoxValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBox.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoxValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoxValidationError{}

// Validate checks the field values on GetCompanyBoxListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyBoxListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Status

	// no validation rules for CompanyId

	return nil
}

// GetCompanyBoxListRequestValidationError is the validation error returned by
// GetCompanyBoxListRequest.Validate if the designated constraints aren't met.
type GetCompanyBoxListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyBoxListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyBoxListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyBoxListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyBoxListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyBoxListRequestValidationError) ErrorName() string {
	return "GetCompanyBoxListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyBoxListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyBoxListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyBoxListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyBoxListRequestValidationError{}

// Validate checks the field values on GetCompanyBoxListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyBoxListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCompanyBoxListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCompanyBoxListResponseValidationError is the validation error returned by
// GetCompanyBoxListResponse.Validate if the designated constraints aren't met.
type GetCompanyBoxListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyBoxListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyBoxListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyBoxListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyBoxListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyBoxListResponseValidationError) ErrorName() string {
	return "GetCompanyBoxListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyBoxListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyBoxListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyBoxListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyBoxListResponseValidationError{}

// Validate checks the field values on CompanyBoxModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyBoxModifyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BoxId

	// no validation rules for CompanyId

	// no validation rules for BoxSerialNumber

	// no validation rules for BoxDomain

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for ModifyUid

	// no validation rules for ModifyName

	return nil
}

// CompanyBoxModifyRequestValidationError is the validation error returned by
// CompanyBoxModifyRequest.Validate if the designated constraints aren't met.
type CompanyBoxModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyBoxModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyBoxModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyBoxModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyBoxModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyBoxModifyRequestValidationError) ErrorName() string {
	return "CompanyBoxModifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyBoxModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyBoxModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyBoxModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyBoxModifyRequestValidationError{}

// Validate checks the field values on CompanyBoxModifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyBoxModifyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// CompanyBoxModifyResponseValidationError is the validation error returned by
// CompanyBoxModifyResponse.Validate if the designated constraints aren't met.
type CompanyBoxModifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyBoxModifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyBoxModifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyBoxModifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyBoxModifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyBoxModifyResponseValidationError) ErrorName() string {
	return "CompanyBoxModifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyBoxModifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyBoxModifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyBoxModifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyBoxModifyResponseValidationError{}

// Validate checks the field values on GetCompanyBoxByDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyBoxByDomainRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for BoxDomain

	return nil
}

// GetCompanyBoxByDomainRequestValidationError is the validation error returned
// by GetCompanyBoxByDomainRequest.Validate if the designated constraints
// aren't met.
type GetCompanyBoxByDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyBoxByDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyBoxByDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyBoxByDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyBoxByDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyBoxByDomainRequestValidationError) ErrorName() string {
	return "GetCompanyBoxByDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyBoxByDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyBoxByDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyBoxByDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyBoxByDomainRequestValidationError{}

// Validate checks the field values on GetCompanyBoxByDomainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyBoxByDomainResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetBoxInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyBoxByDomainResponseValidationError{
				field:  "BoxInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCompanyBoxByDomainResponseValidationError is the validation error
// returned by GetCompanyBoxByDomainResponse.Validate if the designated
// constraints aren't met.
type GetCompanyBoxByDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyBoxByDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyBoxByDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyBoxByDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyBoxByDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyBoxByDomainResponseValidationError) ErrorName() string {
	return "GetCompanyBoxByDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyBoxByDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyBoxByDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyBoxByDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyBoxByDomainResponseValidationError{}
