// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/troubleshoot.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on TroubleShoot with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TroubleShoot) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JobId

	// no validation rules for JobName

	// no validation rules for SubmitterUserId

	// no validation rules for SubmitterUserName

	// no validation rules for ProductId

	// no validation rules for Logs

	// no validation rules for Msg

	// no validation rules for CompanyId

	// no validation rules for SubmitterUserPhone

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TroubleShootValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TroubleShootValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	// no validation rules for IsResolved

	for idx, item := range m.GetRecords() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TroubleShootValidationError{
					field:  fmt.Sprintf("Records[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TroubleShootValidationError is the validation error returned by
// TroubleShoot.Validate if the designated constraints aren't met.
type TroubleShootValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TroubleShootValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TroubleShootValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TroubleShootValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TroubleShootValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TroubleShootValidationError) ErrorName() string { return "TroubleShootValidationError" }

// Error satisfies the builtin error interface
func (e TroubleShootValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTroubleShoot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TroubleShootValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TroubleShootValidationError{}

// Validate checks the field values on TroubleShootRecord with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TroubleShootRecord) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for TroubleShootId

	// no validation rules for IsSubmitter

	// no validation rules for YsStaffUserId

	// no validation rules for YsStaffUserName

	// no validation rules for Msg

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TroubleShootRecordValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TroubleShootRecordValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// TroubleShootRecordValidationError is the validation error returned by
// TroubleShootRecord.Validate if the designated constraints aren't met.
type TroubleShootRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TroubleShootRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TroubleShootRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TroubleShootRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TroubleShootRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TroubleShootRecordValidationError) ErrorName() string {
	return "TroubleShootRecordValidationError"
}

// Error satisfies the builtin error interface
func (e TroubleShootRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTroubleShootRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TroubleShootRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TroubleShootRecordValidationError{}

// Validate checks the field values on CreateTroubleShootRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTroubleShootRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JobId

	// no validation rules for JobName

	// no validation rules for SubmitterUserId

	// no validation rules for SubmitterUserName

	// no validation rules for ProductId

	// no validation rules for Logs

	// no validation rules for CompanyId

	// no validation rules for SubmitterUserPhone

	// no validation rules for Msg

	return nil
}

// CreateTroubleShootRequestValidationError is the validation error returned by
// CreateTroubleShootRequest.Validate if the designated constraints aren't met.
type CreateTroubleShootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTroubleShootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTroubleShootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTroubleShootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTroubleShootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTroubleShootRequestValidationError) ErrorName() string {
	return "CreateTroubleShootRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTroubleShootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTroubleShootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTroubleShootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTroubleShootRequestValidationError{}

// Validate checks the field values on CreateTroubleShootResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTroubleShootResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetTroubleShoot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTroubleShootResponseValidationError{
				field:  "TroubleShoot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTroubleShootResponseValidationError is the validation error returned
// by CreateTroubleShootResponse.Validate if the designated constraints aren't met.
type CreateTroubleShootResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTroubleShootResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTroubleShootResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTroubleShootResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTroubleShootResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTroubleShootResponseValidationError) ErrorName() string {
	return "CreateTroubleShootResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTroubleShootResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTroubleShootResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTroubleShootResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTroubleShootResponseValidationError{}

// Validate checks the field values on UpdateTroubleShootResolvedRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateTroubleShootResolvedRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Resolved

	// no validation rules for IsSubmitter

	// no validation rules for YsStaffUserId

	// no validation rules for YsStaffUserName

	return nil
}

// UpdateTroubleShootResolvedRequestValidationError is the validation error
// returned by UpdateTroubleShootResolvedRequest.Validate if the designated
// constraints aren't met.
type UpdateTroubleShootResolvedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTroubleShootResolvedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTroubleShootResolvedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTroubleShootResolvedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTroubleShootResolvedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTroubleShootResolvedRequestValidationError) ErrorName() string {
	return "UpdateTroubleShootResolvedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTroubleShootResolvedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTroubleShootResolvedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTroubleShootResolvedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTroubleShootResolvedRequestValidationError{}

// Validate checks the field values on UpdateTroubleShootResolvedResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateTroubleShootResolvedResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateTroubleShootResolvedResponseValidationError is the validation error
// returned by UpdateTroubleShootResolvedResponse.Validate if the designated
// constraints aren't met.
type UpdateTroubleShootResolvedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTroubleShootResolvedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTroubleShootResolvedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTroubleShootResolvedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTroubleShootResolvedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTroubleShootResolvedResponseValidationError) ErrorName() string {
	return "UpdateTroubleShootResolvedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTroubleShootResolvedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTroubleShootResolvedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTroubleShootResolvedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTroubleShootResolvedResponseValidationError{}

// Validate checks the field values on ListTroubleShootRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTroubleShootRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JobId

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTroubleShootRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTroubleShootRequestValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTroubleShootRequestValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	return nil
}

// ListTroubleShootRequestValidationError is the validation error returned by
// ListTroubleShootRequest.Validate if the designated constraints aren't met.
type ListTroubleShootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTroubleShootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTroubleShootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTroubleShootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTroubleShootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTroubleShootRequestValidationError) ErrorName() string {
	return "ListTroubleShootRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTroubleShootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTroubleShootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTroubleShootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTroubleShootRequestValidationError{}

// Validate checks the field values on ListTroubleShootResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTroubleShootResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTroubleShootResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTroubleShootResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListTroubleShootResponseValidationError is the validation error returned by
// ListTroubleShootResponse.Validate if the designated constraints aren't met.
type ListTroubleShootResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTroubleShootResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTroubleShootResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTroubleShootResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTroubleShootResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTroubleShootResponseValidationError) ErrorName() string {
	return "ListTroubleShootResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTroubleShootResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTroubleShootResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTroubleShootResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTroubleShootResponseValidationError{}

// Validate checks the field values on CreateTroubleShootRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTroubleShootRecordRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TroubleShootId

	// no validation rules for IsSubmitter

	// no validation rules for YsStaffUserId

	// no validation rules for YsStaffUserName

	// no validation rules for Msg

	return nil
}

// CreateTroubleShootRecordRequestValidationError is the validation error
// returned by CreateTroubleShootRecordRequest.Validate if the designated
// constraints aren't met.
type CreateTroubleShootRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTroubleShootRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTroubleShootRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTroubleShootRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTroubleShootRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTroubleShootRecordRequestValidationError) ErrorName() string {
	return "CreateTroubleShootRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTroubleShootRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTroubleShootRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTroubleShootRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTroubleShootRecordRequestValidationError{}

// Validate checks the field values on CreateTroubleShootRecordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateTroubleShootRecordResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRecord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTroubleShootRecordResponseValidationError{
				field:  "Record",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateTroubleShootRecordResponseValidationError is the validation error
// returned by CreateTroubleShootRecordResponse.Validate if the designated
// constraints aren't met.
type CreateTroubleShootRecordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTroubleShootRecordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTroubleShootRecordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTroubleShootRecordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTroubleShootRecordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTroubleShootRecordResponseValidationError) ErrorName() string {
	return "CreateTroubleShootRecordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTroubleShootRecordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTroubleShootRecordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTroubleShootRecordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTroubleShootRecordResponseValidationError{}

// Validate checks the field values on GetTroubleShootRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTroubleShootRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetTroubleShootRequestValidationError is the validation error returned by
// GetTroubleShootRequest.Validate if the designated constraints aren't met.
type GetTroubleShootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTroubleShootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTroubleShootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTroubleShootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTroubleShootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTroubleShootRequestValidationError) ErrorName() string {
	return "GetTroubleShootRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTroubleShootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTroubleShootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTroubleShootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTroubleShootRequestValidationError{}

// Validate checks the field values on GetTroubleShootResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTroubleShootResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTroubleShootResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetTroubleShootResponseValidationError is the validation error returned by
// GetTroubleShootResponse.Validate if the designated constraints aren't met.
type GetTroubleShootResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTroubleShootResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTroubleShootResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTroubleShootResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTroubleShootResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTroubleShootResponseValidationError) ErrorName() string {
	return "GetTroubleShootResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTroubleShootResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTroubleShootResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTroubleShootResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTroubleShootResponseValidationError{}

// Validate checks the field values on GetTroubleShootCountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTroubleShootCountRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetTroubleShootCountRequestValidationError is the validation error returned
// by GetTroubleShootCountRequest.Validate if the designated constraints
// aren't met.
type GetTroubleShootCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTroubleShootCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTroubleShootCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTroubleShootCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTroubleShootCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTroubleShootCountRequestValidationError) ErrorName() string {
	return "GetTroubleShootCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTroubleShootCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTroubleShootCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTroubleShootCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTroubleShootCountRequestValidationError{}

// Validate checks the field values on GetTroubleShootCountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetTroubleShootCountResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UnresoledCount

	// no validation rules for ResolvedCount

	return nil
}

// GetTroubleShootCountResponseValidationError is the validation error returned
// by GetTroubleShootCountResponse.Validate if the designated constraints
// aren't met.
type GetTroubleShootCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTroubleShootCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTroubleShootCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTroubleShootCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTroubleShootCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTroubleShootCountResponseValidationError) ErrorName() string {
	return "GetTroubleShootCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTroubleShootCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTroubleShootCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTroubleShootCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTroubleShootCountResponseValidationError{}

// Validate checks the field values on MigrateTroubleShootRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MigrateTroubleShootRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MigrateTroubleShootRequestValidationError is the validation error returned
// by MigrateTroubleShootRequest.Validate if the designated constraints aren't met.
type MigrateTroubleShootRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateTroubleShootRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateTroubleShootRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateTroubleShootRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateTroubleShootRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateTroubleShootRequestValidationError) ErrorName() string {
	return "MigrateTroubleShootRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MigrateTroubleShootRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateTroubleShootRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateTroubleShootRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateTroubleShootRequestValidationError{}

// Validate checks the field values on MigrateTroubleShootResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MigrateTroubleShootResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	return nil
}

// MigrateTroubleShootResponseValidationError is the validation error returned
// by MigrateTroubleShootResponse.Validate if the designated constraints
// aren't met.
type MigrateTroubleShootResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MigrateTroubleShootResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MigrateTroubleShootResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MigrateTroubleShootResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MigrateTroubleShootResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MigrateTroubleShootResponseValidationError) ErrorName() string {
	return "MigrateTroubleShootResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MigrateTroubleShootResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMigrateTroubleShootResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MigrateTroubleShootResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MigrateTroubleShootResponseValidationError{}
