// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyUserConfigServiceClient is the client API for CompanyUserConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyUserConfigServiceClient interface {
	Get(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*CompanyUserConfig, error)
	AddOrUpdate(ctx context.Context, in *AddOrUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type companyUserConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyUserConfigServiceClient(cc grpc.ClientConnInterface) CompanyUserConfigServiceClient {
	return &companyUserConfigServiceClient{cc}
}

func (c *companyUserConfigServiceClient) Get(ctx context.Context, in *Relation, opts ...grpc.CallOption) (*CompanyUserConfig, error) {
	out := new(CompanyUserConfig)
	err := c.cc.Invoke(ctx, "/company.CompanyUserConfigService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyUserConfigServiceClient) AddOrUpdate(ctx context.Context, in *AddOrUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/company.CompanyUserConfigService/AddOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyUserConfigServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/company.CompanyUserConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyUserConfigServiceServer is the server API for CompanyUserConfigService service.
// All implementations must embed UnimplementedCompanyUserConfigServiceServer
// for forward compatibility
type CompanyUserConfigServiceServer interface {
	Get(context.Context, *Relation) (*CompanyUserConfig, error)
	AddOrUpdate(context.Context, *AddOrUpdateRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCompanyUserConfigServiceServer()
}

// UnimplementedCompanyUserConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyUserConfigServiceServer struct {
}

func (UnimplementedCompanyUserConfigServiceServer) Get(context.Context, *Relation) (*CompanyUserConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCompanyUserConfigServiceServer) AddOrUpdate(context.Context, *AddOrUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrUpdate not implemented")
}
func (UnimplementedCompanyUserConfigServiceServer) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCompanyUserConfigServiceServer) mustEmbedUnimplementedCompanyUserConfigServiceServer() {
}

// UnsafeCompanyUserConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyUserConfigServiceServer will
// result in compilation errors.
type UnsafeCompanyUserConfigServiceServer interface {
	mustEmbedUnimplementedCompanyUserConfigServiceServer()
}

func RegisterCompanyUserConfigServiceServer(s grpc.ServiceRegistrar, srv CompanyUserConfigServiceServer) {
	s.RegisterService(&CompanyUserConfigService_ServiceDesc, srv)
}

func _CompanyUserConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Relation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyUserConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyUserConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyUserConfigServiceServer).Get(ctx, req.(*Relation))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyUserConfigService_AddOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyUserConfigServiceServer).AddOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyUserConfigService/AddOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyUserConfigServiceServer).AddOrUpdate(ctx, req.(*AddOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyUserConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyUserConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyUserConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyUserConfigServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyUserConfigService_ServiceDesc is the grpc.ServiceDesc for CompanyUserConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyUserConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyUserConfigService",
	HandlerType: (*CompanyUserConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CompanyUserConfigService_Get_Handler,
		},
		{
			MethodName: "AddOrUpdate",
			Handler:    _CompanyUserConfigService_AddOrUpdate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CompanyUserConfigService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/config.proto",
}

// CompanyConfigServiceClient is the client API for CompanyConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyConfigServiceClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type companyConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyConfigServiceClient(cc grpc.ClientConnInterface) CompanyConfigServiceClient {
	return &companyConfigServiceClient{cc}
}

func (c *companyConfigServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyConfigService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyConfigServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/company.CompanyConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyConfigServiceServer is the server API for CompanyConfigService service.
// All implementations must embed UnimplementedCompanyConfigServiceServer
// for forward compatibility
type CompanyConfigServiceServer interface {
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Set(context.Context, *SetRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCompanyConfigServiceServer()
}

// UnimplementedCompanyConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyConfigServiceServer struct {
}

func (UnimplementedCompanyConfigServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCompanyConfigServiceServer) Set(context.Context, *SetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedCompanyConfigServiceServer) mustEmbedUnimplementedCompanyConfigServiceServer() {}

// UnsafeCompanyConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyConfigServiceServer will
// result in compilation errors.
type UnsafeCompanyConfigServiceServer interface {
	mustEmbedUnimplementedCompanyConfigServiceServer()
}

func RegisterCompanyConfigServiceServer(s grpc.ServiceRegistrar, srv CompanyConfigServiceServer) {
	s.RegisterService(&CompanyConfigService_ServiceDesc, srv)
}

func _CompanyConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyConfigServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyConfigServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyConfigService_ServiceDesc is the grpc.ServiceDesc for CompanyConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyConfigService",
	HandlerType: (*CompanyConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _CompanyConfigService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _CompanyConfigService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/config.proto",
}
