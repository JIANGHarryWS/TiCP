// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/company.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Company with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Company) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for BizCode

	// no validation rules for IsYsCloud

	// no validation rules for Contact

	// no validation rules for Phone

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for AccountId

	// no validation rules for ModifyUid

	// no validation rules for ModifyName

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateUid

	// no validation rules for CreateName

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Domain

	// no validation rules for IsOpenDepartmentManage

	// no validation rules for MaxProjects

	// no validation rules for StorageQuota

	// no validation rules for SuperAdminId

	// no validation rules for ProductId

	// no validation rules for Label

	return nil
}

// CompanyValidationError is the validation error returned by Company.Validate
// if the designated constraints aren't met.
type CompanyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyValidationError) ErrorName() string { return "CompanyValidationError" }

// Error satisfies the builtin error interface
func (e CompanyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompany.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyValidationError{}

// Validate checks the field values on CreateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for BizCode

	// no validation rules for Contact

	// no validation rules for Phone

	// no validation rules for Remark

	// no validation rules for CreateUid

	// no validation rules for CreateName

	// no validation rules for CreditQuota

	// no validation rules for ProductId

	// no validation rules for Domain

	// no validation rules for IsOpenDepartmentManage

	// no validation rules for StorageQuota

	// no validation rules for BoxDomain

	// no validation rules for BoxSerialNumber

	// no validation rules for BoxRemark

	// no validation rules for Label

	return nil
}

// CreateRequestValidationError is the validation error returned by
// CreateRequest.Validate if the designated constraints aren't met.
type CreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestValidationError) ErrorName() string { return "CreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestValidationError{}

// Validate checks the field values on CreateResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CreateResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for SuperAdminId

	return nil
}

// CreateResponseValidationError is the validation error returned by
// CreateResponse.Validate if the designated constraints aren't met.
type CreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateResponseValidationError) ErrorName() string { return "CreateResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateResponseValidationError{}

// Validate checks the field values on ModifyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ModifyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for Name

	// no validation rules for BizCode

	// no validation rules for Contact

	// no validation rules for Phone

	// no validation rules for Remark

	// no validation rules for Status

	// no validation rules for ModifyUid

	// no validation rules for ModifyName

	// no validation rules for Domain

	// no validation rules for IsOpenDepartmentManage

	// no validation rules for MaxProjects

	// no validation rules for StorageQuota

	// no validation rules for SuperAdminId

	// no validation rules for Captcha

	// no validation rules for ProductId

	// no validation rules for Label

	return nil
}

// ModifyRequestValidationError is the validation error returned by
// ModifyRequest.Validate if the designated constraints aren't met.
type ModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyRequestValidationError) ErrorName() string { return "ModifyRequestValidationError" }

// Error satisfies the builtin error interface
func (e ModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyRequestValidationError{}

// Validate checks the field values on ModifyResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ModifyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// ModifyResponseValidationError is the validation error returned by
// ModifyResponse.Validate if the designated constraints aren't met.
type ModifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyResponseValidationError) ErrorName() string { return "ModifyResponseValidationError" }

// Error satisfies the builtin error interface
func (e ModifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyResponseValidationError{}

// Validate checks the field values on CompanyUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *CompanyUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for RealName

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Status

	for idx, item := range m.GetRoleList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyUserValidationError{
					field:  fmt.Sprintf("RoleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyUserValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyUserValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastLoginTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyUserValidationError{
				field:  "LastLoginTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserName

	// no validation rules for DisplayUserName

	return nil
}

// CompanyUserValidationError is the validation error returned by
// CompanyUser.Validate if the designated constraints aren't met.
type CompanyUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyUserValidationError) ErrorName() string { return "CompanyUserValidationError" }

// Error satisfies the builtin error interface
func (e CompanyUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyUserValidationError{}

// Validate checks the field values on UserQueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserQueryRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for CompanyId

	// no validation rules for Status

	// no validation rules for OrderBy

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserQueryRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserQueryRequestValidationError is the validation error returned by
// UserQueryRequest.Validate if the designated constraints aren't met.
type UserQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserQueryRequestValidationError) ErrorName() string { return "UserQueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserQueryRequestValidationError{}

// Validate checks the field values on UserQueryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserQueryResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserQueryResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserQueryResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UserQueryResponseValidationError is the validation error returned by
// UserQueryResponse.Validate if the designated constraints aren't met.
type UserQueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserQueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserQueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserQueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserQueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserQueryResponseValidationError) ErrorName() string {
	return "UserQueryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UserQueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserQueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserQueryResponseValidationError{}

// Validate checks the field values on CreateCompanyBoxRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCompanyBoxRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for BoxSerialNumber

	// no validation rules for BoxDomain

	// no validation rules for Remark

	// no validation rules for CreateUid

	// no validation rules for CreateName

	return nil
}

// CreateCompanyBoxRequestValidationError is the validation error returned by
// CreateCompanyBoxRequest.Validate if the designated constraints aren't met.
type CreateCompanyBoxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyBoxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyBoxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyBoxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyBoxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyBoxRequestValidationError) ErrorName() string {
	return "CreateCompanyBoxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyBoxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyBoxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyBoxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyBoxRequestValidationError{}

// Validate checks the field values on CreateCompanyBoxResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCompanyBoxResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyBoxId

	return nil
}

// CreateCompanyBoxResponseValidationError is the validation error returned by
// CreateCompanyBoxResponse.Validate if the designated constraints aren't met.
type CreateCompanyBoxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCompanyBoxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCompanyBoxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCompanyBoxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCompanyBoxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCompanyBoxResponseValidationError) ErrorName() string {
	return "CreateCompanyBoxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCompanyBoxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCompanyBoxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCompanyBoxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCompanyBoxResponseValidationError{}

// Validate checks the field values on GetCompanyInviteListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyInviteListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyInviteListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCompanyInviteListRequestValidationError is the validation error returned
// by GetCompanyInviteListRequest.Validate if the designated constraints
// aren't met.
type GetCompanyInviteListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyInviteListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyInviteListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyInviteListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyInviteListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyInviteListRequestValidationError) ErrorName() string {
	return "GetCompanyInviteListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyInviteListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyInviteListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyInviteListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyInviteListRequestValidationError{}

// Validate checks the field values on GetCompanyInviteListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyInviteListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCompanyInviteListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyInviteListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCompanyInviteListResponseValidationError is the validation error returned
// by GetCompanyInviteListResponse.Validate if the designated constraints
// aren't met.
type GetCompanyInviteListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyInviteListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyInviteListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyInviteListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyInviteListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyInviteListResponseValidationError) ErrorName() string {
	return "GetCompanyInviteListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyInviteListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyInviteListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyInviteListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyInviteListResponseValidationError{}

// Validate checks the field values on GetUserInviteListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserInviteListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInviteListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserInviteListRequestValidationError is the validation error returned by
// GetUserInviteListRequest.Validate if the designated constraints aren't met.
type GetUserInviteListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInviteListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInviteListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInviteListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInviteListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInviteListRequestValidationError) ErrorName() string {
	return "GetUserInviteListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInviteListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInviteListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInviteListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInviteListRequestValidationError{}

// Validate checks the field values on GetUserInviteListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserInviteListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserInviteListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserInviteListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserInviteListResponseValidationError is the validation error returned by
// GetUserInviteListResponse.Validate if the designated constraints aren't met.
type GetUserInviteListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserInviteListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserInviteListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserInviteListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserInviteListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserInviteListResponseValidationError) ErrorName() string {
	return "GetUserInviteListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserInviteListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserInviteListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserInviteListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserInviteListResponseValidationError{}

// Validate checks the field values on GetCompanyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCompanyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	return nil
}

// GetCompanyRequestValidationError is the validation error returned by
// GetCompanyRequest.Validate if the designated constraints aren't met.
type GetCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyRequestValidationError) ErrorName() string {
	return "GetCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyRequestValidationError{}

// Validate checks the field values on CompanyListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for Status

	// no validation rules for Name

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrderBy

	// no validation rules for ProductId

	// no validation rules for Label

	return nil
}

// CompanyListRequestValidationError is the validation error returned by
// CompanyListRequest.Validate if the designated constraints aren't met.
type CompanyListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyListRequestValidationError) ErrorName() string {
	return "CompanyListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyListRequestValidationError{}

// Validate checks the field values on CompanyListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompanyListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CompanyListResponseValidationError is the validation error returned by
// CompanyListResponse.Validate if the designated constraints aren't met.
type CompanyListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyListResponseValidationError) ErrorName() string {
	return "CompanyListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyListResponseValidationError{}

// Validate checks the field values on CompanyUserModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyUserModifyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Status

	// no validation rules for CompanyId

	return nil
}

// CompanyUserModifyRequestValidationError is the validation error returned by
// CompanyUserModifyRequest.Validate if the designated constraints aren't met.
type CompanyUserModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyUserModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyUserModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyUserModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyUserModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyUserModifyRequestValidationError) ErrorName() string {
	return "CompanyUserModifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyUserModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyUserModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyUserModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyUserModifyRequestValidationError{}

// Validate checks the field values on CompanyUserModifyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyUserModifyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// CompanyUserModifyResponseValidationError is the validation error returned by
// CompanyUserModifyResponse.Validate if the designated constraints aren't met.
type CompanyUserModifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyUserModifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyUserModifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyUserModifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyUserModifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyUserModifyResponseValidationError) ErrorName() string {
	return "CompanyUserModifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyUserModifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyUserModifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyUserModifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyUserModifyResponseValidationError{}

// Validate checks the field values on CheckUserAlreadyJoinCompanyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CheckUserAlreadyJoinCompanyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	return nil
}

// CheckUserAlreadyJoinCompanyRequestValidationError is the validation error
// returned by CheckUserAlreadyJoinCompanyRequest.Validate if the designated
// constraints aren't met.
type CheckUserAlreadyJoinCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserAlreadyJoinCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserAlreadyJoinCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserAlreadyJoinCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserAlreadyJoinCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserAlreadyJoinCompanyRequestValidationError) ErrorName() string {
	return "CheckUserAlreadyJoinCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserAlreadyJoinCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserAlreadyJoinCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserAlreadyJoinCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserAlreadyJoinCompanyRequestValidationError{}

// Validate checks the field values on CheckUserAlreadyJoinCompanyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CheckUserAlreadyJoinCompanyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// CheckUserAlreadyJoinCompanyResponseValidationError is the validation error
// returned by CheckUserAlreadyJoinCompanyResponse.Validate if the designated
// constraints aren't met.
type CheckUserAlreadyJoinCompanyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserAlreadyJoinCompanyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserAlreadyJoinCompanyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserAlreadyJoinCompanyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserAlreadyJoinCompanyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserAlreadyJoinCompanyResponseValidationError) ErrorName() string {
	return "CheckUserAlreadyJoinCompanyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserAlreadyJoinCompanyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserAlreadyJoinCompanyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserAlreadyJoinCompanyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserAlreadyJoinCompanyResponseValidationError{}

// Validate checks the field values on SetRoleForCompanyUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetRoleForCompanyUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for UserId

	// no validation rules for OperatorUid

	// no validation rules for OperatorName

	return nil
}

// SetRoleForCompanyUserRequestValidationError is the validation error returned
// by SetRoleForCompanyUserRequest.Validate if the designated constraints
// aren't met.
type SetRoleForCompanyUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRoleForCompanyUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRoleForCompanyUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRoleForCompanyUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRoleForCompanyUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRoleForCompanyUserRequestValidationError) ErrorName() string {
	return "SetRoleForCompanyUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetRoleForCompanyUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRoleForCompanyUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRoleForCompanyUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRoleForCompanyUserRequestValidationError{}

// Validate checks the field values on SetRoleForCompanyUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetRoleForCompanyUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// SetRoleForCompanyUserResponseValidationError is the validation error
// returned by SetRoleForCompanyUserResponse.Validate if the designated
// constraints aren't met.
type SetRoleForCompanyUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetRoleForCompanyUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetRoleForCompanyUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetRoleForCompanyUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetRoleForCompanyUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetRoleForCompanyUserResponseValidationError) ErrorName() string {
	return "SetRoleForCompanyUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetRoleForCompanyUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetRoleForCompanyUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetRoleForCompanyUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetRoleForCompanyUserResponseValidationError{}

// Validate checks the field values on AddUserToCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserToCompanyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for IsAdmin

	return nil
}

// AddUserToCompanyRequestValidationError is the validation error returned by
// AddUserToCompanyRequest.Validate if the designated constraints aren't met.
type AddUserToCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserToCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserToCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserToCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserToCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserToCompanyRequestValidationError) ErrorName() string {
	return "AddUserToCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserToCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserToCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserToCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserToCompanyRequestValidationError{}

// Validate checks the field values on AddUserToCompanyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserToCompanyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// AddUserToCompanyResponseValidationError is the validation error returned by
// AddUserToCompanyResponse.Validate if the designated constraints aren't met.
type AddUserToCompanyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserToCompanyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserToCompanyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserToCompanyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserToCompanyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserToCompanyResponseValidationError) ErrorName() string {
	return "AddUserToCompanyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserToCompanyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserToCompanyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserToCompanyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserToCompanyResponseValidationError{}

// Validate checks the field values on GetUserJoinCompanyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserJoinCompanyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	return nil
}

// GetUserJoinCompanyRequestValidationError is the validation error returned by
// GetUserJoinCompanyRequest.Validate if the designated constraints aren't met.
type GetUserJoinCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserJoinCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserJoinCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserJoinCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserJoinCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserJoinCompanyRequestValidationError) ErrorName() string {
	return "GetUserJoinCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserJoinCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserJoinCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserJoinCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserJoinCompanyRequestValidationError{}

// Validate checks the field values on GetUserJoinCompanyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserJoinCompanyResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserJoinCompanyResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetUserJoinCompanyResponseValidationError is the validation error returned
// by GetUserJoinCompanyResponse.Validate if the designated constraints aren't met.
type GetUserJoinCompanyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserJoinCompanyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserJoinCompanyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserJoinCompanyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserJoinCompanyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserJoinCompanyResponseValidationError) ErrorName() string {
	return "GetUserJoinCompanyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserJoinCompanyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserJoinCompanyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserJoinCompanyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserJoinCompanyResponseValidationError{}

// Validate checks the field values on GetCompanyUserPermissionListRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCompanyUserPermissionListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for UserId

	return nil
}

// GetCompanyUserPermissionListRequestValidationError is the validation error
// returned by GetCompanyUserPermissionListRequest.Validate if the designated
// constraints aren't met.
type GetCompanyUserPermissionListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyUserPermissionListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyUserPermissionListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyUserPermissionListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyUserPermissionListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyUserPermissionListRequestValidationError) ErrorName() string {
	return "GetCompanyUserPermissionListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyUserPermissionListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyUserPermissionListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyUserPermissionListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyUserPermissionListRequestValidationError{}

// Validate checks the field values on GetCompanyUserPermissionListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCompanyUserPermissionListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCompanyUserPermissionListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCompanyUserPermissionListResponseValidationError is the validation error
// returned by GetCompanyUserPermissionListResponse.Validate if the designated
// constraints aren't met.
type GetCompanyUserPermissionListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyUserPermissionListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyUserPermissionListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyUserPermissionListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyUserPermissionListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyUserPermissionListResponseValidationError) ErrorName() string {
	return "GetCompanyUserPermissionListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyUserPermissionListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyUserPermissionListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyUserPermissionListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyUserPermissionListResponseValidationError{}

// Validate checks the field values on GetCompanyProductListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyProductListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	return nil
}

// GetCompanyProductListRequestValidationError is the validation error returned
// by GetCompanyProductListRequest.Validate if the designated constraints
// aren't met.
type GetCompanyProductListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyProductListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyProductListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyProductListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyProductListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyProductListRequestValidationError) ErrorName() string {
	return "GetCompanyProductListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyProductListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyProductListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyProductListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyProductListRequestValidationError{}

// Validate checks the field values on GetCompanyProductListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyProductListResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetCompanyProductListResponseValidationError is the validation error
// returned by GetCompanyProductListResponse.Validate if the designated
// constraints aren't met.
type GetCompanyProductListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyProductListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyProductListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyProductListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyProductListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyProductListResponseValidationError) ErrorName() string {
	return "GetCompanyProductListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyProductListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyProductListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyProductListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyProductListResponseValidationError{}

// Validate checks the field values on AddProductToCompanyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProductToCompanyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for ProductId

	return nil
}

// AddProductToCompanyRequestValidationError is the validation error returned
// by AddProductToCompanyRequest.Validate if the designated constraints aren't met.
type AddProductToCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductToCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductToCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductToCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductToCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductToCompanyRequestValidationError) ErrorName() string {
	return "AddProductToCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductToCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductToCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductToCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductToCompanyRequestValidationError{}

// Validate checks the field values on AddProductToCompanyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProductToCompanyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// AddProductToCompanyResponseValidationError is the validation error returned
// by AddProductToCompanyResponse.Validate if the designated constraints
// aren't met.
type AddProductToCompanyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProductToCompanyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProductToCompanyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProductToCompanyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProductToCompanyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProductToCompanyResponseValidationError) ErrorName() string {
	return "AddProductToCompanyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProductToCompanyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProductToCompanyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProductToCompanyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProductToCompanyResponseValidationError{}

// Validate checks the field values on RemoveProductFromCompanyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProductFromCompanyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for ProductId

	return nil
}

// RemoveProductFromCompanyRequestValidationError is the validation error
// returned by RemoveProductFromCompanyRequest.Validate if the designated
// constraints aren't met.
type RemoveProductFromCompanyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProductFromCompanyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProductFromCompanyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProductFromCompanyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProductFromCompanyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProductFromCompanyRequestValidationError) ErrorName() string {
	return "RemoveProductFromCompanyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProductFromCompanyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProductFromCompanyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProductFromCompanyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProductFromCompanyRequestValidationError{}

// Validate checks the field values on RemoveProductFromCompanyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveProductFromCompanyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// RemoveProductFromCompanyResponseValidationError is the validation error
// returned by RemoveProductFromCompanyResponse.Validate if the designated
// constraints aren't met.
type RemoveProductFromCompanyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProductFromCompanyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProductFromCompanyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProductFromCompanyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProductFromCompanyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProductFromCompanyResponseValidationError) ErrorName() string {
	return "RemoveProductFromCompanyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProductFromCompanyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProductFromCompanyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProductFromCompanyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProductFromCompanyResponseValidationError{}

// Validate checks the field values on CheckCompanyProductRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckCompanyProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for ProductId

	return nil
}

// CheckCompanyProductRequestValidationError is the validation error returned
// by CheckCompanyProductRequest.Validate if the designated constraints aren't met.
type CheckCompanyProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCompanyProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCompanyProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCompanyProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCompanyProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCompanyProductRequestValidationError) ErrorName() string {
	return "CheckCompanyProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckCompanyProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCompanyProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCompanyProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCompanyProductRequestValidationError{}

// Validate checks the field values on CheckCompanyProductResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CheckCompanyProductResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Has

	return nil
}

// CheckCompanyProductResponseValidationError is the validation error returned
// by CheckCompanyProductResponse.Validate if the designated constraints
// aren't met.
type CheckCompanyProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckCompanyProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckCompanyProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckCompanyProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckCompanyProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckCompanyProductResponseValidationError) ErrorName() string {
	return "CheckCompanyProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckCompanyProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckCompanyProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckCompanyProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckCompanyProductResponseValidationError{}

// Validate checks the field values on GetCompanyDashboradRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyDashboradRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Balance

	// no validation rules for Credit

	// no validation rules for StorageRemain

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyDashboradRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCompanyDashboradRequestValidationError is the validation error returned
// by GetCompanyDashboradRequest.Validate if the designated constraints aren't met.
type GetCompanyDashboradRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyDashboradRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyDashboradRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyDashboradRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyDashboradRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyDashboradRequestValidationError) ErrorName() string {
	return "GetCompanyDashboradRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyDashboradRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyDashboradRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyDashboradRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyDashboradRequestValidationError{}

// Validate checks the field values on CompanyDashboardInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CompanyDashboardInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for Balance

	// no validation rules for Credit

	// no validation rules for StorageUsed

	// no validation rules for StorageTotal

	if v, ok := interface{}(m.GetStorageExpire()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CompanyDashboardInfoValidationError{
				field:  "StorageExpire",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AlertCode

	return nil
}

// CompanyDashboardInfoValidationError is the validation error returned by
// CompanyDashboardInfo.Validate if the designated constraints aren't met.
type CompanyDashboardInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompanyDashboardInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompanyDashboardInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompanyDashboardInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompanyDashboardInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompanyDashboardInfoValidationError) ErrorName() string {
	return "CompanyDashboardInfoValidationError"
}

// Error satisfies the builtin error interface
func (e CompanyDashboardInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompanyDashboardInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompanyDashboardInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompanyDashboardInfoValidationError{}

// Validate checks the field values on GetCompanyDashboardResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyDashboardResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCompanyDashboardResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyDashboardResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCompanyDashboardResponseValidationError is the validation error returned
// by GetCompanyDashboardResponse.Validate if the designated constraints
// aren't met.
type GetCompanyDashboardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyDashboardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyDashboardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyDashboardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyDashboardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyDashboardResponseValidationError) ErrorName() string {
	return "GetCompanyDashboardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyDashboardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyDashboardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyDashboardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyDashboardResponseValidationError{}

// Validate checks the field values on GetCompanyAdminsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyAdminsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetCompanyAdminsRequestValidationError is the validation error returned by
// GetCompanyAdminsRequest.Validate if the designated constraints aren't met.
type GetCompanyAdminsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyAdminsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyAdminsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyAdminsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyAdminsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyAdminsRequestValidationError) ErrorName() string {
	return "GetCompanyAdminsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyAdminsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyAdminsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyAdminsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyAdminsRequestValidationError{}

// Validate checks the field values on GetCompanyAdminsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyAdminsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCompanyAdminsResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetCompanyAdminsResponseValidationError is the validation error returned by
// GetCompanyAdminsResponse.Validate if the designated constraints aren't met.
type GetCompanyAdminsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyAdminsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyAdminsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyAdminsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyAdminsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyAdminsResponseValidationError) ErrorName() string {
	return "GetCompanyAdminsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyAdminsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyAdminsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyAdminsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyAdminsResponseValidationError{}

// Validate checks the field values on UpdateSuperAdminUserRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSuperAdminUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	return nil
}

// UpdateSuperAdminUserRequestValidationError is the validation error returned
// by UpdateSuperAdminUserRequest.Validate if the designated constraints
// aren't met.
type UpdateSuperAdminUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSuperAdminUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSuperAdminUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSuperAdminUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSuperAdminUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSuperAdminUserRequestValidationError) ErrorName() string {
	return "UpdateSuperAdminUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSuperAdminUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSuperAdminUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSuperAdminUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSuperAdminUserRequestValidationError{}

// Validate checks the field values on UpdateSuperAdminUserResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSuperAdminUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// UpdateSuperAdminUserResponseValidationError is the validation error returned
// by UpdateSuperAdminUserResponse.Validate if the designated constraints
// aren't met.
type UpdateSuperAdminUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSuperAdminUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSuperAdminUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSuperAdminUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSuperAdminUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSuperAdminUserResponseValidationError) ErrorName() string {
	return "UpdateSuperAdminUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSuperAdminUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSuperAdminUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSuperAdminUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSuperAdminUserResponseValidationError{}

// Validate checks the field values on DeleteCompanyUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCompanyUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	return nil
}

// DeleteCompanyUserRequestValidationError is the validation error returned by
// DeleteCompanyUserRequest.Validate if the designated constraints aren't met.
type DeleteCompanyUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCompanyUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCompanyUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCompanyUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCompanyUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCompanyUserRequestValidationError) ErrorName() string {
	return "DeleteCompanyUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCompanyUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCompanyUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCompanyUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCompanyUserRequestValidationError{}

// Validate checks the field values on DeleteCompanyUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCompanyUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	// no validation rules for IsRunJob

	// no validation rules for IsOpenApp

	return nil
}

// DeleteCompanyUserResponseValidationError is the validation error returned by
// DeleteCompanyUserResponse.Validate if the designated constraints aren't met.
type DeleteCompanyUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCompanyUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCompanyUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCompanyUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCompanyUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCompanyUserResponseValidationError) ErrorName() string {
	return "DeleteCompanyUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCompanyUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCompanyUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCompanyUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCompanyUserResponseValidationError{}

// Validate checks the field values on AddOperateFileLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOperateFileLogRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OpType

	if utf8.RuneCountInString(m.GetOpUserId()) < 1 {
		return AddOperateFileLogRequestValidationError{
			field:  "OpUserId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCompanyId()) < 1 {
		return AddOperateFileLogRequestValidationError{
			field:  "CompanyId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		return AddOperateFileLogRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
	}

	for idx, item := range m.GetOpInfo() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddOperateFileLogRequestValidationError{
					field:  fmt.Sprintf("OpInfo[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AddOperateFileLogRequestValidationError is the validation error returned by
// AddOperateFileLogRequest.Validate if the designated constraints aren't met.
type AddOperateFileLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperateFileLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperateFileLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperateFileLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperateFileLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperateFileLogRequestValidationError) ErrorName() string {
	return "AddOperateFileLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperateFileLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperateFileLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperateFileLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperateFileLogRequestValidationError{}

// Validate checks the field values on OperateInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *OperateInfo) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetStorageSize()) < 1 {
		return OperateInfoValidationError{
			field:  "StorageSize",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFileName()) < 1 {
		return OperateInfoValidationError{
			field:  "FileName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for FileType

	return nil
}

// OperateInfoValidationError is the validation error returned by
// OperateInfo.Validate if the designated constraints aren't met.
type OperateInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperateInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperateInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperateInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperateInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperateInfoValidationError) ErrorName() string { return "OperateInfoValidationError" }

// Error satisfies the builtin error interface
func (e OperateInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperateInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperateInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperateInfoValidationError{}

// Validate checks the field values on AddOperateFileLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOperateFileLogResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// AddOperateFileLogResponseValidationError is the validation error returned by
// AddOperateFileLogResponse.Validate if the designated constraints aren't met.
type AddOperateFileLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOperateFileLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOperateFileLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOperateFileLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOperateFileLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOperateFileLogResponseValidationError) ErrorName() string {
	return "AddOperateFileLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOperateFileLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOperateFileLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOperateFileLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOperateFileLogResponseValidationError{}

// Validate checks the field values on QueryOperateFileLogRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QueryOperateFileLogRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FileName

	if m.GetBeginTime() == nil {
		return QueryOperateFileLogRequestValidationError{
			field:  "BeginTime",
			reason: "value is required",
		}
	}

	if m.GetEndTime() == nil {
		return QueryOperateFileLogRequestValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
	}

	// no validation rules for Phone

	if utf8.RuneCountInString(m.GetCompanyId()) < 1 {
		return QueryOperateFileLogRequestValidationError{
			field:  "CompanyId",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetProjectId()) < 1 {
		return QueryOperateFileLogRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetPage() == nil {
		return QueryOperateFileLogRequestValidationError{
			field:  "Page",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOperateFileLogRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// QueryOperateFileLogRequestValidationError is the validation error returned
// by QueryOperateFileLogRequest.Validate if the designated constraints aren't met.
type QueryOperateFileLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOperateFileLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOperateFileLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOperateFileLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOperateFileLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOperateFileLogRequestValidationError) ErrorName() string {
	return "QueryOperateFileLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOperateFileLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOperateFileLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOperateFileLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOperateFileLogRequestValidationError{}

// Validate checks the field values on QueryOperateFileLogResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *QueryOperateFileLogResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetLog() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryOperateFileLogResponseValidationError{
					field:  fmt.Sprintf("Log[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryOperateFileLogResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// QueryOperateFileLogResponseValidationError is the validation error returned
// by QueryOperateFileLogResponse.Validate if the designated constraints
// aren't met.
type QueryOperateFileLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryOperateFileLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryOperateFileLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryOperateFileLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryOperateFileLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryOperateFileLogResponseValidationError) ErrorName() string {
	return "QueryOperateFileLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QueryOperateFileLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryOperateFileLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryOperateFileLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryOperateFileLogResponseValidationError{}

// Validate checks the field values on OperateDetailLog with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OperateDetailLog) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FileName

	// no validation rules for OpUserName

	// no validation rules for OpUserPhone

	// no validation rules for FileType

	// no validation rules for OpType

	// no validation rules for StorageSize

	if v, ok := interface{}(m.GetOpTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OperateDetailLogValidationError{
				field:  "OpTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// OperateDetailLogValidationError is the validation error returned by
// OperateDetailLog.Validate if the designated constraints aren't met.
type OperateDetailLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OperateDetailLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OperateDetailLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OperateDetailLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OperateDetailLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OperateDetailLogValidationError) ErrorName() string { return "OperateDetailLogValidationError" }

// Error satisfies the builtin error interface
func (e OperateDetailLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOperateDetailLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OperateDetailLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OperateDetailLogValidationError{}
