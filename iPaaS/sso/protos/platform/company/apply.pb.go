// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: protos/platform/company/apply.proto

package company

import (
	ptype "github.com/yuansuan/ticp/iPaaS/sso/protos/platform/ptype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 企业状态
type CompanyApplyStatus int32

const (
	// 未知
	CompanyApplyStatus_COMPANY_APPLY_UNKNOWN CompanyApplyStatus = 0
	// 申请中
	CompanyApplyStatus_COMPANY_APPLY_ONDOING CompanyApplyStatus = 1
	// 已完成
	CompanyApplyStatus_COMPANY_APPLY_COMPLETED CompanyApplyStatus = 2
)

// Enum value maps for CompanyApplyStatus.
var (
	CompanyApplyStatus_name = map[int32]string{
		0: "COMPANY_APPLY_UNKNOWN",
		1: "COMPANY_APPLY_ONDOING",
		2: "COMPANY_APPLY_COMPLETED",
	}
	CompanyApplyStatus_value = map[string]int32{
		"COMPANY_APPLY_UNKNOWN":   0,
		"COMPANY_APPLY_ONDOING":   1,
		"COMPANY_APPLY_COMPLETED": 2,
	}
)

func (x CompanyApplyStatus) Enum() *CompanyApplyStatus {
	p := new(CompanyApplyStatus)
	*p = x
	return p
}

func (x CompanyApplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompanyApplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_platform_company_apply_proto_enumTypes[0].Descriptor()
}

func (CompanyApplyStatus) Type() protoreflect.EnumType {
	return &file_protos_platform_company_apply_proto_enumTypes[0]
}

func (x CompanyApplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompanyApplyStatus.Descriptor instead.
func (CompanyApplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{0}
}

// 试用申请状态
type TrialApplyStatus int32

const (
	TrialApplyStatus_TRAIL_APPLY_UNKNOWN TrialApplyStatus = 0
	// 用户不关心
	TrialApplyStatus_TRAIL_APPLY_USER_APPLY TrialApplyStatus = 1
	// 用户现在不需要
	TrialApplyStatus_TRAIL_APPLY_USER_CANCEL TrialApplyStatus = 2
	// 用户申请/确认申请，需要OMS客服介入
	TrialApplyStatus_TRAIL_APPLY_USER_UNDEFINE TrialApplyStatus = 3
	// OMS已接入，同意试用，允许 key及type相同试用商品的试用工作
	TrialApplyStatus_TRAIL_APPLY_OMS_ACCEPT TrialApplyStatus = 4
	// OMS拒绝申请，拒绝试用
	TrialApplyStatus_TRAIL_APPLY_OMS_REJECT TrialApplyStatus = 5
	// OMS手动停止试用，场景：发现用户申请信息造假/原厂/第三方要求停止等
	TrialApplyStatus_TRAIL_APPLY_OMS_DISABLE TrialApplyStatus = 6
)

// Enum value maps for TrialApplyStatus.
var (
	TrialApplyStatus_name = map[int32]string{
		0: "TRAIL_APPLY_UNKNOWN",
		1: "TRAIL_APPLY_USER_APPLY",
		2: "TRAIL_APPLY_USER_CANCEL",
		3: "TRAIL_APPLY_USER_UNDEFINE",
		4: "TRAIL_APPLY_OMS_ACCEPT",
		5: "TRAIL_APPLY_OMS_REJECT",
		6: "TRAIL_APPLY_OMS_DISABLE",
	}
	TrialApplyStatus_value = map[string]int32{
		"TRAIL_APPLY_UNKNOWN":       0,
		"TRAIL_APPLY_USER_APPLY":    1,
		"TRAIL_APPLY_USER_CANCEL":   2,
		"TRAIL_APPLY_USER_UNDEFINE": 3,
		"TRAIL_APPLY_OMS_ACCEPT":    4,
		"TRAIL_APPLY_OMS_REJECT":    5,
		"TRAIL_APPLY_OMS_DISABLE":   6,
	}
)

func (x TrialApplyStatus) Enum() *TrialApplyStatus {
	p := new(TrialApplyStatus)
	*p = x
	return p
}

func (x TrialApplyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrialApplyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_platform_company_apply_proto_enumTypes[1].Descriptor()
}

func (TrialApplyStatus) Type() protoreflect.EnumType {
	return &file_protos_platform_company_apply_proto_enumTypes[1]
}

func (x TrialApplyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrialApplyStatus.Descriptor instead.
func (TrialApplyStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{1}
}

type CompanyApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 申请id pk 非空
	ApplyId string `protobuf:"bytes,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	// 用户id unique 非空
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 用户名 可为空
	UserName string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// 企业名 可为空
	CompanyName string `protobuf:"bytes,4,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// 所属行业 可为空
	Industry string `protobuf:"bytes,5,opt,name=industry,proto3" json:"industry,omitempty"`
	// 用户电话，非空
	Phone string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	// 企业规模 默认0
	EngineerNum int64 `protobuf:"varint,7,opt,name=engineer_num,json=engineerNum,proto3" json:"engineer_num,omitempty"`
	// 需求软件列表
	SoftwareList []string `protobuf:"bytes,8,rep,name=software_list,json=softwareList,proto3" json:"software_list,omitempty"`
	// 申请理由
	ApplyReason []string `protobuf:"bytes,9,rep,name=apply_reason,json=applyReason,proto3" json:"apply_reason,omitempty"`
	// 产品id
	ProductId string `protobuf:"bytes,10,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// 申请状态
	Status CompanyApplyStatus `protobuf:"varint,11,opt,name=status,proto3,enum=company.CompanyApplyStatus" json:"status,omitempty"`
	// 创建时间
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *CompanyApply) Reset() {
	*x = CompanyApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompanyApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompanyApply) ProtoMessage() {}

func (x *CompanyApply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompanyApply.ProtoReflect.Descriptor instead.
func (*CompanyApply) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{0}
}

func (x *CompanyApply) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

func (x *CompanyApply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CompanyApply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CompanyApply) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CompanyApply) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *CompanyApply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CompanyApply) GetEngineerNum() int64 {
	if x != nil {
		return x.EngineerNum
	}
	return 0
}

func (x *CompanyApply) GetSoftwareList() []string {
	if x != nil {
		return x.SoftwareList
	}
	return nil
}

func (x *CompanyApply) GetApplyReason() []string {
	if x != nil {
		return x.ApplyReason
	}
	return nil
}

func (x *CompanyApply) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CompanyApply) GetStatus() CompanyApplyStatus {
	if x != nil {
		return x.Status
	}
	return CompanyApplyStatus_COMPANY_APPLY_UNKNOWN
}

func (x *CompanyApply) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *CompanyApply) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type ApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id，必填，申请后自动判断是create 还是 update
	// @inject_tag: `validate:"is_ysid,required"`
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 企业名 可为空
	CompanyName string `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// 所属行业 可为空
	Industry string `protobuf:"bytes,3,opt,name=industry,proto3" json:"industry,omitempty"`
	// 需求软件列表 可为空
	SoftwareList []string `protobuf:"bytes,4,rep,name=software_list,json=softwareList,proto3" json:"software_list,omitempty"`
	// 申请理由 可为空
	ApplyReason []string `protobuf:"bytes,5,rep,name=apply_reason,json=applyReason,proto3" json:"apply_reason,omitempty"`
	// 公司规模
	EngineerNum int64 `protobuf:"varint,6,opt,name=engineer_num,json=engineerNum,proto3" json:"engineer_num,omitempty"`
	// 用户名称
	UserName string `protobuf:"bytes,7,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
}

func (x *ApplyRequest) Reset() {
	*x = ApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyRequest) ProtoMessage() {}

func (x *ApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyRequest.ProtoReflect.Descriptor instead.
func (*ApplyRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ApplyRequest) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *ApplyRequest) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *ApplyRequest) GetSoftwareList() []string {
	if x != nil {
		return x.SoftwareList
	}
	return nil
}

func (x *ApplyRequest) GetApplyReason() []string {
	if x != nil {
		return x.ApplyReason
	}
	return nil
}

func (x *ApplyRequest) GetEngineerNum() int64 {
	if x != nil {
		return x.EngineerNum
	}
	return 0
}

func (x *ApplyRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type GetApplyByUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id，必填
	// @inject_tag: `validate:"is_ysid,required"`
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetApplyByUserRequest) Reset() {
	*x = GetApplyByUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetApplyByUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetApplyByUserRequest) ProtoMessage() {}

func (x *GetApplyByUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetApplyByUserRequest.ProtoReflect.Descriptor instead.
func (*GetApplyByUserRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{2}
}

func (x *GetApplyByUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetAllApplyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 企业名关键字，模糊检索
	NameKeyword string `protobuf:"bytes,1,opt,name=name_keyword,json=nameKeyword,proto3" json:"name_keyword,omitempty"`
	// 需求软件关键字，模糊检索
	SoftwareKeyword string `protobuf:"bytes,2,opt,name=software_keyword,json=softwareKeyword,proto3" json:"software_keyword,omitempty"`
	// 申请理由关键字，模糊检索
	ReasonKeyword string `protobuf:"bytes,3,opt,name=reason_keyword,json=reasonKeyword,proto3" json:"reason_keyword,omitempty"`
	// 所属行业关键字，模糊检索
	IndustryKeyword string `protobuf:"bytes,4,opt,name=industry_keyword,json=industryKeyword,proto3" json:"industry_keyword,omitempty"`
	// 最小规模
	MinEngineerNum int64 `protobuf:"varint,5,opt,name=min_engineer_num,json=minEngineerNum,proto3" json:"min_engineer_num,omitempty"`
	// 最大规模
	MaxEngineerNum int64 `protobuf:"varint,6,opt,name=max_engineer_num,json=maxEngineerNum,proto3" json:"max_engineer_num,omitempty"`
	// 创建时间
	StartTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// 更新时间
	EndTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// 申请状态
	Status CompanyApplyStatus `protobuf:"varint,9,opt,name=status,proto3,enum=company.CompanyApplyStatus" json:"status,omitempty"`
	// @inject_tag: `validate:"required"`
	Page *ptype.Page `protobuf:"bytes,10,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetAllApplyListRequest) Reset() {
	*x = GetAllApplyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllApplyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllApplyListRequest) ProtoMessage() {}

func (x *GetAllApplyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllApplyListRequest.ProtoReflect.Descriptor instead.
func (*GetAllApplyListRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{3}
}

func (x *GetAllApplyListRequest) GetNameKeyword() string {
	if x != nil {
		return x.NameKeyword
	}
	return ""
}

func (x *GetAllApplyListRequest) GetSoftwareKeyword() string {
	if x != nil {
		return x.SoftwareKeyword
	}
	return ""
}

func (x *GetAllApplyListRequest) GetReasonKeyword() string {
	if x != nil {
		return x.ReasonKeyword
	}
	return ""
}

func (x *GetAllApplyListRequest) GetIndustryKeyword() string {
	if x != nil {
		return x.IndustryKeyword
	}
	return ""
}

func (x *GetAllApplyListRequest) GetMinEngineerNum() int64 {
	if x != nil {
		return x.MinEngineerNum
	}
	return 0
}

func (x *GetAllApplyListRequest) GetMaxEngineerNum() int64 {
	if x != nil {
		return x.MaxEngineerNum
	}
	return 0
}

func (x *GetAllApplyListRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GetAllApplyListRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GetAllApplyListRequest) GetStatus() CompanyApplyStatus {
	if x != nil {
		return x.Status
	}
	return CompanyApplyStatus_COMPANY_APPLY_UNKNOWN
}

func (x *GetAllApplyListRequest) GetPage() *ptype.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type GetAllApplyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数据列表
	List []*CompanyApply `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// @inject_tag: `validate:"required"`
	PageCtx *ptype.PageCtx `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *GetAllApplyListResponse) Reset() {
	*x = GetAllApplyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllApplyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllApplyListResponse) ProtoMessage() {}

func (x *GetAllApplyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllApplyListResponse.ProtoReflect.Descriptor instead.
func (*GetAllApplyListResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllApplyListResponse) GetList() []*CompanyApply {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetAllApplyListResponse) GetPageCtx() *ptype.PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

type TrialApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 申请id pk
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 用户id
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 企业id
	CompanyId string `protobuf:"bytes,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 试用商品类型
	TrialResourceType int64 `protobuf:"varint,4,opt,name=trial_resource_type,json=trialResourceType,proto3" json:"trial_resource_type,omitempty"`
	// 试用商品关键词
	TrialResourceKey string `protobuf:"bytes,5,opt,name=trial_resource_key,json=trialResourceKey,proto3" json:"trial_resource_key,omitempty"`
	// 申请状态
	Status TrialApplyStatus `protobuf:"varint,6,opt,name=status,proto3,enum=company.TrialApplyStatus" json:"status,omitempty"`
	// 申请来源
	ApplySource string `protobuf:"bytes,7,opt,name=apply_source,json=applySource,proto3" json:"apply_source,omitempty"`
	// 自定义备注
	Remark string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
	// 产品id
	ProductId string `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// 申请核时
	CoreHour int64 `protobuf:"varint,10,opt,name=core_hour,json=coreHour,proto3" json:"core_hour,omitempty"`
	// 审核用户名称
	AuditUname string `protobuf:"bytes,11,opt,name=audit_uname,json=auditUname,proto3" json:"audit_uname,omitempty"`
	// 审核时间
	AuditTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=audit_time,json=auditTime,proto3" json:"audit_time,omitempty"`
	// 申请时间
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 更新时间
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *TrialApply) Reset() {
	*x = TrialApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialApply) ProtoMessage() {}

func (x *TrialApply) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialApply.ProtoReflect.Descriptor instead.
func (*TrialApply) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{5}
}

func (x *TrialApply) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TrialApply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrialApply) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *TrialApply) GetTrialResourceType() int64 {
	if x != nil {
		return x.TrialResourceType
	}
	return 0
}

func (x *TrialApply) GetTrialResourceKey() string {
	if x != nil {
		return x.TrialResourceKey
	}
	return ""
}

func (x *TrialApply) GetStatus() TrialApplyStatus {
	if x != nil {
		return x.Status
	}
	return TrialApplyStatus_TRAIL_APPLY_UNKNOWN
}

func (x *TrialApply) GetApplySource() string {
	if x != nil {
		return x.ApplySource
	}
	return ""
}

func (x *TrialApply) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *TrialApply) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *TrialApply) GetCoreHour() int64 {
	if x != nil {
		return x.CoreHour
	}
	return 0
}

func (x *TrialApply) GetAuditUname() string {
	if x != nil {
		return x.AuditUname
	}
	return ""
}

func (x *TrialApply) GetAuditTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AuditTime
	}
	return nil
}

func (x *TrialApply) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TrialApply) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type TrialInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 用户名称
	UserName string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// NOT USE！ TODO！ 预留字段，返回空
	CompanyId string `protobuf:"bytes,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// NOT USE！ TODO！ 预留字段，返回空
	CompanyName string `protobuf:"bytes,4,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	// 用户手机号
	Phone string `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`
	// 总可用核时数
	TotalAvaliableCorehour float64 `protobuf:"fixed64,6,opt,name=total_avaliable_corehour,json=totalAvaliableCorehour,proto3" json:"total_avaliable_corehour,omitempty"`
	// 已用总核时数
	UsedCorehour float64 `protobuf:"fixed64,7,opt,name=used_corehour,json=usedCorehour,proto3" json:"used_corehour,omitempty"`
	// 剩余核时数 = total_avaliable_corehour - used_corehour
	RemainCorehour float64 `protobuf:"fixed64,8,opt,name=remain_corehour,json=remainCorehour,proto3" json:"remain_corehour,omitempty"`
	ProductId      string  `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// 试用商品类型
	TrialResourceType int64 `protobuf:"varint,10,opt,name=trial_resource_type,json=trialResourceType,proto3" json:"trial_resource_type,omitempty"`
	// 试用商品关键词
	TrialResourceKey string `protobuf:"bytes,11,opt,name=trial_resource_key,json=trialResourceKey,proto3" json:"trial_resource_key,omitempty"`
}

func (x *TrialInfo) Reset() {
	*x = TrialInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrialInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrialInfo) ProtoMessage() {}

func (x *TrialInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrialInfo.ProtoReflect.Descriptor instead.
func (*TrialInfo) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{6}
}

func (x *TrialInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrialInfo) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *TrialInfo) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *TrialInfo) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *TrialInfo) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TrialInfo) GetTotalAvaliableCorehour() float64 {
	if x != nil {
		return x.TotalAvaliableCorehour
	}
	return 0
}

func (x *TrialInfo) GetUsedCorehour() float64 {
	if x != nil {
		return x.UsedCorehour
	}
	return 0
}

func (x *TrialInfo) GetRemainCorehour() float64 {
	if x != nil {
		return x.RemainCorehour
	}
	return 0
}

func (x *TrialInfo) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *TrialInfo) GetTrialResourceType() int64 {
	if x != nil {
		return x.TrialResourceType
	}
	return 0
}

func (x *TrialInfo) GetTrialResourceKey() string {
	if x != nil {
		return x.TrialResourceKey
	}
	return ""
}

type CreateTrialApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid,required"`
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 企业id 可为空
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 产品id 可为空
	// @inject_tag: `validate:"required"`
	TrialResourceType int64 `protobuf:"varint,3,opt,name=trial_resource_type,json=trialResourceType,proto3" json:"trial_resource_type,omitempty"`
	// 试用商品关键词 非空
	// @inject_tag: `validate:"required"`
	TrialResourceKey string `protobuf:"bytes,4,opt,name=trial_resource_key,json=trialResourceKey,proto3" json:"trial_resource_key,omitempty"`
	// 申请状态 only allow USER_APPLY USER_CANCEL USER_UNDEFINE
	Status TrialApplyStatus `protobuf:"varint,5,opt,name=status,proto3,enum=company.TrialApplyStatus" json:"status,omitempty"`
	// 申请渠道
	ApplySource string `protobuf:"bytes,6,opt,name=apply_source,json=applySource,proto3" json:"apply_source,omitempty"`
	// product
	ProductId string `protobuf:"bytes,7,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// 标记可为空
	Remark string `protobuf:"bytes,8,opt,name=remark,proto3" json:"remark,omitempty"`
}

func (x *CreateTrialApplyRequest) Reset() {
	*x = CreateTrialApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTrialApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTrialApplyRequest) ProtoMessage() {}

func (x *CreateTrialApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTrialApplyRequest.ProtoReflect.Descriptor instead.
func (*CreateTrialApplyRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTrialApplyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateTrialApplyRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CreateTrialApplyRequest) GetTrialResourceType() int64 {
	if x != nil {
		return x.TrialResourceType
	}
	return 0
}

func (x *CreateTrialApplyRequest) GetTrialResourceKey() string {
	if x != nil {
		return x.TrialResourceKey
	}
	return ""
}

func (x *CreateTrialApplyRequest) GetStatus() TrialApplyStatus {
	if x != nil {
		return x.Status
	}
	return TrialApplyStatus_TRAIL_APPLY_UNKNOWN
}

func (x *CreateTrialApplyRequest) GetApplySource() string {
	if x != nil {
		return x.ApplySource
	}
	return ""
}

func (x *CreateTrialApplyRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CreateTrialApplyRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type UpdateTrialApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 申请id pk 非空
	// @inject_tag: `validate:"is_ysid,required"`
	ApplyId string `protobuf:"bytes,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	// 申请状态 only allow USER_APPLY USER_CANCEL USER_UNDEFINE
	Status TrialApplyStatus `protobuf:"varint,2,opt,name=status,proto3,enum=company.TrialApplyStatus" json:"status,omitempty"`
	// 标记可为空
	Remark string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"` // 创建时间
}

func (x *UpdateTrialApplyRequest) Reset() {
	*x = UpdateTrialApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTrialApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrialApplyRequest) ProtoMessage() {}

func (x *UpdateTrialApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrialApplyRequest.ProtoReflect.Descriptor instead.
func (*UpdateTrialApplyRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateTrialApplyRequest) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

func (x *UpdateTrialApplyRequest) GetStatus() TrialApplyStatus {
	if x != nil {
		return x.Status
	}
	return TrialApplyStatus_TRAIL_APPLY_UNKNOWN
}

func (x *UpdateTrialApplyRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type AuditTrailApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 申请id pk 非空
	// @inject_tag: `validate:"is_ysid,required"`
	ApplyId string `protobuf:"bytes,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
	// 申请状态 only allow OMS_ACCEPT OMS_REJECT OMS_DISABLE
	Status TrialApplyStatus `protobuf:"varint,2,opt,name=status,proto3,enum=company.TrialApplyStatus" json:"status,omitempty"`
	// 标记可为空
	Remark string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	// 处理人uid
	AuditUname string `protobuf:"bytes,4,opt,name=audit_uname,json=auditUname,proto3" json:"audit_uname,omitempty"`
}

func (x *AuditTrailApplyRequest) Reset() {
	*x = AuditTrailApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditTrailApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditTrailApplyRequest) ProtoMessage() {}

func (x *AuditTrailApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditTrailApplyRequest.ProtoReflect.Descriptor instead.
func (*AuditTrailApplyRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{9}
}

func (x *AuditTrailApplyRequest) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

func (x *AuditTrailApplyRequest) GetStatus() TrialApplyStatus {
	if x != nil {
		return x.Status
	}
	return TrialApplyStatus_TRAIL_APPLY_UNKNOWN
}

func (x *AuditTrailApplyRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *AuditTrailApplyRequest) GetAuditUname() string {
	if x != nil {
		return x.AuditUname
	}
	return ""
}

type GetTrailApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 申请id pk 非空
	// @inject_tag: `validate:"is_ysid,required"`
	ApplyId string `protobuf:"bytes,1,opt,name=apply_id,json=applyId,proto3" json:"apply_id,omitempty"`
}

func (x *GetTrailApplyRequest) Reset() {
	*x = GetTrailApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrailApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrailApplyRequest) ProtoMessage() {}

func (x *GetTrailApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrailApplyRequest.ProtoReflect.Descriptor instead.
func (*GetTrailApplyRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{10}
}

func (x *GetTrailApplyRequest) GetApplyId() string {
	if x != nil {
		return x.ApplyId
	}
	return ""
}

type ListTrailApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 申请状态
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 用户关键词，包括user_id与phone
	UserKey string `protobuf:"bytes,2,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	// 试用商品类型 非空
	TrialResourceType int64 `protobuf:"varint,3,opt,name=trial_resource_type,json=trialResourceType,proto3" json:"trial_resource_type,omitempty"`
	// 试用商品关键词 非空
	TrialResourceKey string `protobuf:"bytes,4,opt,name=trial_resource_key,json=trialResourceKey,proto3" json:"trial_resource_key,omitempty"`
	// 申请状态
	ProductId string `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// 试用商品type 可为空
	CompanyId string `protobuf:"bytes,6,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 申请状态
	Status []TrialApplyStatus `protobuf:"varint,7,rep,packed,name=status,proto3,enum=company.TrialApplyStatus" json:"status,omitempty"`
	// 标记可为空
	RemarkKey string `protobuf:"bytes,8,opt,name=remark_key,json=remarkKey,proto3" json:"remark_key,omitempty"`
	// 申请来源
	ApplySource string `protobuf:"bytes,9,opt,name=apply_source,json=applySource,proto3" json:"apply_source,omitempty"`
	// @inject_tag: `validate:"required"`
	Page *ptype.Page `protobuf:"bytes,10,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListTrailApplyRequest) Reset() {
	*x = ListTrailApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrailApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrailApplyRequest) ProtoMessage() {}

func (x *ListTrailApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrailApplyRequest.ProtoReflect.Descriptor instead.
func (*ListTrailApplyRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{11}
}

func (x *ListTrailApplyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ListTrailApplyRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *ListTrailApplyRequest) GetTrialResourceType() int64 {
	if x != nil {
		return x.TrialResourceType
	}
	return 0
}

func (x *ListTrailApplyRequest) GetTrialResourceKey() string {
	if x != nil {
		return x.TrialResourceKey
	}
	return ""
}

func (x *ListTrailApplyRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ListTrailApplyRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *ListTrailApplyRequest) GetStatus() []TrialApplyStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListTrailApplyRequest) GetRemarkKey() string {
	if x != nil {
		return x.RemarkKey
	}
	return ""
}

func (x *ListTrailApplyRequest) GetApplySource() string {
	if x != nil {
		return x.ApplySource
	}
	return ""
}

func (x *ListTrailApplyRequest) GetPage() *ptype.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

type ListTrailApplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数据列表
	List []*TrialApply `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// @inject_tag: `validate:"required"`
	PageCtx *ptype.PageCtx `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *ListTrailApplyResponse) Reset() {
	*x = ListTrailApplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrailApplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrailApplyResponse) ProtoMessage() {}

func (x *ListTrailApplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrailApplyResponse.ProtoReflect.Descriptor instead.
func (*ListTrailApplyResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{12}
}

func (x *ListTrailApplyResponse) GetList() []*TrialApply {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListTrailApplyResponse) GetPageCtx() *ptype.PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

// GetTrialJobListReply returns the job list information and total number
type GetTrialInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The job list information
	// @inject_tag: `validate:"is_ysid,required"`
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *GetTrialInfoRequest) Reset() {
	*x = GetTrialInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTrialInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTrialInfoRequest) ProtoMessage() {}

func (x *GetTrialInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTrialInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTrialInfoRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{13}
}

func (x *GetTrialInfoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// GetTrialJobListReply returns the job list information and total number
type UpdateTrialInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The job list information
	// @inject_tag: `validate:"is_ysid,required"`
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *UpdateTrialInfoRequest) Reset() {
	*x = UpdateTrialInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTrialInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTrialInfoRequest) ProtoMessage() {}

func (x *UpdateTrialInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTrialInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateTrialInfoRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateTrialInfoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

// GetTrialJobListReply returns the job list information and total number
type ListTrialInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户关键词，包括user_id与phone
	UserKey string `protobuf:"bytes,1,opt,name=user_key,json=userKey,proto3" json:"user_key,omitempty"`
	// @inject_tag: `validate:"required"`
	Page *ptype.Page `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *ListTrialInfoRequest) Reset() {
	*x = ListTrialInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrialInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrialInfoRequest) ProtoMessage() {}

func (x *ListTrialInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrialInfoRequest.ProtoReflect.Descriptor instead.
func (*ListTrialInfoRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{15}
}

func (x *ListTrialInfoRequest) GetUserKey() string {
	if x != nil {
		return x.UserKey
	}
	return ""
}

func (x *ListTrialInfoRequest) GetPage() *ptype.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

// GetTrialJobListReply returns the job list information and total number
type ListTrialInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数据列表
	List []*TrialInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	// @inject_tag: `validate:"required"`
	PageCtx *ptype.PageCtx `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *ListTrialInfoResponse) Reset() {
	*x = ListTrialInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_apply_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrialInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrialInfoResponse) ProtoMessage() {}

func (x *ListTrialInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_apply_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrialInfoResponse.ProtoReflect.Descriptor instead.
func (*ListTrialInfoResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_apply_proto_rawDescGZIP(), []int{16}
}

func (x *ListTrialInfoResponse) GetList() []*TrialInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListTrialInfoResponse) GetPageCtx() *ptype.PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

var File_protos_platform_company_apply_proto protoreflect.FileDescriptor

var file_protos_platform_company_apply_proto_rawDesc = []byte{
	0x0a, 0x23, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xed, 0x03, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xee, 0x01, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x30, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xd4, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x45, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x43, 0x74, 0x78, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x22, 0xb2, 0x04, 0x0a,
	0x0a, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x6f, 0x72, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x55, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x61, 0x75,
	0x64, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x9e, 0x03, 0x0a, 0x09, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x63, 0x6f, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x6c, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b,
	0x65, 0x79, 0x22, 0xbc, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69,
	0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x70, 0x6c, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x22, 0x7f, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0x9f, 0x01, 0x0a, 0x16, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x55,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x31, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x22, 0xfd, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x61, 0x69, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x72, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x79,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x6c, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x69, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x52, 0x07, 0x70, 0x61,
	0x67, 0x65, 0x43, 0x74, 0x78, 0x22, 0x2e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x52, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x22, 0x6a, 0x0a, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x2a, 0x67, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x4e, 0x59, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x44, 0x4f, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x2a, 0xd8, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x5f,
	0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x52, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x49,
	0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x44,
	0x45, 0x46, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x49, 0x4c,
	0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4f, 0x4d, 0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50,
	0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x4f, 0x4d, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x52, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x4f,
	0x4d, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x32, 0xf1, 0x01, 0x0a,
	0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0xaa, 0x04, 0x0a, 0x11, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x69, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61,
	0x69, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0f, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54,
	0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x5d, 0x0a,
	0x11, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x79, 0x75, 0x61, 0x6e, 0x73,
	0x75, 0x61, 0x6e, 0x2f, 0x74, 0x69, 0x63, 0x70, 0x2f, 0x69, 0x50, 0x61, 0x61, 0x53, 0x2f, 0x73,
	0x73, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_protos_platform_company_apply_proto_rawDescOnce sync.Once
	file_protos_platform_company_apply_proto_rawDescData = file_protos_platform_company_apply_proto_rawDesc
)

func file_protos_platform_company_apply_proto_rawDescGZIP() []byte {
	file_protos_platform_company_apply_proto_rawDescOnce.Do(func() {
		file_protos_platform_company_apply_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_platform_company_apply_proto_rawDescData)
	})
	return file_protos_platform_company_apply_proto_rawDescData
}

var file_protos_platform_company_apply_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_platform_company_apply_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_protos_platform_company_apply_proto_goTypes = []interface{}{
	(CompanyApplyStatus)(0),         // 0: company.CompanyApplyStatus
	(TrialApplyStatus)(0),           // 1: company.TrialApplyStatus
	(*CompanyApply)(nil),            // 2: company.CompanyApply
	(*ApplyRequest)(nil),            // 3: company.ApplyRequest
	(*GetApplyByUserRequest)(nil),   // 4: company.GetApplyByUserRequest
	(*GetAllApplyListRequest)(nil),  // 5: company.GetAllApplyListRequest
	(*GetAllApplyListResponse)(nil), // 6: company.GetAllApplyListResponse
	(*TrialApply)(nil),              // 7: company.TrialApply
	(*TrialInfo)(nil),               // 8: company.TrialInfo
	(*CreateTrialApplyRequest)(nil), // 9: company.CreateTrialApplyRequest
	(*UpdateTrialApplyRequest)(nil), // 10: company.UpdateTrialApplyRequest
	(*AuditTrailApplyRequest)(nil),  // 11: company.AuditTrailApplyRequest
	(*GetTrailApplyRequest)(nil),    // 12: company.GetTrailApplyRequest
	(*ListTrailApplyRequest)(nil),   // 13: company.ListTrailApplyRequest
	(*ListTrailApplyResponse)(nil),  // 14: company.ListTrailApplyResponse
	(*GetTrialInfoRequest)(nil),     // 15: company.GetTrialInfoRequest
	(*UpdateTrialInfoRequest)(nil),  // 16: company.UpdateTrialInfoRequest
	(*ListTrialInfoRequest)(nil),    // 17: company.ListTrialInfoRequest
	(*ListTrialInfoResponse)(nil),   // 18: company.ListTrialInfoResponse
	(*timestamppb.Timestamp)(nil),   // 19: google.protobuf.Timestamp
	(*ptype.Page)(nil),              // 20: ptype.Page
	(*ptype.PageCtx)(nil),           // 21: ptype.PageCtx
}
var file_protos_platform_company_apply_proto_depIdxs = []int32{
	0,  // 0: company.CompanyApply.status:type_name -> company.CompanyApplyStatus
	19, // 1: company.CompanyApply.create_time:type_name -> google.protobuf.Timestamp
	19, // 2: company.CompanyApply.update_time:type_name -> google.protobuf.Timestamp
	19, // 3: company.GetAllApplyListRequest.start_time:type_name -> google.protobuf.Timestamp
	19, // 4: company.GetAllApplyListRequest.end_time:type_name -> google.protobuf.Timestamp
	0,  // 5: company.GetAllApplyListRequest.status:type_name -> company.CompanyApplyStatus
	20, // 6: company.GetAllApplyListRequest.page:type_name -> ptype.Page
	2,  // 7: company.GetAllApplyListResponse.list:type_name -> company.CompanyApply
	21, // 8: company.GetAllApplyListResponse.page_ctx:type_name -> ptype.PageCtx
	1,  // 9: company.TrialApply.status:type_name -> company.TrialApplyStatus
	19, // 10: company.TrialApply.audit_time:type_name -> google.protobuf.Timestamp
	19, // 11: company.TrialApply.create_time:type_name -> google.protobuf.Timestamp
	19, // 12: company.TrialApply.update_time:type_name -> google.protobuf.Timestamp
	1,  // 13: company.CreateTrialApplyRequest.status:type_name -> company.TrialApplyStatus
	1,  // 14: company.UpdateTrialApplyRequest.status:type_name -> company.TrialApplyStatus
	1,  // 15: company.AuditTrailApplyRequest.status:type_name -> company.TrialApplyStatus
	1,  // 16: company.ListTrailApplyRequest.status:type_name -> company.TrialApplyStatus
	20, // 17: company.ListTrailApplyRequest.page:type_name -> ptype.Page
	7,  // 18: company.ListTrailApplyResponse.list:type_name -> company.TrialApply
	21, // 19: company.ListTrailApplyResponse.page_ctx:type_name -> ptype.PageCtx
	20, // 20: company.ListTrialInfoRequest.page:type_name -> ptype.Page
	8,  // 21: company.ListTrialInfoResponse.list:type_name -> company.TrialInfo
	21, // 22: company.ListTrialInfoResponse.page_ctx:type_name -> ptype.PageCtx
	3,  // 23: company.CompanyApplyService.Apply:input_type -> company.ApplyRequest
	4,  // 24: company.CompanyApplyService.GetApplyByUser:input_type -> company.GetApplyByUserRequest
	5,  // 25: company.CompanyApplyService.GetAllApplyList:input_type -> company.GetAllApplyListRequest
	9,  // 26: company.TrialApplyService.CreateTrailApply:input_type -> company.CreateTrialApplyRequest
	10, // 27: company.TrialApplyService.UpdateTrailApply:input_type -> company.UpdateTrialApplyRequest
	11, // 28: company.TrialApplyService.AuditTrailApply:input_type -> company.AuditTrailApplyRequest
	12, // 29: company.TrialApplyService.GetTrailApply:input_type -> company.GetTrailApplyRequest
	13, // 30: company.TrialApplyService.ListTrailApply:input_type -> company.ListTrailApplyRequest
	15, // 31: company.TrialApplyService.GetTrialInfo:input_type -> company.GetTrialInfoRequest
	17, // 32: company.TrialApplyService.ListTrialInfo:input_type -> company.ListTrialInfoRequest
	16, // 33: company.InnerTrialService.UpdateTrialInfo:input_type -> company.UpdateTrialInfoRequest
	2,  // 34: company.CompanyApplyService.Apply:output_type -> company.CompanyApply
	2,  // 35: company.CompanyApplyService.GetApplyByUser:output_type -> company.CompanyApply
	6,  // 36: company.CompanyApplyService.GetAllApplyList:output_type -> company.GetAllApplyListResponse
	7,  // 37: company.TrialApplyService.CreateTrailApply:output_type -> company.TrialApply
	7,  // 38: company.TrialApplyService.UpdateTrailApply:output_type -> company.TrialApply
	7,  // 39: company.TrialApplyService.AuditTrailApply:output_type -> company.TrialApply
	7,  // 40: company.TrialApplyService.GetTrailApply:output_type -> company.TrialApply
	14, // 41: company.TrialApplyService.ListTrailApply:output_type -> company.ListTrailApplyResponse
	8,  // 42: company.TrialApplyService.GetTrialInfo:output_type -> company.TrialInfo
	18, // 43: company.TrialApplyService.ListTrialInfo:output_type -> company.ListTrialInfoResponse
	8,  // 44: company.InnerTrialService.UpdateTrialInfo:output_type -> company.TrialInfo
	34, // [34:45] is the sub-list for method output_type
	23, // [23:34] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_protos_platform_company_apply_proto_init() }
func file_protos_platform_company_apply_proto_init() {
	if File_protos_platform_company_apply_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_platform_company_apply_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompanyApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetApplyByUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllApplyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllApplyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrialInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTrialApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTrialApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditTrailApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTrailApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrailApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrailApplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTrialInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTrialInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrialInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_apply_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrialInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_platform_company_apply_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_protos_platform_company_apply_proto_goTypes,
		DependencyIndexes: file_protos_platform_company_apply_proto_depIdxs,
		EnumInfos:         file_protos_platform_company_apply_proto_enumTypes,
		MessageInfos:      file_protos_platform_company_apply_proto_msgTypes,
	}.Build()
	File_protos_platform_company_apply_proto = out.File
	file_protos_platform_company_apply_proto_rawDesc = nil
	file_protos_platform_company_apply_proto_goTypes = nil
	file_protos_platform_company_apply_proto_depIdxs = nil
}
