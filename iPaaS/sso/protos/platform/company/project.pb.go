// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: protos/platform/company/project.proto

package company

import (
	ptype "github.com/yuansuan/ticp/iPaaS/sso/protos/platform/ptype"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 项目状态
type ProjectStatus int32

const (
	// 未知
	ProjectStatus_PROJECT_UNKNOWN ProjectStatus = 0
	// 正常
	ProjectStatus_PROJECT_NORMAL ProjectStatus = 1
	// 删除
	ProjectStatus_PROJECT_DELETED ProjectStatus = 2
)

// Enum value maps for ProjectStatus.
var (
	ProjectStatus_name = map[int32]string{
		0: "PROJECT_UNKNOWN",
		1: "PROJECT_NORMAL",
		2: "PROJECT_DELETED",
	}
	ProjectStatus_value = map[string]int32{
		"PROJECT_UNKNOWN": 0,
		"PROJECT_NORMAL":  1,
		"PROJECT_DELETED": 2,
	}
)

func (x ProjectStatus) Enum() *ProjectStatus {
	p := new(ProjectStatus)
	*p = x
	return p
}

func (x ProjectStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_platform_company_project_proto_enumTypes[0].Descriptor()
}

func (ProjectStatus) Type() protoreflect.EnumType {
	return &file_protos_platform_company_project_proto_enumTypes[0]
}

func (x ProjectStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectStatus.Descriptor instead.
func (ProjectStatus) EnumDescriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{0}
}

// 项目类型
type ProjectType int32

const (
	// 未知
	ProjectType_PROJECT_TYPE_UNKNOWN ProjectType = 0
	// 个人项目
	ProjectType_PROJECT_TYPE_PERSON ProjectType = 1
	// 企业项目
	ProjectType_PROJECT_TYPE_COMPANY ProjectType = 2
)

// Enum value maps for ProjectType.
var (
	ProjectType_name = map[int32]string{
		0: "PROJECT_TYPE_UNKNOWN",
		1: "PROJECT_TYPE_PERSON",
		2: "PROJECT_TYPE_COMPANY",
	}
	ProjectType_value = map[string]int32{
		"PROJECT_TYPE_UNKNOWN": 0,
		"PROJECT_TYPE_PERSON":  1,
		"PROJECT_TYPE_COMPANY": 2,
	}
)

func (x ProjectType) Enum() *ProjectType {
	p := new(ProjectType)
	*p = x
	return p
}

func (x ProjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_platform_company_project_proto_enumTypes[1].Descriptor()
}

func (ProjectType) Type() protoreflect.EnumType {
	return &file_protos_platform_company_project_proto_enumTypes[1]
}

func (x ProjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProjectType.Descriptor instead.
func (ProjectType) EnumDescriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{1}
}

// 项目（工作空间）
type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 项目类型： 1个人项目；2企业项目
	Type int32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	// 企业ID
	CompanyId string `protobuf:"bytes,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 用户ID
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 项目状态
	Status ProjectStatus `protobuf:"varint,5,opt,name=status,proto3,enum=company.ProjectStatus" json:"status,omitempty"`
	// 项目名
	Name   string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Remark string `protobuf:"bytes,7,opt,name=remark,proto3" json:"remark,omitempty"`
	// 是否默认项目
	IsDefault  bool                   `protobuf:"varint,8,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	ModifyUid  string                 `protobuf:"bytes,9,opt,name=modify_uid,json=modifyUid,proto3" json:"modify_uid,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	CreateUid  string                 `protobuf:"bytes,13,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 资金账户ID
	AccountId string `protobuf:"bytes,15,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// 产品ID
	ProductId string `protobuf:"bytes,16,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// 项目icon
	ProjectIcon string `protobuf:"bytes,17,opt,name=project_icon,json=projectIcon,proto3" json:"project_icon,omitempty"`
	// 盒子域名
	// 如果不为空 覆盖 GetUserInfo 接口上盒子domain信息
	BoxDomain string `protobuf:"bytes,18,opt,name=box_domain,json=boxDomain,proto3" json:"box_domain,omitempty"`
	// 消费限额
	ConsumeLimitAmount int64 `protobuf:"varint,19,opt,name=consume_limit_amount,json=consumeLimitAmount,proto3" json:"consume_limit_amount,omitempty"`
	// 是否允许在高于消费限额的情况下提交任务
	AllowSubmitJobOverLimit bool `protobuf:"varint,20,opt,name=allow_submit_job_over_limit,json=allowSubmitJobOverLimit,proto3" json:"allow_submit_job_over_limit,omitempty"`
	ConsumeLimitEnabled     bool `protobuf:"varint,21,opt,name=consume_limit_enabled,json=consumeLimitEnabled,proto3" json:"consume_limit_enabled,omitempty"`
	// 项目属主ID
	OwnerUid string `protobuf:"bytes,22,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// 存储配额
	// ! 弃用↓
	StorageQuota int64 `protobuf:"varint,23,opt,name=storage_quota,json=storageQuota,proto3" json:"storage_quota,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{0}
}

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Project) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *Project) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Project) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_UNKNOWN
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Project) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *Project) GetModifyUid() string {
	if x != nil {
		return x.ModifyUid
	}
	return ""
}

func (x *Project) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Project) GetCreateUid() string {
	if x != nil {
		return x.CreateUid
	}
	return ""
}

func (x *Project) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Project) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *Project) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *Project) GetProjectIcon() string {
	if x != nil {
		return x.ProjectIcon
	}
	return ""
}

func (x *Project) GetBoxDomain() string {
	if x != nil {
		return x.BoxDomain
	}
	return ""
}

func (x *Project) GetConsumeLimitAmount() int64 {
	if x != nil {
		return x.ConsumeLimitAmount
	}
	return 0
}

func (x *Project) GetAllowSubmitJobOverLimit() bool {
	if x != nil {
		return x.AllowSubmitJobOverLimit
	}
	return false
}

func (x *Project) GetConsumeLimitEnabled() bool {
	if x != nil {
		return x.ConsumeLimitEnabled
	}
	return false
}

func (x *Project) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *Project) GetStorageQuota() int64 {
	if x != nil {
		return x.StorageQuota
	}
	return 0
}

// 项目成员
type ProjectUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 姓名
	RealName string `protobuf:"bytes,3,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	// 电话
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// email
	Email string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	// 创建时间
	JoinTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=join_time,json=joinTime,proto3" json:"join_time,omitempty"`
	// 用户名
	UserName string `protobuf:"bytes,8,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	// 显示用户名
	DisplayUserName string `protobuf:"bytes,9,opt,name=display_user_name,json=displayUserName,proto3" json:"display_user_name,omitempty"`
}

func (x *ProjectUser) Reset() {
	*x = ProjectUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUser) ProtoMessage() {}

func (x *ProjectUser) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUser.ProtoReflect.Descriptor instead.
func (*ProjectUser) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{1}
}

func (x *ProjectUser) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ProjectUser) GetRealName() string {
	if x != nil {
		return x.RealName
	}
	return ""
}

func (x *ProjectUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ProjectUser) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ProjectUser) GetJoinTime() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinTime
	}
	return nil
}

func (x *ProjectUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ProjectUser) GetDisplayUserName() string {
	if x != nil {
		return x.DisplayUserName
	}
	return ""
}

// 获取用户参与的个人项目列表请求
type GetUserProjectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	// @inject_tag: `validate:"is_ysid,required"`
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 项目状态
	Status ProjectStatus `protobuf:"varint,2,opt,name=status,proto3,enum=company.ProjectStatus" json:"status,omitempty"`
	// @inject_tag: `validate:"required"`
	Page *ptype.Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *GetUserProjectListRequest) Reset() {
	*x = GetUserProjectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProjectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProjectListRequest) ProtoMessage() {}

func (x *GetUserProjectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProjectListRequest.ProtoReflect.Descriptor instead.
func (*GetUserProjectListRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserProjectListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserProjectListRequest) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_UNKNOWN
}

func (x *GetUserProjectListRequest) GetPage() *ptype.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetUserProjectListRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 获取用户参与的个人项目列表结果
type GetUserProjectListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List    []*Project     `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageCtx *ptype.PageCtx `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *GetUserProjectListResponse) Reset() {
	*x = GetUserProjectListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProjectListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProjectListResponse) ProtoMessage() {}

func (x *GetUserProjectListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProjectListResponse.ProtoReflect.Descriptor instead.
func (*GetUserProjectListResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserProjectListResponse) GetList() []*Project {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetUserProjectListResponse) GetPageCtx() *ptype.PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

// 获取用户项目列表请求
type GetCompanyProjectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 企业ID
	// @inject_tag: `validate:"is_ysid,required"`
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 项目状态
	Status ProjectStatus `protobuf:"varint,2,opt,name=status,proto3,enum=company.ProjectStatus" json:"status,omitempty"`
	// @inject_tag: `validate:"required"`
	Page *ptype.Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *GetCompanyProjectListRequest) Reset() {
	*x = GetCompanyProjectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyProjectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyProjectListRequest) ProtoMessage() {}

func (x *GetCompanyProjectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyProjectListRequest.ProtoReflect.Descriptor instead.
func (*GetCompanyProjectListRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{4}
}

func (x *GetCompanyProjectListRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GetCompanyProjectListRequest) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_UNKNOWN
}

func (x *GetCompanyProjectListRequest) GetPage() *ptype.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetCompanyProjectListRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 获取用户项目列表结果
type GetCompanyProjectListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List    []*Project     `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageCtx *ptype.PageCtx `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *GetCompanyProjectListResponse) Reset() {
	*x = GetCompanyProjectListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCompanyProjectListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCompanyProjectListResponse) ProtoMessage() {}

func (x *GetCompanyProjectListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCompanyProjectListResponse.ProtoReflect.Descriptor instead.
func (*GetCompanyProjectListResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{5}
}

func (x *GetCompanyProjectListResponse) GetList() []*Project {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetCompanyProjectListResponse) GetPageCtx() *ptype.PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

// 获取项目请求
type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid,required"`
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,2,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{6}
}

func (x *GetProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetProjectRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 获取项目结果
type GetProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetProjectResponse) Reset() {
	*x = GetProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectResponse) ProtoMessage() {}

func (x *GetProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectResponse.ProtoReflect.Descriptor instead.
func (*GetProjectResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{7}
}

func (x *GetProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

// 验证用户是否访问指定项目权限请求
type CheckUserAccessRightOnProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	// @inject_tag: `validate:"is_ysid,required"`
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 项目ID
	// @inject_tag: `validate:"is_ysid,required"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *CheckUserAccessRightOnProjectRequest) Reset() {
	*x = CheckUserAccessRightOnProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserAccessRightOnProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserAccessRightOnProjectRequest) ProtoMessage() {}

func (x *CheckUserAccessRightOnProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserAccessRightOnProjectRequest.ProtoReflect.Descriptor instead.
func (*CheckUserAccessRightOnProjectRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{8}
}

func (x *CheckUserAccessRightOnProjectRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CheckUserAccessRightOnProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// 验证用户是否访问指定项目权限结果
type CheckUserAccessRightOnProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// true 有权限  false 无权限
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *CheckUserAccessRightOnProjectResponse) Reset() {
	*x = CheckUserAccessRightOnProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserAccessRightOnProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserAccessRightOnProjectResponse) ProtoMessage() {}

func (x *CheckUserAccessRightOnProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserAccessRightOnProjectResponse.ProtoReflect.Descriptor instead.
func (*CheckUserAccessRightOnProjectResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{9}
}

func (x *CheckUserAccessRightOnProjectResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

// 获取项目成员列表请求
type GetProjectUserListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"is_ysid,required"`
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 姓名和手机号搜索KEY
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// @inject_tag: `validate:"required"`
	Page *ptype.Page `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
	// 成员用户ID
	UserIds []string `protobuf:"bytes,5,rep,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *GetProjectUserListRequest) Reset() {
	*x = GetProjectUserListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectUserListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectUserListRequest) ProtoMessage() {}

func (x *GetProjectUserListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectUserListRequest.ProtoReflect.Descriptor instead.
func (*GetProjectUserListRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{10}
}

func (x *GetProjectUserListRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetProjectUserListRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GetProjectUserListRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetProjectUserListRequest) GetPage() *ptype.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetProjectUserListRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *GetProjectUserListRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 获取项目成员列表结果
type GetProjectUserListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List    []*ProjectUser `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageCtx *ptype.PageCtx `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *GetProjectUserListResponse) Reset() {
	*x = GetProjectUserListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectUserListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectUserListResponse) ProtoMessage() {}

func (x *GetProjectUserListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectUserListResponse.ProtoReflect.Descriptor instead.
func (*GetProjectUserListResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{11}
}

func (x *GetProjectUserListResponse) GetList() []*ProjectUser {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetProjectUserListResponse) GetPageCtx() *ptype.PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

// 修改项目信息请求
type ModifyProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	// @inject_tag: `validate:"is_ysid,required"`
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 用户ID，个人项目必传
	// @inject_tag: `validate:"is_ysid"`
	UserId string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 企业ID，企业项目必传
	// @inject_tag: `validate:"is_ysid"`
	CompanyId string `protobuf:"bytes,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 项目说明
	Remark string `protobuf:"bytes,4,opt,name=remark,proto3" json:"remark,omitempty"`
	// 项目ICON
	ProjectIcon string `protobuf:"bytes,5,opt,name=project_icon,json=projectIcon,proto3" json:"project_icon,omitempty"`
	// 操作人uid
	// @inject_tag: `validate:"required"`
	OpUserId string `protobuf:"bytes,6,opt,name=op_user_id,json=opUserId,proto3" json:"op_user_id,omitempty"`
	// 项目名称
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	// @inject_tag: `validate:"required"`
	ProjectType ProjectType `protobuf:"varint,8,opt,name=project_type,json=projectType,proto3,enum=company.ProjectType" json:"project_type,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// 消费限额
	// @inject_tag: `validate:"gte=0"`
	ConsumeLimitAmount int64 `protobuf:"varint,10,opt,name=consume_limit_amount,json=consumeLimitAmount,proto3" json:"consume_limit_amount,omitempty"`
	// 是否允许在高于消费限额的情况下提交任务
	AllowSubmitJobOverLimit bool `protobuf:"varint,11,opt,name=allow_submit_job_over_limit,json=allowSubmitJobOverLimit,proto3" json:"allow_submit_job_over_limit,omitempty"`
	// 是否启用消费限额
	ConsumeLimitEnabled bool `protobuf:"varint,12,opt,name=consume_limit_enabled,json=consumeLimitEnabled,proto3" json:"consume_limit_enabled,omitempty"`
	// 项目属主ID
	// @inject_tag: `validate:"is_ysid"`
	OwnerUid string `protobuf:"bytes,13,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
	// 存储配额
	StorageQuota int64 `protobuf:"varint,14,opt,name=storage_quota,json=storageQuota,proto3" json:"storage_quota,omitempty"`
	// 盒子域名
	BoxDomain string `protobuf:"bytes,15,opt,name=box_domain,json=boxDomain,proto3" json:"box_domain,omitempty"`
}

func (x *ModifyProjectRequest) Reset() {
	*x = ModifyProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyProjectRequest) ProtoMessage() {}

func (x *ModifyProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyProjectRequest.ProtoReflect.Descriptor instead.
func (*ModifyProjectRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{12}
}

func (x *ModifyProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ModifyProjectRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ModifyProjectRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *ModifyProjectRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ModifyProjectRequest) GetProjectIcon() string {
	if x != nil {
		return x.ProjectIcon
	}
	return ""
}

func (x *ModifyProjectRequest) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *ModifyProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModifyProjectRequest) GetProjectType() ProjectType {
	if x != nil {
		return x.ProjectType
	}
	return ProjectType_PROJECT_TYPE_UNKNOWN
}

func (x *ModifyProjectRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *ModifyProjectRequest) GetConsumeLimitAmount() int64 {
	if x != nil {
		return x.ConsumeLimitAmount
	}
	return 0
}

func (x *ModifyProjectRequest) GetAllowSubmitJobOverLimit() bool {
	if x != nil {
		return x.AllowSubmitJobOverLimit
	}
	return false
}

func (x *ModifyProjectRequest) GetConsumeLimitEnabled() bool {
	if x != nil {
		return x.ConsumeLimitEnabled
	}
	return false
}

func (x *ModifyProjectRequest) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

func (x *ModifyProjectRequest) GetStorageQuota() int64 {
	if x != nil {
		return x.StorageQuota
	}
	return 0
}

func (x *ModifyProjectRequest) GetBoxDomain() string {
	if x != nil {
		return x.BoxDomain
	}
	return ""
}

// 修改项目信息结果
type ModifyProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success 成功 ； fail 失败
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ModifyProjectResponse) Reset() {
	*x = ModifyProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyProjectResponse) ProtoMessage() {}

func (x *ModifyProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyProjectResponse.ProtoReflect.Descriptor instead.
func (*ModifyProjectResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{13}
}

func (x *ModifyProjectResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

// 获取项目下所有用户数量请求
type GetTotalNumberOfUserInProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	// @inject_tag: `validate:"is_ysid,required"`
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GetTotalNumberOfUserInProjectRequest) Reset() {
	*x = GetTotalNumberOfUserInProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalNumberOfUserInProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalNumberOfUserInProjectRequest) ProtoMessage() {}

func (x *GetTotalNumberOfUserInProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalNumberOfUserInProjectRequest.ProtoReflect.Descriptor instead.
func (*GetTotalNumberOfUserInProjectRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{14}
}

func (x *GetTotalNumberOfUserInProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

// 获取项目下所有用户数量结果
type GetTotalNumberOfUserInProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总数
	Total int64 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetTotalNumberOfUserInProjectResponse) Reset() {
	*x = GetTotalNumberOfUserInProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTotalNumberOfUserInProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTotalNumberOfUserInProjectResponse) ProtoMessage() {}

func (x *GetTotalNumberOfUserInProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTotalNumberOfUserInProjectResponse.ProtoReflect.Descriptor instead.
func (*GetTotalNumberOfUserInProjectResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{15}
}

func (x *GetTotalNumberOfUserInProjectResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 新增项目请求
type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID，个人项目必传
	// @inject_tag: `validate:"is_ysid"`
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 企业ID，企业项目必传
	// @inject_tag: `validate:"is_ysid"`
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 空间说明
	Remark string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`
	// 空间ICON uri
	// @inject_tag: `validate:"required"`
	ProjectIcon string `protobuf:"bytes,4,opt,name=project_icon,json=projectIcon,proto3" json:"project_icon,omitempty"`
	// 项目名称
	// @inject_tag: `validate:"required"`
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// 操作人ID
	// @inject_tag: `validate:"is_ysid,required"`
	OpUserId string `protobuf:"bytes,6,opt,name=op_user_id,json=opUserId,proto3" json:"op_user_id,omitempty"`
	// 资金账户ID (当前逻辑，企业传企业的资金账户ID；个人传个人的资金账户ID)
	// @inject_tag: `validate:"is_ysid,required"`
	AccountId string `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	// 项目类型 1个人； 2企业
	ProjectType ProjectType `protobuf:"varint,8,opt,name=project_type,json=projectType,proto3,enum=company.ProjectType" json:"project_type,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	// 消费限额
	// @inject_tag: `validate:"gte=0"`
	ConsumeLimitAmount int64 `protobuf:"varint,10,opt,name=consume_limit_amount,json=consumeLimitAmount,proto3" json:"consume_limit_amount,omitempty"`
	// 是否允许在高于消费限额的情况下提交任务
	AllowSubmitJobOverLimit bool `protobuf:"varint,11,opt,name=allow_submit_job_over_limit,json=allowSubmitJobOverLimit,proto3" json:"allow_submit_job_over_limit,omitempty"`
	// 是否启用消费限额
	ConsumeLimitEnabled bool `protobuf:"varint,12,opt,name=consume_limit_enabled,json=consumeLimitEnabled,proto3" json:"consume_limit_enabled,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{16}
}

func (x *CreateProjectRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateProjectRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *CreateProjectRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *CreateProjectRequest) GetProjectIcon() string {
	if x != nil {
		return x.ProjectIcon
	}
	return ""
}

func (x *CreateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProjectRequest) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *CreateProjectRequest) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

func (x *CreateProjectRequest) GetProjectType() ProjectType {
	if x != nil {
		return x.ProjectType
	}
	return ProjectType_PROJECT_TYPE_UNKNOWN
}

func (x *CreateProjectRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *CreateProjectRequest) GetConsumeLimitAmount() int64 {
	if x != nil {
		return x.ConsumeLimitAmount
	}
	return 0
}

func (x *CreateProjectRequest) GetAllowSubmitJobOverLimit() bool {
	if x != nil {
		return x.AllowSubmitJobOverLimit
	}
	return false
}

func (x *CreateProjectRequest) GetConsumeLimitEnabled() bool {
	if x != nil {
		return x.ConsumeLimitEnabled
	}
	return false
}

// 新增项目结果
type CreateProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Project `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateProjectResponse) Reset() {
	*x = CreateProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectResponse) ProtoMessage() {}

func (x *CreateProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectResponse.ProtoReflect.Descriptor instead.
func (*CreateProjectResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{17}
}

func (x *CreateProjectResponse) GetData() *Project {
	if x != nil {
		return x.Data
	}
	return nil
}

// 删除项目成员请求
type DelUserFromProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	// @inject_tag: `validate:"is_ysid,required"`
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 企业ID， 个人项目不传
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 删除用户ID
	//
	//	@inject_tag `validate:"required"`
	DeleteUserIds []string `protobuf:"bytes,3,rep,name=delete_user_ids,json=deleteUserIds,proto3" json:"delete_user_ids,omitempty"`
	// @inject_tag: `validate:"is_ysid,required"`
	OpUserId string `protobuf:"bytes,4,opt,name=op_user_id,json=opUserId,proto3" json:"op_user_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *DelUserFromProjectRequest) Reset() {
	*x = DelUserFromProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserFromProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserFromProjectRequest) ProtoMessage() {}

func (x *DelUserFromProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserFromProjectRequest.ProtoReflect.Descriptor instead.
func (*DelUserFromProjectRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{18}
}

func (x *DelUserFromProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DelUserFromProjectRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *DelUserFromProjectRequest) GetDeleteUserIds() []string {
	if x != nil {
		return x.DeleteUserIds
	}
	return nil
}

func (x *DelUserFromProjectRequest) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *DelUserFromProjectRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 删除项目成员结果
type DelUserFromProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 删除成功用户数
	DeletedNum int32 `protobuf:"varint,1,opt,name=deleted_num,json=deletedNum,proto3" json:"deleted_num,omitempty"`
}

func (x *DelUserFromProjectResponse) Reset() {
	*x = DelUserFromProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserFromProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserFromProjectResponse) ProtoMessage() {}

func (x *DelUserFromProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserFromProjectResponse.ProtoReflect.Descriptor instead.
func (*DelUserFromProjectResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{19}
}

func (x *DelUserFromProjectResponse) GetDeletedNum() int32 {
	if x != nil {
		return x.DeletedNum
	}
	return 0
}

// 添加项目成员请求
type AddUserToProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	// @inject_tag: `validate:"is_ysid,required"`
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 企业ID， 个人项目不传
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 添加用户ID
	//
	//	@inject_tag `validate:"required"`
	AddUserIds []string `protobuf:"bytes,3,rep,name=add_user_ids,json=addUserIds,proto3" json:"add_user_ids,omitempty"`
	// @inject_tag: `validate:"is_ysid,required"`
	OpUserId string `protobuf:"bytes,4,opt,name=op_user_id,json=opUserId,proto3" json:"op_user_id,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *AddUserToProjectRequest) Reset() {
	*x = AddUserToProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserToProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToProjectRequest) ProtoMessage() {}

func (x *AddUserToProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToProjectRequest.ProtoReflect.Descriptor instead.
func (*AddUserToProjectRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{20}
}

func (x *AddUserToProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AddUserToProjectRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *AddUserToProjectRequest) GetAddUserIds() []string {
	if x != nil {
		return x.AddUserIds
	}
	return nil
}

func (x *AddUserToProjectRequest) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *AddUserToProjectRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 添加项目成员结果
type AddUserToProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 添加成功用户数
	AddedNum int32 `protobuf:"varint,1,opt,name=added_num,json=addedNum,proto3" json:"added_num,omitempty"`
}

func (x *AddUserToProjectResponse) Reset() {
	*x = AddUserToProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserToProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserToProjectResponse) ProtoMessage() {}

func (x *AddUserToProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserToProjectResponse.ProtoReflect.Descriptor instead.
func (*AddUserToProjectResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{21}
}

func (x *AddUserToProjectResponse) GetAddedNum() int32 {
	if x != nil {
		return x.AddedNum
	}
	return 0
}

// 删除项目请求
type DeleteProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	// @inject_tag: `validate:"is_ysid,required"`
	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	// 企业ID， 企业项目必填
	// @inject_tag: `validate:"is_ysid"`
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 用户ID， 个人项目必填
	// @inject_tag: `validate:"is_ysid"`
	UserId string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 操作人用户ID
	// @inject_tag: `validate:"is_ysid,required"`
	OpUserId string `protobuf:"bytes,4,opt,name=op_user_id,json=opUserId,proto3" json:"op_user_id,omitempty"`
	// 项目类型 1个人； 2企业
	// @inject_tag: `validate:"required"`
	ProjectType ProjectType `protobuf:"varint,5,opt,name=project_type,json=projectType,proto3,enum=company.ProjectType" json:"project_type,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteProjectRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *DeleteProjectRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteProjectRequest) GetOpUserId() string {
	if x != nil {
		return x.OpUserId
	}
	return ""
}

func (x *DeleteProjectRequest) GetProjectType() ProjectType {
	if x != nil {
		return x.ProjectType
	}
	return ProjectType_PROJECT_TYPE_UNKNOWN
}

func (x *DeleteProjectRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 删除项目结果
type DeleteProjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// success 成功 ； fail 失败
	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	// 是否存在运行的作业
	IsRunJob bool `protobuf:"varint,2,opt,name=is_run_job,json=isRunJob,proto3" json:"is_run_job,omitempty"`
	// 是否存在打开的应用
	IsOpenApp bool `protobuf:"varint,3,opt,name=is_open_app,json=isOpenApp,proto3" json:"is_open_app,omitempty"`
}

func (x *DeleteProjectResponse) Reset() {
	*x = DeleteProjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteProjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectResponse) ProtoMessage() {}

func (x *DeleteProjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteProjectResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteProjectResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *DeleteProjectResponse) GetIsRunJob() bool {
	if x != nil {
		return x.IsRunJob
	}
	return false
}

func (x *DeleteProjectResponse) GetIsOpenApp() bool {
	if x != nil {
		return x.IsOpenApp
	}
	return false
}

// 获取用户参与的企业项目列表请求
type GetUserJoinCompanyProjectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户ID
	// @inject_tag: `validate:"is_ysid,required"`
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 企业ID
	// @inject_tag: `validate:"is_ysid,required"`
	CompanyId string `protobuf:"bytes,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 项目状态
	Status ProjectStatus `protobuf:"varint,3,opt,name=status,proto3,enum=company.ProjectStatus" json:"status,omitempty"`
	// @inject_tag: `validate:"required"`
	Page *ptype.Page `protobuf:"bytes,4,opt,name=page,proto3" json:"page,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *GetUserJoinCompanyProjectListRequest) Reset() {
	*x = GetUserJoinCompanyProjectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserJoinCompanyProjectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserJoinCompanyProjectListRequest) ProtoMessage() {}

func (x *GetUserJoinCompanyProjectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserJoinCompanyProjectListRequest.ProtoReflect.Descriptor instead.
func (*GetUserJoinCompanyProjectListRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{24}
}

func (x *GetUserJoinCompanyProjectListRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserJoinCompanyProjectListRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GetUserJoinCompanyProjectListRequest) GetStatus() ProjectStatus {
	if x != nil {
		return x.Status
	}
	return ProjectStatus_PROJECT_UNKNOWN
}

func (x *GetUserJoinCompanyProjectListRequest) GetPage() *ptype.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetUserJoinCompanyProjectListRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 获取用户参与的企业项目列表结果
type GetUserJoinCompanyProjectListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List    []*Project     `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageCtx *ptype.PageCtx `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *GetUserJoinCompanyProjectListResponse) Reset() {
	*x = GetUserJoinCompanyProjectListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserJoinCompanyProjectListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserJoinCompanyProjectListResponse) ProtoMessage() {}

func (x *GetUserJoinCompanyProjectListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserJoinCompanyProjectListResponse.ProtoReflect.Descriptor instead.
func (*GetUserJoinCompanyProjectListResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{25}
}

func (x *GetUserJoinCompanyProjectListResponse) GetList() []*Project {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetUserJoinCompanyProjectListResponse) GetPageCtx() *ptype.PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

// 获取实体盒子对应的所有项目请求
type GetProjectListByBoxRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: `validate:"required"`
	Page *ptype.Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *GetProjectListByBoxRequest) Reset() {
	*x = GetProjectListByBoxRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectListByBoxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectListByBoxRequest) ProtoMessage() {}

func (x *GetProjectListByBoxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectListByBoxRequest.ProtoReflect.Descriptor instead.
func (*GetProjectListByBoxRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{26}
}

func (x *GetProjectListByBoxRequest) GetPage() *ptype.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

// 获取实体盒子对应的所有项目结果
type GetProjectListByBoxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List    []*ProjectLiteInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageCtx *ptype.PageCtx     `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *GetProjectListByBoxResponse) Reset() {
	*x = GetProjectListByBoxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectListByBoxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectListByBoxResponse) ProtoMessage() {}

func (x *GetProjectListByBoxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectListByBoxResponse.ProtoReflect.Descriptor instead.
func (*GetProjectListByBoxResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{27}
}

func (x *GetProjectListByBoxResponse) GetList() []*ProjectLiteInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetProjectListByBoxResponse) GetPageCtx() *ptype.PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

// 简化项目信息
type ProjectLiteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 项目ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 项目ID
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 企业ID
	CompanyId string `protobuf:"bytes,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 创建用户ID
	CreateUid string `protobuf:"bytes,4,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	// 创建时间
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 项目属主ID
	OwnerUid string `protobuf:"bytes,6,opt,name=owner_uid,json=ownerUid,proto3" json:"owner_uid,omitempty"`
}

func (x *ProjectLiteInfo) Reset() {
	*x = ProjectLiteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectLiteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectLiteInfo) ProtoMessage() {}

func (x *ProjectLiteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectLiteInfo.ProtoReflect.Descriptor instead.
func (*ProjectLiteInfo) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{28}
}

func (x *ProjectLiteInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectLiteInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProjectLiteInfo) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *ProjectLiteInfo) GetCreateUid() string {
	if x != nil {
		return x.CreateUid
	}
	return ""
}

func (x *ProjectLiteInfo) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ProjectLiteInfo) GetOwnerUid() string {
	if x != nil {
		return x.OwnerUid
	}
	return ""
}

// 获取项目列表请求
type GetProjectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 企业ID
	// @inject_tag: `validate:"is_ysid"`
	CompanyId string `protobuf:"bytes,1,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	// 项目名搜索关键字
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// @inject_tag: `validate:"required"`
	Page *ptype.Page `protobuf:"bytes,3,opt,name=page,proto3" json:"page,omitempty"`
	// @inject_tag: `validate:"is_ysid"`
	ProductId string `protobuf:"bytes,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
}

func (x *GetProjectListRequest) Reset() {
	*x = GetProjectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectListRequest) ProtoMessage() {}

func (x *GetProjectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectListRequest.ProtoReflect.Descriptor instead.
func (*GetProjectListRequest) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{29}
}

func (x *GetProjectListRequest) GetCompanyId() string {
	if x != nil {
		return x.CompanyId
	}
	return ""
}

func (x *GetProjectListRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GetProjectListRequest) GetPage() *ptype.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GetProjectListRequest) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

// 获取项目列表结果
type GetProjectListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List    []*ProjectLiteInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	PageCtx *ptype.PageCtx     `protobuf:"bytes,2,opt,name=page_ctx,json=pageCtx,proto3" json:"page_ctx,omitempty"`
}

func (x *GetProjectListResponse) Reset() {
	*x = GetProjectListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_platform_company_project_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectListResponse) ProtoMessage() {}

func (x *GetProjectListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_platform_company_project_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectListResponse.ProtoReflect.Descriptor instead.
func (*GetProjectListResponse) Descriptor() ([]byte, []int) {
	return file_protos_platform_company_project_proto_rawDescGZIP(), []int{30}
}

func (x *GetProjectListResponse) GetList() []*ProjectLiteInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GetProjectListResponse) GetPageCtx() *ptype.PageCtx {
	if x != nil {
		return x.PageCtx
	}
	return nil
}

var File_protos_platform_company_project_proto protoreflect.FileDescriptor

var file_protos_platform_company_project_proto_rawDesc = []byte{
	0x0a, 0x25, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x70, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x05, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x55, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6f, 0x78, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x30,
	0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4a, 0x6f, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x61, 0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x6d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x43, 0x74, 0x78, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x22, 0xad,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x70,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x74,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78,
	0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x5e, 0x0a, 0x24, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x25, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xc6, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x71, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x43,
	0x74, 0x78, 0x22, 0xb7, 0x04, 0x0a, 0x14, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x0a, 0x6f, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x4f, 0x76,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x6f, 0x78, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x62, 0x6f, 0x78, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x29, 0x0a, 0x15,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x45, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3d,
	0x0a, 0x25, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd6, 0x03,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x0a, 0x6f, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4a, 0x6f, 0x62, 0x4f, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3d, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x37,
	0x0a, 0x18, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x22, 0xe3, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x67, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72,
	0x75, 0x6e, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x52, 0x75, 0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x22, 0xce, 0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x43, 0x74,
	0x78, 0x22, 0x3d, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x76, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x52,
	0x07, 0x70, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x69, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x52, 0x07, 0x70,
	0x61, 0x67, 0x65, 0x43, 0x74, 0x78, 0x2a, 0x4d, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x5a, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59, 0x10,
	0x02, 0x32, 0xf9, 0x0a, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x1d,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x46, 0x72, 0x6f,
	0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x42, 0x6f, 0x78, 0x12, 0x23, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x42, 0x6f, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xc8, 0x02,
	0x0a, 0x16, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x1d, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2d, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x42,
	0x6f, 0x78, 0x12, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x42, 0x6f, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x42, 0x6f, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x2e,
	0x79, 0x75, 0x61, 0x6e, 0x73, 0x75, 0x61, 0x6e, 0x2e, 0x63, 0x6e, 0x2f, 0x73, 0x73, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_platform_company_project_proto_rawDescOnce sync.Once
	file_protos_platform_company_project_proto_rawDescData = file_protos_platform_company_project_proto_rawDesc
)

func file_protos_platform_company_project_proto_rawDescGZIP() []byte {
	file_protos_platform_company_project_proto_rawDescOnce.Do(func() {
		file_protos_platform_company_project_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_platform_company_project_proto_rawDescData)
	})
	return file_protos_platform_company_project_proto_rawDescData
}

var file_protos_platform_company_project_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_protos_platform_company_project_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_protos_platform_company_project_proto_goTypes = []interface{}{
	(ProjectStatus)(0),                            // 0: company.ProjectStatus
	(ProjectType)(0),                              // 1: company.ProjectType
	(*Project)(nil),                               // 2: company.Project
	(*ProjectUser)(nil),                           // 3: company.ProjectUser
	(*GetUserProjectListRequest)(nil),             // 4: company.GetUserProjectListRequest
	(*GetUserProjectListResponse)(nil),            // 5: company.GetUserProjectListResponse
	(*GetCompanyProjectListRequest)(nil),          // 6: company.GetCompanyProjectListRequest
	(*GetCompanyProjectListResponse)(nil),         // 7: company.GetCompanyProjectListResponse
	(*GetProjectRequest)(nil),                     // 8: company.GetProjectRequest
	(*GetProjectResponse)(nil),                    // 9: company.GetProjectResponse
	(*CheckUserAccessRightOnProjectRequest)(nil),  // 10: company.CheckUserAccessRightOnProjectRequest
	(*CheckUserAccessRightOnProjectResponse)(nil), // 11: company.CheckUserAccessRightOnProjectResponse
	(*GetProjectUserListRequest)(nil),             // 12: company.GetProjectUserListRequest
	(*GetProjectUserListResponse)(nil),            // 13: company.GetProjectUserListResponse
	(*ModifyProjectRequest)(nil),                  // 14: company.ModifyProjectRequest
	(*ModifyProjectResponse)(nil),                 // 15: company.ModifyProjectResponse
	(*GetTotalNumberOfUserInProjectRequest)(nil),  // 16: company.GetTotalNumberOfUserInProjectRequest
	(*GetTotalNumberOfUserInProjectResponse)(nil), // 17: company.GetTotalNumberOfUserInProjectResponse
	(*CreateProjectRequest)(nil),                  // 18: company.CreateProjectRequest
	(*CreateProjectResponse)(nil),                 // 19: company.CreateProjectResponse
	(*DelUserFromProjectRequest)(nil),             // 20: company.DelUserFromProjectRequest
	(*DelUserFromProjectResponse)(nil),            // 21: company.DelUserFromProjectResponse
	(*AddUserToProjectRequest)(nil),               // 22: company.AddUserToProjectRequest
	(*AddUserToProjectResponse)(nil),              // 23: company.AddUserToProjectResponse
	(*DeleteProjectRequest)(nil),                  // 24: company.DeleteProjectRequest
	(*DeleteProjectResponse)(nil),                 // 25: company.DeleteProjectResponse
	(*GetUserJoinCompanyProjectListRequest)(nil),  // 26: company.GetUserJoinCompanyProjectListRequest
	(*GetUserJoinCompanyProjectListResponse)(nil), // 27: company.GetUserJoinCompanyProjectListResponse
	(*GetProjectListByBoxRequest)(nil),            // 28: company.GetProjectListByBoxRequest
	(*GetProjectListByBoxResponse)(nil),           // 29: company.GetProjectListByBoxResponse
	(*ProjectLiteInfo)(nil),                       // 30: company.ProjectLiteInfo
	(*GetProjectListRequest)(nil),                 // 31: company.GetProjectListRequest
	(*GetProjectListResponse)(nil),                // 32: company.GetProjectListResponse
	(*timestamppb.Timestamp)(nil),                 // 33: google.protobuf.Timestamp
	(*ptype.Page)(nil),                            // 34: ptype.Page
	(*ptype.PageCtx)(nil),                         // 35: ptype.PageCtx
}
var file_protos_platform_company_project_proto_depIdxs = []int32{
	0,  // 0: company.Project.status:type_name -> company.ProjectStatus
	33, // 1: company.Project.update_time:type_name -> google.protobuf.Timestamp
	33, // 2: company.Project.create_time:type_name -> google.protobuf.Timestamp
	33, // 3: company.ProjectUser.join_time:type_name -> google.protobuf.Timestamp
	0,  // 4: company.GetUserProjectListRequest.status:type_name -> company.ProjectStatus
	34, // 5: company.GetUserProjectListRequest.page:type_name -> ptype.Page
	2,  // 6: company.GetUserProjectListResponse.list:type_name -> company.Project
	35, // 7: company.GetUserProjectListResponse.page_ctx:type_name -> ptype.PageCtx
	0,  // 8: company.GetCompanyProjectListRequest.status:type_name -> company.ProjectStatus
	34, // 9: company.GetCompanyProjectListRequest.page:type_name -> ptype.Page
	2,  // 10: company.GetCompanyProjectListResponse.list:type_name -> company.Project
	35, // 11: company.GetCompanyProjectListResponse.page_ctx:type_name -> ptype.PageCtx
	2,  // 12: company.GetProjectResponse.project:type_name -> company.Project
	34, // 13: company.GetProjectUserListRequest.page:type_name -> ptype.Page
	3,  // 14: company.GetProjectUserListResponse.list:type_name -> company.ProjectUser
	35, // 15: company.GetProjectUserListResponse.page_ctx:type_name -> ptype.PageCtx
	1,  // 16: company.ModifyProjectRequest.project_type:type_name -> company.ProjectType
	1,  // 17: company.CreateProjectRequest.project_type:type_name -> company.ProjectType
	2,  // 18: company.CreateProjectResponse.data:type_name -> company.Project
	1,  // 19: company.DeleteProjectRequest.project_type:type_name -> company.ProjectType
	0,  // 20: company.GetUserJoinCompanyProjectListRequest.status:type_name -> company.ProjectStatus
	34, // 21: company.GetUserJoinCompanyProjectListRequest.page:type_name -> ptype.Page
	2,  // 22: company.GetUserJoinCompanyProjectListResponse.list:type_name -> company.Project
	35, // 23: company.GetUserJoinCompanyProjectListResponse.page_ctx:type_name -> ptype.PageCtx
	34, // 24: company.GetProjectListByBoxRequest.page:type_name -> ptype.Page
	30, // 25: company.GetProjectListByBoxResponse.list:type_name -> company.ProjectLiteInfo
	35, // 26: company.GetProjectListByBoxResponse.page_ctx:type_name -> ptype.PageCtx
	33, // 27: company.ProjectLiteInfo.create_time:type_name -> google.protobuf.Timestamp
	34, // 28: company.GetProjectListRequest.page:type_name -> ptype.Page
	30, // 29: company.GetProjectListResponse.list:type_name -> company.ProjectLiteInfo
	35, // 30: company.GetProjectListResponse.page_ctx:type_name -> ptype.PageCtx
	4,  // 31: company.ProjectService.GetUserProjectList:input_type -> company.GetUserProjectListRequest
	26, // 32: company.ProjectService.GetUserJoinCompanyProjectList:input_type -> company.GetUserJoinCompanyProjectListRequest
	6,  // 33: company.ProjectService.GetCompanyProjectList:input_type -> company.GetCompanyProjectListRequest
	8,  // 34: company.ProjectService.GetProject:input_type -> company.GetProjectRequest
	10, // 35: company.ProjectService.CheckUserAccessRightOnProject:input_type -> company.CheckUserAccessRightOnProjectRequest
	12, // 36: company.ProjectService.GetProjectUserList:input_type -> company.GetProjectUserListRequest
	18, // 37: company.ProjectService.CreateProject:input_type -> company.CreateProjectRequest
	24, // 38: company.ProjectService.DeleteProject:input_type -> company.DeleteProjectRequest
	14, // 39: company.ProjectService.ModifyProject:input_type -> company.ModifyProjectRequest
	20, // 40: company.ProjectService.DelUserFromProject:input_type -> company.DelUserFromProjectRequest
	22, // 41: company.ProjectService.AddUserToProject:input_type -> company.AddUserToProjectRequest
	16, // 42: company.ProjectService.GetTotalNumberOfUserInProject:input_type -> company.GetTotalNumberOfUserInProjectRequest
	28, // 43: company.ProjectService.GetProjectListByBox:input_type -> company.GetProjectListByBoxRequest
	31, // 44: company.ProjectService.GetProjectList:input_type -> company.GetProjectListRequest
	10, // 45: company.ProjectReadOnlyService.CheckUserAccessRightOnProject:input_type -> company.CheckUserAccessRightOnProjectRequest
	28, // 46: company.ProjectReadOnlyService.GetProjectListByBox:input_type -> company.GetProjectListByBoxRequest
	8,  // 47: company.ProjectReadOnlyService.GetProject:input_type -> company.GetProjectRequest
	5,  // 48: company.ProjectService.GetUserProjectList:output_type -> company.GetUserProjectListResponse
	27, // 49: company.ProjectService.GetUserJoinCompanyProjectList:output_type -> company.GetUserJoinCompanyProjectListResponse
	7,  // 50: company.ProjectService.GetCompanyProjectList:output_type -> company.GetCompanyProjectListResponse
	9,  // 51: company.ProjectService.GetProject:output_type -> company.GetProjectResponse
	11, // 52: company.ProjectService.CheckUserAccessRightOnProject:output_type -> company.CheckUserAccessRightOnProjectResponse
	13, // 53: company.ProjectService.GetProjectUserList:output_type -> company.GetProjectUserListResponse
	19, // 54: company.ProjectService.CreateProject:output_type -> company.CreateProjectResponse
	25, // 55: company.ProjectService.DeleteProject:output_type -> company.DeleteProjectResponse
	15, // 56: company.ProjectService.ModifyProject:output_type -> company.ModifyProjectResponse
	21, // 57: company.ProjectService.DelUserFromProject:output_type -> company.DelUserFromProjectResponse
	23, // 58: company.ProjectService.AddUserToProject:output_type -> company.AddUserToProjectResponse
	17, // 59: company.ProjectService.GetTotalNumberOfUserInProject:output_type -> company.GetTotalNumberOfUserInProjectResponse
	29, // 60: company.ProjectService.GetProjectListByBox:output_type -> company.GetProjectListByBoxResponse
	32, // 61: company.ProjectService.GetProjectList:output_type -> company.GetProjectListResponse
	11, // 62: company.ProjectReadOnlyService.CheckUserAccessRightOnProject:output_type -> company.CheckUserAccessRightOnProjectResponse
	29, // 63: company.ProjectReadOnlyService.GetProjectListByBox:output_type -> company.GetProjectListByBoxResponse
	9,  // 64: company.ProjectReadOnlyService.GetProject:output_type -> company.GetProjectResponse
	48, // [48:65] is the sub-list for method output_type
	31, // [31:48] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_protos_platform_company_project_proto_init() }
func file_protos_platform_company_project_proto_init() {
	if File_protos_platform_company_project_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_platform_company_project_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProjectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProjectListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyProjectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCompanyProjectListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserAccessRightOnProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserAccessRightOnProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectUserListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectUserListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalNumberOfUserInProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTotalNumberOfUserInProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserFromProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelUserFromProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserToProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddUserToProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteProjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserJoinCompanyProjectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserJoinCompanyProjectListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectListByBoxRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectListByBoxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectLiteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_platform_company_project_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_platform_company_project_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_protos_platform_company_project_proto_goTypes,
		DependencyIndexes: file_protos_platform_company_project_proto_depIdxs,
		EnumInfos:         file_protos_platform_company_project_proto_enumTypes,
		MessageInfos:      file_protos_platform_company_project_proto_msgTypes,
	}.Build()
	File_protos_platform_company_project_proto = out.File
	file_protos_platform_company_project_proto_rawDesc = nil
	file_protos_platform_company_project_proto_goTypes = nil
	file_protos_platform_company_project_proto_depIdxs = nil
}
