// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	// 获取用户参与的个人项目列表（个人身份登录时使用）
	GetUserProjectList(ctx context.Context, in *GetUserProjectListRequest, opts ...grpc.CallOption) (*GetUserProjectListResponse, error)
	// 获取用户参与的企业项目列表 （企业身份登录时使用）
	GetUserJoinCompanyProjectList(ctx context.Context, in *GetUserJoinCompanyProjectListRequest, opts ...grpc.CallOption) (*GetUserJoinCompanyProjectListResponse, error)
	// 获取企业项目列表（企业管理员身份登录时使用）
	GetCompanyProjectList(ctx context.Context, in *GetCompanyProjectListRequest, opts ...grpc.CallOption) (*GetCompanyProjectListResponse, error)
	// 获取项目详情
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
	// 验证用户是否访问指定项目权限
	CheckUserAccessRightOnProject(ctx context.Context, in *CheckUserAccessRightOnProjectRequest, opts ...grpc.CallOption) (*CheckUserAccessRightOnProjectResponse, error)
	// 获取项目成员列表
	GetProjectUserList(ctx context.Context, in *GetProjectUserListRequest, opts ...grpc.CallOption) (*GetProjectUserListResponse, error)
	// 新增项目
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// 删除项目
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error)
	// 修改项目
	ModifyProject(ctx context.Context, in *ModifyProjectRequest, opts ...grpc.CallOption) (*ModifyProjectResponse, error)
	// 删除项目成员
	DelUserFromProject(ctx context.Context, in *DelUserFromProjectRequest, opts ...grpc.CallOption) (*DelUserFromProjectResponse, error)
	// 添加项目成员
	AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*AddUserToProjectResponse, error)
	// 获取项目下所有用户数量
	GetTotalNumberOfUserInProject(ctx context.Context, in *GetTotalNumberOfUserInProjectRequest, opts ...grpc.CallOption) (*GetTotalNumberOfUserInProjectResponse, error)
	// 获取实体盒子对应的所有项目
	GetProjectListByBox(ctx context.Context, in *GetProjectListByBoxRequest, opts ...grpc.CallOption) (*GetProjectListByBoxResponse, error)
	// 获取项目列表（oms使用）
	GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GetUserProjectList(ctx context.Context, in *GetUserProjectListRequest, opts ...grpc.CallOption) (*GetUserProjectListResponse, error) {
	out := new(GetUserProjectListResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/GetUserProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetUserJoinCompanyProjectList(ctx context.Context, in *GetUserJoinCompanyProjectListRequest, opts ...grpc.CallOption) (*GetUserJoinCompanyProjectListResponse, error) {
	out := new(GetUserJoinCompanyProjectListResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/GetUserJoinCompanyProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetCompanyProjectList(ctx context.Context, in *GetCompanyProjectListRequest, opts ...grpc.CallOption) (*GetCompanyProjectListResponse, error) {
	out := new(GetCompanyProjectListResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/GetCompanyProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CheckUserAccessRightOnProject(ctx context.Context, in *CheckUserAccessRightOnProjectRequest, opts ...grpc.CallOption) (*CheckUserAccessRightOnProjectResponse, error) {
	out := new(CheckUserAccessRightOnProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/CheckUserAccessRightOnProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectUserList(ctx context.Context, in *GetProjectUserListRequest, opts ...grpc.CallOption) (*GetProjectUserListResponse, error) {
	out := new(GetProjectUserListResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/GetProjectUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*DeleteProjectResponse, error) {
	out := new(DeleteProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ModifyProject(ctx context.Context, in *ModifyProjectRequest, opts ...grpc.CallOption) (*ModifyProjectResponse, error) {
	out := new(ModifyProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/ModifyProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DelUserFromProject(ctx context.Context, in *DelUserFromProjectRequest, opts ...grpc.CallOption) (*DelUserFromProjectResponse, error) {
	out := new(DelUserFromProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/DelUserFromProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddUserToProject(ctx context.Context, in *AddUserToProjectRequest, opts ...grpc.CallOption) (*AddUserToProjectResponse, error) {
	out := new(AddUserToProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/AddUserToProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetTotalNumberOfUserInProject(ctx context.Context, in *GetTotalNumberOfUserInProjectRequest, opts ...grpc.CallOption) (*GetTotalNumberOfUserInProjectResponse, error) {
	out := new(GetTotalNumberOfUserInProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/GetTotalNumberOfUserInProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectListByBox(ctx context.Context, in *GetProjectListByBoxRequest, opts ...grpc.CallOption) (*GetProjectListByBoxResponse, error) {
	out := new(GetProjectListByBoxResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/GetProjectListByBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListResponse, error) {
	out := new(GetProjectListResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectService/GetProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	// 获取用户参与的个人项目列表（个人身份登录时使用）
	GetUserProjectList(context.Context, *GetUserProjectListRequest) (*GetUserProjectListResponse, error)
	// 获取用户参与的企业项目列表 （企业身份登录时使用）
	GetUserJoinCompanyProjectList(context.Context, *GetUserJoinCompanyProjectListRequest) (*GetUserJoinCompanyProjectListResponse, error)
	// 获取企业项目列表（企业管理员身份登录时使用）
	GetCompanyProjectList(context.Context, *GetCompanyProjectListRequest) (*GetCompanyProjectListResponse, error)
	// 获取项目详情
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	// 验证用户是否访问指定项目权限
	CheckUserAccessRightOnProject(context.Context, *CheckUserAccessRightOnProjectRequest) (*CheckUserAccessRightOnProjectResponse, error)
	// 获取项目成员列表
	GetProjectUserList(context.Context, *GetProjectUserListRequest) (*GetProjectUserListResponse, error)
	// 新增项目
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// 删除项目
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error)
	// 修改项目
	ModifyProject(context.Context, *ModifyProjectRequest) (*ModifyProjectResponse, error)
	// 删除项目成员
	DelUserFromProject(context.Context, *DelUserFromProjectRequest) (*DelUserFromProjectResponse, error)
	// 添加项目成员
	AddUserToProject(context.Context, *AddUserToProjectRequest) (*AddUserToProjectResponse, error)
	// 获取项目下所有用户数量
	GetTotalNumberOfUserInProject(context.Context, *GetTotalNumberOfUserInProjectRequest) (*GetTotalNumberOfUserInProjectResponse, error)
	// 获取实体盒子对应的所有项目
	GetProjectListByBox(context.Context, *GetProjectListByBoxRequest) (*GetProjectListByBoxResponse, error)
	// 获取项目列表（oms使用）
	GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) GetUserProjectList(context.Context, *GetUserProjectListRequest) (*GetUserProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProjectList not implemented")
}
func (UnimplementedProjectServiceServer) GetUserJoinCompanyProjectList(context.Context, *GetUserJoinCompanyProjectListRequest) (*GetUserJoinCompanyProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserJoinCompanyProjectList not implemented")
}
func (UnimplementedProjectServiceServer) GetCompanyProjectList(context.Context, *GetCompanyProjectListRequest) (*GetCompanyProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyProjectList not implemented")
}
func (UnimplementedProjectServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectServiceServer) CheckUserAccessRightOnProject(context.Context, *CheckUserAccessRightOnProjectRequest) (*CheckUserAccessRightOnProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAccessRightOnProject not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectUserList(context.Context, *GetProjectUserListRequest) (*GetProjectUserListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectUserList not implemented")
}
func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectServiceServer) ModifyProject(context.Context, *ModifyProjectRequest) (*ModifyProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyProject not implemented")
}
func (UnimplementedProjectServiceServer) DelUserFromProject(context.Context, *DelUserFromProjectRequest) (*DelUserFromProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserFromProject not implemented")
}
func (UnimplementedProjectServiceServer) AddUserToProject(context.Context, *AddUserToProjectRequest) (*AddUserToProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToProject not implemented")
}
func (UnimplementedProjectServiceServer) GetTotalNumberOfUserInProject(context.Context, *GetTotalNumberOfUserInProjectRequest) (*GetTotalNumberOfUserInProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalNumberOfUserInProject not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectListByBox(context.Context, *GetProjectListByBoxRequest) (*GetProjectListByBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectListByBox not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectList not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_GetUserProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetUserProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/GetUserProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetUserProjectList(ctx, req.(*GetUserProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetUserJoinCompanyProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserJoinCompanyProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetUserJoinCompanyProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/GetUserJoinCompanyProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetUserJoinCompanyProjectList(ctx, req.(*GetUserJoinCompanyProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetCompanyProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetCompanyProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/GetCompanyProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetCompanyProjectList(ctx, req.(*GetCompanyProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CheckUserAccessRightOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserAccessRightOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CheckUserAccessRightOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/CheckUserAccessRightOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CheckUserAccessRightOnProject(ctx, req.(*CheckUserAccessRightOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/GetProjectUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectUserList(ctx, req.(*GetProjectUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ModifyProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ModifyProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/ModifyProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ModifyProject(ctx, req.(*ModifyProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DelUserFromProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserFromProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DelUserFromProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/DelUserFromProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DelUserFromProject(ctx, req.(*DelUserFromProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddUserToProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserToProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddUserToProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/AddUserToProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddUserToProject(ctx, req.(*AddUserToProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetTotalNumberOfUserInProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalNumberOfUserInProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetTotalNumberOfUserInProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/GetTotalNumberOfUserInProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetTotalNumberOfUserInProject(ctx, req.(*GetTotalNumberOfUserInProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectListByBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectListByBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectListByBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/GetProjectListByBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectListByBox(ctx, req.(*GetProjectListByBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectService/GetProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectList(ctx, req.(*GetProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserProjectList",
			Handler:    _ProjectService_GetUserProjectList_Handler,
		},
		{
			MethodName: "GetUserJoinCompanyProjectList",
			Handler:    _ProjectService_GetUserJoinCompanyProjectList_Handler,
		},
		{
			MethodName: "GetCompanyProjectList",
			Handler:    _ProjectService_GetCompanyProjectList_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectService_GetProject_Handler,
		},
		{
			MethodName: "CheckUserAccessRightOnProject",
			Handler:    _ProjectService_CheckUserAccessRightOnProject_Handler,
		},
		{
			MethodName: "GetProjectUserList",
			Handler:    _ProjectService_GetProjectUserList_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectService_DeleteProject_Handler,
		},
		{
			MethodName: "ModifyProject",
			Handler:    _ProjectService_ModifyProject_Handler,
		},
		{
			MethodName: "DelUserFromProject",
			Handler:    _ProjectService_DelUserFromProject_Handler,
		},
		{
			MethodName: "AddUserToProject",
			Handler:    _ProjectService_AddUserToProject_Handler,
		},
		{
			MethodName: "GetTotalNumberOfUserInProject",
			Handler:    _ProjectService_GetTotalNumberOfUserInProject_Handler,
		},
		{
			MethodName: "GetProjectListByBox",
			Handler:    _ProjectService_GetProjectListByBox_Handler,
		},
		{
			MethodName: "GetProjectList",
			Handler:    _ProjectService_GetProjectList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/project.proto",
}

// ProjectReadOnlyServiceClient is the client API for ProjectReadOnlyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectReadOnlyServiceClient interface {
	// 验证用户是否访问指定项目权限
	CheckUserAccessRightOnProject(ctx context.Context, in *CheckUserAccessRightOnProjectRequest, opts ...grpc.CallOption) (*CheckUserAccessRightOnProjectResponse, error)
	// 获取实体盒子对应的所有项目
	GetProjectListByBox(ctx context.Context, in *GetProjectListByBoxRequest, opts ...grpc.CallOption) (*GetProjectListByBoxResponse, error)
	// 获取项目详情
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error)
}

type projectReadOnlyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectReadOnlyServiceClient(cc grpc.ClientConnInterface) ProjectReadOnlyServiceClient {
	return &projectReadOnlyServiceClient{cc}
}

func (c *projectReadOnlyServiceClient) CheckUserAccessRightOnProject(ctx context.Context, in *CheckUserAccessRightOnProjectRequest, opts ...grpc.CallOption) (*CheckUserAccessRightOnProjectResponse, error) {
	out := new(CheckUserAccessRightOnProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectReadOnlyService/CheckUserAccessRightOnProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectReadOnlyServiceClient) GetProjectListByBox(ctx context.Context, in *GetProjectListByBoxRequest, opts ...grpc.CallOption) (*GetProjectListByBoxResponse, error) {
	out := new(GetProjectListByBoxResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectReadOnlyService/GetProjectListByBox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectReadOnlyServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectResponse, error) {
	out := new(GetProjectResponse)
	err := c.cc.Invoke(ctx, "/company.ProjectReadOnlyService/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectReadOnlyServiceServer is the server API for ProjectReadOnlyService service.
// All implementations must embed UnimplementedProjectReadOnlyServiceServer
// for forward compatibility
type ProjectReadOnlyServiceServer interface {
	// 验证用户是否访问指定项目权限
	CheckUserAccessRightOnProject(context.Context, *CheckUserAccessRightOnProjectRequest) (*CheckUserAccessRightOnProjectResponse, error)
	// 获取实体盒子对应的所有项目
	GetProjectListByBox(context.Context, *GetProjectListByBoxRequest) (*GetProjectListByBoxResponse, error)
	// 获取项目详情
	GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error)
	mustEmbedUnimplementedProjectReadOnlyServiceServer()
}

// UnimplementedProjectReadOnlyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectReadOnlyServiceServer struct {
}

func (UnimplementedProjectReadOnlyServiceServer) CheckUserAccessRightOnProject(context.Context, *CheckUserAccessRightOnProjectRequest) (*CheckUserAccessRightOnProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAccessRightOnProject not implemented")
}
func (UnimplementedProjectReadOnlyServiceServer) GetProjectListByBox(context.Context, *GetProjectListByBoxRequest) (*GetProjectListByBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectListByBox not implemented")
}
func (UnimplementedProjectReadOnlyServiceServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectReadOnlyServiceServer) mustEmbedUnimplementedProjectReadOnlyServiceServer() {
}

// UnsafeProjectReadOnlyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectReadOnlyServiceServer will
// result in compilation errors.
type UnsafeProjectReadOnlyServiceServer interface {
	mustEmbedUnimplementedProjectReadOnlyServiceServer()
}

func RegisterProjectReadOnlyServiceServer(s grpc.ServiceRegistrar, srv ProjectReadOnlyServiceServer) {
	s.RegisterService(&ProjectReadOnlyService_ServiceDesc, srv)
}

func _ProjectReadOnlyService_CheckUserAccessRightOnProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserAccessRightOnProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectReadOnlyServiceServer).CheckUserAccessRightOnProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectReadOnlyService/CheckUserAccessRightOnProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectReadOnlyServiceServer).CheckUserAccessRightOnProject(ctx, req.(*CheckUserAccessRightOnProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectReadOnlyService_GetProjectListByBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectListByBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectReadOnlyServiceServer).GetProjectListByBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectReadOnlyService/GetProjectListByBox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectReadOnlyServiceServer).GetProjectListByBox(ctx, req.(*GetProjectListByBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectReadOnlyService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectReadOnlyServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.ProjectReadOnlyService/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectReadOnlyServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectReadOnlyService_ServiceDesc is the grpc.ServiceDesc for ProjectReadOnlyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectReadOnlyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.ProjectReadOnlyService",
	HandlerType: (*ProjectReadOnlyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserAccessRightOnProject",
			Handler:    _ProjectReadOnlyService_CheckUserAccessRightOnProject_Handler,
		},
		{
			MethodName: "GetProjectListByBox",
			Handler:    _ProjectReadOnlyService_GetProjectListByBox_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _ProjectReadOnlyService_GetProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/project.proto",
}
