// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyApplyServiceClient is the client API for CompanyApplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyApplyServiceClient interface {
	Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*CompanyApply, error)
	GetApplyByUser(ctx context.Context, in *GetApplyByUserRequest, opts ...grpc.CallOption) (*CompanyApply, error)
	GetAllApplyList(ctx context.Context, in *GetAllApplyListRequest, opts ...grpc.CallOption) (*GetAllApplyListResponse, error)
}

type companyApplyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyApplyServiceClient(cc grpc.ClientConnInterface) CompanyApplyServiceClient {
	return &companyApplyServiceClient{cc}
}

func (c *companyApplyServiceClient) Apply(ctx context.Context, in *ApplyRequest, opts ...grpc.CallOption) (*CompanyApply, error) {
	out := new(CompanyApply)
	err := c.cc.Invoke(ctx, "/company.CompanyApplyService/Apply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyApplyServiceClient) GetApplyByUser(ctx context.Context, in *GetApplyByUserRequest, opts ...grpc.CallOption) (*CompanyApply, error) {
	out := new(CompanyApply)
	err := c.cc.Invoke(ctx, "/company.CompanyApplyService/GetApplyByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyApplyServiceClient) GetAllApplyList(ctx context.Context, in *GetAllApplyListRequest, opts ...grpc.CallOption) (*GetAllApplyListResponse, error) {
	out := new(GetAllApplyListResponse)
	err := c.cc.Invoke(ctx, "/company.CompanyApplyService/GetAllApplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyApplyServiceServer is the server API for CompanyApplyService service.
// All implementations must embed UnimplementedCompanyApplyServiceServer
// for forward compatibility
type CompanyApplyServiceServer interface {
	Apply(context.Context, *ApplyRequest) (*CompanyApply, error)
	GetApplyByUser(context.Context, *GetApplyByUserRequest) (*CompanyApply, error)
	GetAllApplyList(context.Context, *GetAllApplyListRequest) (*GetAllApplyListResponse, error)
	mustEmbedUnimplementedCompanyApplyServiceServer()
}

// UnimplementedCompanyApplyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyApplyServiceServer struct {
}

func (UnimplementedCompanyApplyServiceServer) Apply(context.Context, *ApplyRequest) (*CompanyApply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Apply not implemented")
}
func (UnimplementedCompanyApplyServiceServer) GetApplyByUser(context.Context, *GetApplyByUserRequest) (*CompanyApply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplyByUser not implemented")
}
func (UnimplementedCompanyApplyServiceServer) GetAllApplyList(context.Context, *GetAllApplyListRequest) (*GetAllApplyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllApplyList not implemented")
}
func (UnimplementedCompanyApplyServiceServer) mustEmbedUnimplementedCompanyApplyServiceServer() {}

// UnsafeCompanyApplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyApplyServiceServer will
// result in compilation errors.
type UnsafeCompanyApplyServiceServer interface {
	mustEmbedUnimplementedCompanyApplyServiceServer()
}

func RegisterCompanyApplyServiceServer(s grpc.ServiceRegistrar, srv CompanyApplyServiceServer) {
	s.RegisterService(&CompanyApplyService_ServiceDesc, srv)
}

func _CompanyApplyService_Apply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyApplyServiceServer).Apply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyApplyService/Apply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyApplyServiceServer).Apply(ctx, req.(*ApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyApplyService_GetApplyByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplyByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyApplyServiceServer).GetApplyByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyApplyService/GetApplyByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyApplyServiceServer).GetApplyByUser(ctx, req.(*GetApplyByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyApplyService_GetAllApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllApplyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyApplyServiceServer).GetAllApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.CompanyApplyService/GetAllApplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyApplyServiceServer).GetAllApplyList(ctx, req.(*GetAllApplyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyApplyService_ServiceDesc is the grpc.ServiceDesc for CompanyApplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyApplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyApplyService",
	HandlerType: (*CompanyApplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Apply",
			Handler:    _CompanyApplyService_Apply_Handler,
		},
		{
			MethodName: "GetApplyByUser",
			Handler:    _CompanyApplyService_GetApplyByUser_Handler,
		},
		{
			MethodName: "GetAllApplyList",
			Handler:    _CompanyApplyService_GetAllApplyList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/apply.proto",
}

// TrialApplyServiceClient is the client API for TrialApplyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrialApplyServiceClient interface {
	// 创建试用申请
	CreateTrailApply(ctx context.Context, in *CreateTrialApplyRequest, opts ...grpc.CallOption) (*TrialApply, error)
	// 用户更新试用申请
	UpdateTrailApply(ctx context.Context, in *UpdateTrialApplyRequest, opts ...grpc.CallOption) (*TrialApply, error)
	// OMS管理员审核
	AuditTrailApply(ctx context.Context, in *AuditTrailApplyRequest, opts ...grpc.CallOption) (*TrialApply, error)
	// 获取试用申请(Apply_id)
	GetTrailApply(ctx context.Context, in *GetTrailApplyRequest, opts ...grpc.CallOption) (*TrialApply, error)
	// 试用申请查询(多条件筛选)
	ListTrailApply(ctx context.Context, in *ListTrailApplyRequest, opts ...grpc.CallOption) (*ListTrailApplyResponse, error)
	// 试用信息获取(user_id)           --- 此接口预留company_id 但未启用
	GetTrialInfo(ctx context.Context, in *GetTrialInfoRequest, opts ...grpc.CallOption) (*TrialInfo, error)
	// 试用信息查询(多条件查询)
	ListTrialInfo(ctx context.Context, in *ListTrialInfoRequest, opts ...grpc.CallOption) (*ListTrialInfoResponse, error)
}

type trialApplyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrialApplyServiceClient(cc grpc.ClientConnInterface) TrialApplyServiceClient {
	return &trialApplyServiceClient{cc}
}

func (c *trialApplyServiceClient) CreateTrailApply(ctx context.Context, in *CreateTrialApplyRequest, opts ...grpc.CallOption) (*TrialApply, error) {
	out := new(TrialApply)
	err := c.cc.Invoke(ctx, "/company.TrialApplyService/CreateTrailApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialApplyServiceClient) UpdateTrailApply(ctx context.Context, in *UpdateTrialApplyRequest, opts ...grpc.CallOption) (*TrialApply, error) {
	out := new(TrialApply)
	err := c.cc.Invoke(ctx, "/company.TrialApplyService/UpdateTrailApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialApplyServiceClient) AuditTrailApply(ctx context.Context, in *AuditTrailApplyRequest, opts ...grpc.CallOption) (*TrialApply, error) {
	out := new(TrialApply)
	err := c.cc.Invoke(ctx, "/company.TrialApplyService/AuditTrailApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialApplyServiceClient) GetTrailApply(ctx context.Context, in *GetTrailApplyRequest, opts ...grpc.CallOption) (*TrialApply, error) {
	out := new(TrialApply)
	err := c.cc.Invoke(ctx, "/company.TrialApplyService/GetTrailApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialApplyServiceClient) ListTrailApply(ctx context.Context, in *ListTrailApplyRequest, opts ...grpc.CallOption) (*ListTrailApplyResponse, error) {
	out := new(ListTrailApplyResponse)
	err := c.cc.Invoke(ctx, "/company.TrialApplyService/ListTrailApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialApplyServiceClient) GetTrialInfo(ctx context.Context, in *GetTrialInfoRequest, opts ...grpc.CallOption) (*TrialInfo, error) {
	out := new(TrialInfo)
	err := c.cc.Invoke(ctx, "/company.TrialApplyService/GetTrialInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trialApplyServiceClient) ListTrialInfo(ctx context.Context, in *ListTrialInfoRequest, opts ...grpc.CallOption) (*ListTrialInfoResponse, error) {
	out := new(ListTrialInfoResponse)
	err := c.cc.Invoke(ctx, "/company.TrialApplyService/ListTrialInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrialApplyServiceServer is the server API for TrialApplyService service.
// All implementations must embed UnimplementedTrialApplyServiceServer
// for forward compatibility
type TrialApplyServiceServer interface {
	// 创建试用申请
	CreateTrailApply(context.Context, *CreateTrialApplyRequest) (*TrialApply, error)
	// 用户更新试用申请
	UpdateTrailApply(context.Context, *UpdateTrialApplyRequest) (*TrialApply, error)
	// OMS管理员审核
	AuditTrailApply(context.Context, *AuditTrailApplyRequest) (*TrialApply, error)
	// 获取试用申请(Apply_id)
	GetTrailApply(context.Context, *GetTrailApplyRequest) (*TrialApply, error)
	// 试用申请查询(多条件筛选)
	ListTrailApply(context.Context, *ListTrailApplyRequest) (*ListTrailApplyResponse, error)
	// 试用信息获取(user_id)           --- 此接口预留company_id 但未启用
	GetTrialInfo(context.Context, *GetTrialInfoRequest) (*TrialInfo, error)
	// 试用信息查询(多条件查询)
	ListTrialInfo(context.Context, *ListTrialInfoRequest) (*ListTrialInfoResponse, error)
	mustEmbedUnimplementedTrialApplyServiceServer()
}

// UnimplementedTrialApplyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTrialApplyServiceServer struct {
}

func (UnimplementedTrialApplyServiceServer) CreateTrailApply(context.Context, *CreateTrialApplyRequest) (*TrialApply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrailApply not implemented")
}
func (UnimplementedTrialApplyServiceServer) UpdateTrailApply(context.Context, *UpdateTrialApplyRequest) (*TrialApply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrailApply not implemented")
}
func (UnimplementedTrialApplyServiceServer) AuditTrailApply(context.Context, *AuditTrailApplyRequest) (*TrialApply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuditTrailApply not implemented")
}
func (UnimplementedTrialApplyServiceServer) GetTrailApply(context.Context, *GetTrailApplyRequest) (*TrialApply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrailApply not implemented")
}
func (UnimplementedTrialApplyServiceServer) ListTrailApply(context.Context, *ListTrailApplyRequest) (*ListTrailApplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrailApply not implemented")
}
func (UnimplementedTrialApplyServiceServer) GetTrialInfo(context.Context, *GetTrialInfoRequest) (*TrialInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrialInfo not implemented")
}
func (UnimplementedTrialApplyServiceServer) ListTrialInfo(context.Context, *ListTrialInfoRequest) (*ListTrialInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTrialInfo not implemented")
}
func (UnimplementedTrialApplyServiceServer) mustEmbedUnimplementedTrialApplyServiceServer() {}

// UnsafeTrialApplyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrialApplyServiceServer will
// result in compilation errors.
type UnsafeTrialApplyServiceServer interface {
	mustEmbedUnimplementedTrialApplyServiceServer()
}

func RegisterTrialApplyServiceServer(s grpc.ServiceRegistrar, srv TrialApplyServiceServer) {
	s.RegisterService(&TrialApplyService_ServiceDesc, srv)
}

func _TrialApplyService_CreateTrailApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTrialApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialApplyServiceServer).CreateTrailApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TrialApplyService/CreateTrailApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialApplyServiceServer).CreateTrailApply(ctx, req.(*CreateTrialApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialApplyService_UpdateTrailApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrialApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialApplyServiceServer).UpdateTrailApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TrialApplyService/UpdateTrailApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialApplyServiceServer).UpdateTrailApply(ctx, req.(*UpdateTrialApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialApplyService_AuditTrailApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuditTrailApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialApplyServiceServer).AuditTrailApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TrialApplyService/AuditTrailApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialApplyServiceServer).AuditTrailApply(ctx, req.(*AuditTrailApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialApplyService_GetTrailApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrailApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialApplyServiceServer).GetTrailApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TrialApplyService/GetTrailApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialApplyServiceServer).GetTrailApply(ctx, req.(*GetTrailApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialApplyService_ListTrailApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrailApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialApplyServiceServer).ListTrailApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TrialApplyService/ListTrailApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialApplyServiceServer).ListTrailApply(ctx, req.(*ListTrailApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialApplyService_GetTrialInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrialInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialApplyServiceServer).GetTrialInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TrialApplyService/GetTrialInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialApplyServiceServer).GetTrialInfo(ctx, req.(*GetTrialInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrialApplyService_ListTrialInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTrialInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrialApplyServiceServer).ListTrialInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.TrialApplyService/ListTrialInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrialApplyServiceServer).ListTrialInfo(ctx, req.(*ListTrialInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TrialApplyService_ServiceDesc is the grpc.ServiceDesc for TrialApplyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TrialApplyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.TrialApplyService",
	HandlerType: (*TrialApplyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTrailApply",
			Handler:    _TrialApplyService_CreateTrailApply_Handler,
		},
		{
			MethodName: "UpdateTrailApply",
			Handler:    _TrialApplyService_UpdateTrailApply_Handler,
		},
		{
			MethodName: "AuditTrailApply",
			Handler:    _TrialApplyService_AuditTrailApply_Handler,
		},
		{
			MethodName: "GetTrailApply",
			Handler:    _TrialApplyService_GetTrailApply_Handler,
		},
		{
			MethodName: "ListTrailApply",
			Handler:    _TrialApplyService_ListTrailApply_Handler,
		},
		{
			MethodName: "GetTrialInfo",
			Handler:    _TrialApplyService_GetTrialInfo_Handler,
		},
		{
			MethodName: "ListTrialInfo",
			Handler:    _TrialApplyService_ListTrialInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/apply.proto",
}

// InnerTrialServiceClient is the client API for InnerTrialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InnerTrialServiceClient interface {
	// 内部调用，Job服务调用，触发用量统计
	UpdateTrialInfo(ctx context.Context, in *UpdateTrialInfoRequest, opts ...grpc.CallOption) (*TrialInfo, error)
}

type innerTrialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInnerTrialServiceClient(cc grpc.ClientConnInterface) InnerTrialServiceClient {
	return &innerTrialServiceClient{cc}
}

func (c *innerTrialServiceClient) UpdateTrialInfo(ctx context.Context, in *UpdateTrialInfoRequest, opts ...grpc.CallOption) (*TrialInfo, error) {
	out := new(TrialInfo)
	err := c.cc.Invoke(ctx, "/company.InnerTrialService/UpdateTrialInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InnerTrialServiceServer is the server API for InnerTrialService service.
// All implementations must embed UnimplementedInnerTrialServiceServer
// for forward compatibility
type InnerTrialServiceServer interface {
	// 内部调用，Job服务调用，触发用量统计
	UpdateTrialInfo(context.Context, *UpdateTrialInfoRequest) (*TrialInfo, error)
	mustEmbedUnimplementedInnerTrialServiceServer()
}

// UnimplementedInnerTrialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInnerTrialServiceServer struct {
}

func (UnimplementedInnerTrialServiceServer) UpdateTrialInfo(context.Context, *UpdateTrialInfoRequest) (*TrialInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrialInfo not implemented")
}
func (UnimplementedInnerTrialServiceServer) mustEmbedUnimplementedInnerTrialServiceServer() {}

// UnsafeInnerTrialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InnerTrialServiceServer will
// result in compilation errors.
type UnsafeInnerTrialServiceServer interface {
	mustEmbedUnimplementedInnerTrialServiceServer()
}

func RegisterInnerTrialServiceServer(s grpc.ServiceRegistrar, srv InnerTrialServiceServer) {
	s.RegisterService(&InnerTrialService_ServiceDesc, srv)
}

func _InnerTrialService_UpdateTrialInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTrialInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InnerTrialServiceServer).UpdateTrialInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/company.InnerTrialService/UpdateTrialInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InnerTrialServiceServer).UpdateTrialInfo(ctx, req.(*UpdateTrialInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InnerTrialService_ServiceDesc is the grpc.ServiceDesc for InnerTrialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InnerTrialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.InnerTrialService",
	HandlerType: (*InnerTrialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateTrialInfo",
			Handler:    _InnerTrialService_UpdateTrialInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/platform/company/apply.proto",
}
