// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protos/platform/company/project.proto

package company

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Project) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for CompanyId

	// no validation rules for UserId

	// no validation rules for Status

	// no validation rules for Name

	// no validation rules for Remark

	// no validation rules for IsDefault

	// no validation rules for ModifyUid

	if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreateUid

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccountId

	// no validation rules for ProductId

	// no validation rules for ProjectIcon

	// no validation rules for BoxDomain

	// no validation rules for ConsumeLimitAmount

	// no validation rules for AllowSubmitJobOverLimit

	// no validation rules for ConsumeLimitEnabled

	// no validation rules for OwnerUid

	// no validation rules for StorageQuota

	return nil
}

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on ProjectUser with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProjectUser) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for RealName

	// no validation rules for Phone

	// no validation rules for Email

	if v, ok := interface{}(m.GetJoinTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectUserValidationError{
				field:  "JoinTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserName

	// no validation rules for DisplayUserName

	return nil
}

// ProjectUserValidationError is the validation error returned by
// ProjectUser.Validate if the designated constraints aren't met.
type ProjectUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectUserValidationError) ErrorName() string { return "ProjectUserValidationError" }

// Error satisfies the builtin error interface
func (e ProjectUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectUserValidationError{}

// Validate checks the field values on GetUserProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserProjectListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProjectListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	return nil
}

// GetUserProjectListRequestValidationError is the validation error returned by
// GetUserProjectListRequest.Validate if the designated constraints aren't met.
type GetUserProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProjectListRequestValidationError) ErrorName() string {
	return "GetUserProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProjectListRequestValidationError{}

// Validate checks the field values on GetUserProjectListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserProjectListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserProjectListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserProjectListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserProjectListResponseValidationError is the validation error returned
// by GetUserProjectListResponse.Validate if the designated constraints aren't met.
type GetUserProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserProjectListResponseValidationError) ErrorName() string {
	return "GetUserProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserProjectListResponseValidationError{}

// Validate checks the field values on GetCompanyProjectListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyProjectListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyProjectListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	return nil
}

// GetCompanyProjectListRequestValidationError is the validation error returned
// by GetCompanyProjectListRequest.Validate if the designated constraints
// aren't met.
type GetCompanyProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyProjectListRequestValidationError) ErrorName() string {
	return "GetCompanyProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyProjectListRequestValidationError{}

// Validate checks the field values on GetCompanyProjectListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCompanyProjectListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCompanyProjectListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCompanyProjectListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCompanyProjectListResponseValidationError is the validation error
// returned by GetCompanyProjectListResponse.Validate if the designated
// constraints aren't met.
type GetCompanyProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCompanyProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCompanyProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCompanyProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCompanyProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCompanyProjectListResponseValidationError) ErrorName() string {
	return "GetCompanyProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCompanyProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCompanyProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCompanyProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCompanyProjectListResponseValidationError{}

// Validate checks the field values on GetProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for ProductId

	return nil
}

// GetProjectRequestValidationError is the validation error returned by
// GetProjectRequest.Validate if the designated constraints aren't met.
type GetProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectRequestValidationError) ErrorName() string {
	return "GetProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectRequestValidationError{}

// Validate checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProjectResponseValidationError is the validation error returned by
// GetProjectResponse.Validate if the designated constraints aren't met.
type GetProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResponseValidationError) ErrorName() string {
	return "GetProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResponseValidationError{}

// Validate checks the field values on CheckUserAccessRightOnProjectRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CheckUserAccessRightOnProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ProjectId

	return nil
}

// CheckUserAccessRightOnProjectRequestValidationError is the validation error
// returned by CheckUserAccessRightOnProjectRequest.Validate if the designated
// constraints aren't met.
type CheckUserAccessRightOnProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserAccessRightOnProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserAccessRightOnProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserAccessRightOnProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserAccessRightOnProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserAccessRightOnProjectRequestValidationError) ErrorName() string {
	return "CheckUserAccessRightOnProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserAccessRightOnProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserAccessRightOnProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserAccessRightOnProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserAccessRightOnProjectRequestValidationError{}

// Validate checks the field values on CheckUserAccessRightOnProjectResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *CheckUserAccessRightOnProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Result

	return nil
}

// CheckUserAccessRightOnProjectResponseValidationError is the validation error
// returned by CheckUserAccessRightOnProjectResponse.Validate if the
// designated constraints aren't met.
type CheckUserAccessRightOnProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckUserAccessRightOnProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckUserAccessRightOnProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckUserAccessRightOnProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckUserAccessRightOnProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckUserAccessRightOnProjectResponseValidationError) ErrorName() string {
	return "CheckUserAccessRightOnProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckUserAccessRightOnProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckUserAccessRightOnProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckUserAccessRightOnProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckUserAccessRightOnProjectResponseValidationError{}

// Validate checks the field values on GetProjectUserListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectUserListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for CompanyId

	// no validation rules for Key

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectUserListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	return nil
}

// GetProjectUserListRequestValidationError is the validation error returned by
// GetProjectUserListRequest.Validate if the designated constraints aren't met.
type GetProjectUserListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectUserListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectUserListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectUserListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectUserListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectUserListRequestValidationError) ErrorName() string {
	return "GetProjectUserListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectUserListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectUserListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectUserListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectUserListRequestValidationError{}

// Validate checks the field values on GetProjectUserListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectUserListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProjectUserListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectUserListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProjectUserListResponseValidationError is the validation error returned
// by GetProjectUserListResponse.Validate if the designated constraints aren't met.
type GetProjectUserListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectUserListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectUserListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectUserListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectUserListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectUserListResponseValidationError) ErrorName() string {
	return "GetProjectUserListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectUserListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectUserListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectUserListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectUserListResponseValidationError{}

// Validate checks the field values on ModifyProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ModifyProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for Remark

	// no validation rules for ProjectIcon

	// no validation rules for OpUserId

	// no validation rules for Name

	// no validation rules for ProjectType

	// no validation rules for ProductId

	// no validation rules for ConsumeLimitAmount

	// no validation rules for AllowSubmitJobOverLimit

	// no validation rules for ConsumeLimitEnabled

	// no validation rules for OwnerUid

	// no validation rules for StorageQuota

	// no validation rules for BoxDomain

	return nil
}

// ModifyProjectRequestValidationError is the validation error returned by
// ModifyProjectRequest.Validate if the designated constraints aren't met.
type ModifyProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyProjectRequestValidationError) ErrorName() string {
	return "ModifyProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyProjectRequestValidationError{}

// Validate checks the field values on ModifyProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ModifyProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// ModifyProjectResponseValidationError is the validation error returned by
// ModifyProjectResponse.Validate if the designated constraints aren't met.
type ModifyProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifyProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifyProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifyProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifyProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifyProjectResponseValidationError) ErrorName() string {
	return "ModifyProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ModifyProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifyProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifyProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifyProjectResponseValidationError{}

// Validate checks the field values on GetTotalNumberOfUserInProjectRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetTotalNumberOfUserInProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	return nil
}

// GetTotalNumberOfUserInProjectRequestValidationError is the validation error
// returned by GetTotalNumberOfUserInProjectRequest.Validate if the designated
// constraints aren't met.
type GetTotalNumberOfUserInProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalNumberOfUserInProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalNumberOfUserInProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalNumberOfUserInProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalNumberOfUserInProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalNumberOfUserInProjectRequestValidationError) ErrorName() string {
	return "GetTotalNumberOfUserInProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalNumberOfUserInProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalNumberOfUserInProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalNumberOfUserInProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalNumberOfUserInProjectRequestValidationError{}

// Validate checks the field values on GetTotalNumberOfUserInProjectResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetTotalNumberOfUserInProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Total

	return nil
}

// GetTotalNumberOfUserInProjectResponseValidationError is the validation error
// returned by GetTotalNumberOfUserInProjectResponse.Validate if the
// designated constraints aren't met.
type GetTotalNumberOfUserInProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTotalNumberOfUserInProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTotalNumberOfUserInProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTotalNumberOfUserInProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTotalNumberOfUserInProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTotalNumberOfUserInProjectResponseValidationError) ErrorName() string {
	return "GetTotalNumberOfUserInProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTotalNumberOfUserInProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTotalNumberOfUserInProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTotalNumberOfUserInProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTotalNumberOfUserInProjectResponseValidationError{}

// Validate checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for Remark

	// no validation rules for ProjectIcon

	// no validation rules for Name

	// no validation rules for OpUserId

	// no validation rules for AccountId

	// no validation rules for ProjectType

	// no validation rules for ProductId

	// no validation rules for ConsumeLimitAmount

	// no validation rules for AllowSubmitJobOverLimit

	// no validation rules for ConsumeLimitEnabled

	return nil
}

// CreateProjectRequestValidationError is the validation error returned by
// CreateProjectRequest.Validate if the designated constraints aren't met.
type CreateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectRequestValidationError) ErrorName() string {
	return "CreateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectRequestValidationError{}

// Validate checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateProjectResponseValidationError is the validation error returned by
// CreateProjectResponse.Validate if the designated constraints aren't met.
type CreateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResponseValidationError) ErrorName() string {
	return "CreateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResponseValidationError{}

// Validate checks the field values on DelUserFromProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DelUserFromProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for CompanyId

	// no validation rules for OpUserId

	// no validation rules for ProductId

	return nil
}

// DelUserFromProjectRequestValidationError is the validation error returned by
// DelUserFromProjectRequest.Validate if the designated constraints aren't met.
type DelUserFromProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserFromProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserFromProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserFromProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserFromProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserFromProjectRequestValidationError) ErrorName() string {
	return "DelUserFromProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DelUserFromProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserFromProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserFromProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserFromProjectRequestValidationError{}

// Validate checks the field values on DelUserFromProjectResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DelUserFromProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for DeletedNum

	return nil
}

// DelUserFromProjectResponseValidationError is the validation error returned
// by DelUserFromProjectResponse.Validate if the designated constraints aren't met.
type DelUserFromProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelUserFromProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelUserFromProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelUserFromProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelUserFromProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelUserFromProjectResponseValidationError) ErrorName() string {
	return "DelUserFromProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DelUserFromProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelUserFromProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelUserFromProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelUserFromProjectResponseValidationError{}

// Validate checks the field values on AddUserToProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserToProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for CompanyId

	// no validation rules for OpUserId

	// no validation rules for ProductId

	return nil
}

// AddUserToProjectRequestValidationError is the validation error returned by
// AddUserToProjectRequest.Validate if the designated constraints aren't met.
type AddUserToProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserToProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserToProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserToProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserToProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserToProjectRequestValidationError) ErrorName() string {
	return "AddUserToProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserToProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserToProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserToProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserToProjectRequestValidationError{}

// Validate checks the field values on AddUserToProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserToProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AddedNum

	return nil
}

// AddUserToProjectResponseValidationError is the validation error returned by
// AddUserToProjectResponse.Validate if the designated constraints aren't met.
type AddUserToProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserToProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserToProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserToProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserToProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserToProjectResponseValidationError) ErrorName() string {
	return "AddUserToProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserToProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserToProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserToProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserToProjectResponseValidationError{}

// Validate checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for CompanyId

	// no validation rules for UserId

	// no validation rules for OpUserId

	// no validation rules for ProjectType

	// no validation rules for ProductId

	return nil
}

// DeleteProjectRequestValidationError is the validation error returned by
// DeleteProjectRequest.Validate if the designated constraints aren't met.
type DeleteProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectRequestValidationError) ErrorName() string {
	return "DeleteProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectRequestValidationError{}

// Validate checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	// no validation rules for IsRunJob

	// no validation rules for IsOpenApp

	return nil
}

// DeleteProjectResponseValidationError is the validation error returned by
// DeleteProjectResponse.Validate if the designated constraints aren't met.
type DeleteProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResponseValidationError) ErrorName() string {
	return "DeleteProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResponseValidationError{}

// Validate checks the field values on GetUserJoinCompanyProjectListRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetUserJoinCompanyProjectListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for CompanyId

	// no validation rules for Status

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserJoinCompanyProjectListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	return nil
}

// GetUserJoinCompanyProjectListRequestValidationError is the validation error
// returned by GetUserJoinCompanyProjectListRequest.Validate if the designated
// constraints aren't met.
type GetUserJoinCompanyProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserJoinCompanyProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserJoinCompanyProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserJoinCompanyProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserJoinCompanyProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserJoinCompanyProjectListRequestValidationError) ErrorName() string {
	return "GetUserJoinCompanyProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserJoinCompanyProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserJoinCompanyProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserJoinCompanyProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserJoinCompanyProjectListRequestValidationError{}

// Validate checks the field values on GetUserJoinCompanyProjectListResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetUserJoinCompanyProjectListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserJoinCompanyProjectListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserJoinCompanyProjectListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserJoinCompanyProjectListResponseValidationError is the validation error
// returned by GetUserJoinCompanyProjectListResponse.Validate if the
// designated constraints aren't met.
type GetUserJoinCompanyProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserJoinCompanyProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserJoinCompanyProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserJoinCompanyProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserJoinCompanyProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserJoinCompanyProjectListResponseValidationError) ErrorName() string {
	return "GetUserJoinCompanyProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserJoinCompanyProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserJoinCompanyProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserJoinCompanyProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserJoinCompanyProjectListResponseValidationError{}

// Validate checks the field values on GetProjectListByBoxRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectListByBoxRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectListByBoxRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProjectListByBoxRequestValidationError is the validation error returned
// by GetProjectListByBoxRequest.Validate if the designated constraints aren't met.
type GetProjectListByBoxRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectListByBoxRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectListByBoxRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectListByBoxRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectListByBoxRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectListByBoxRequestValidationError) ErrorName() string {
	return "GetProjectListByBoxRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectListByBoxRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectListByBoxRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectListByBoxRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectListByBoxRequestValidationError{}

// Validate checks the field values on GetProjectListByBoxResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectListByBoxResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProjectListByBoxResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectListByBoxResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProjectListByBoxResponseValidationError is the validation error returned
// by GetProjectListByBoxResponse.Validate if the designated constraints
// aren't met.
type GetProjectListByBoxResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectListByBoxResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectListByBoxResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectListByBoxResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectListByBoxResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectListByBoxResponseValidationError) ErrorName() string {
	return "GetProjectListByBoxResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectListByBoxResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectListByBoxResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectListByBoxResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectListByBoxResponseValidationError{}

// Validate checks the field values on ProjectLiteInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ProjectLiteInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CompanyId

	// no validation rules for CreateUid

	if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectLiteInfoValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OwnerUid

	return nil
}

// ProjectLiteInfoValidationError is the validation error returned by
// ProjectLiteInfo.Validate if the designated constraints aren't met.
type ProjectLiteInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectLiteInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectLiteInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectLiteInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectLiteInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectLiteInfoValidationError) ErrorName() string { return "ProjectLiteInfoValidationError" }

// Error satisfies the builtin error interface
func (e ProjectLiteInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectLiteInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectLiteInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectLiteInfoValidationError{}

// Validate checks the field values on GetProjectListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectListRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CompanyId

	// no validation rules for Key

	if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ProductId

	return nil
}

// GetProjectListRequestValidationError is the validation error returned by
// GetProjectListRequest.Validate if the designated constraints aren't met.
type GetProjectListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectListRequestValidationError) ErrorName() string {
	return "GetProjectListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectListRequestValidationError{}

// Validate checks the field values on GetProjectListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectListResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetProjectListResponseValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPageCtx()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectListResponseValidationError{
				field:  "PageCtx",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProjectListResponseValidationError is the validation error returned by
// GetProjectListResponse.Validate if the designated constraints aren't met.
type GetProjectListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectListResponseValidationError) ErrorName() string {
	return "GetProjectListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectListResponseValidationError{}
