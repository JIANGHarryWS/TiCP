// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yuansuan/ticp/iPaaS/project-root/internal/job/dao (interfaces: JobDao,ResidualDao)

// Package dao is a generated GoMock package.
package dao

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	snowflake "github.com/yuansuan/ticp/common/go-kit/gin-boot/util/snowflake"
	joblistfiltered "github.com/yuansuan/ticp/common/project-root-api/job/v1/admin/joblistfiltered"
	models "github.com/yuansuan/ticp/iPaaS/project-root/internal/job/dao/models"
	xorm "xorm.io/xorm"
)

// MockJobDao is a mock of JobDao interface.
type MockJobDao struct {
	ctrl     *gomock.Controller
	recorder *MockJobDaoMockRecorder
}

// MockJobDaoMockRecorder is the mock recorder for MockJobDao.
type MockJobDaoMockRecorder struct {
	mock *MockJobDao
}

// NewMockJobDao creates a new mock instance.
func NewMockJobDao(ctrl *gomock.Controller) *MockJobDao {
	mock := &MockJobDao{ctrl: ctrl}
	mock.recorder = &MockJobDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobDao) EXPECT() *MockJobDaoMockRecorder {
	return m.recorder
}

// BatchGet mocks base method.
func (m *MockJobDao) BatchGet(arg0 context.Context, arg1 []snowflake.ID, arg2 snowflake.ID, arg3, arg4 bool) ([]*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGet", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockJobDaoMockRecorder) BatchGet(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockJobDao)(nil).BatchGet), arg0, arg1, arg2, arg3, arg4)
}

// Engine mocks base method.
func (m *MockJobDao) Engine() *xorm.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Engine")
	ret0, _ := ret[0].(*xorm.Engine)
	return ret0
}

// Engine indicates an expected call of Engine.
func (mr *MockJobDaoMockRecorder) Engine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Engine", reflect.TypeOf((*MockJobDao)(nil).Engine))
}

// Get mocks base method.
func (m *MockJobDao) Get(arg0 context.Context, arg1 snowflake.ID, arg2, arg3 bool) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockJobDaoMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockJobDao)(nil).Get), arg0, arg1, arg2, arg3)
}

// GetBill mocks base method.
func (m *MockJobDao) GetBill(arg0 context.Context, arg1 snowflake.ID) (*models.Bill, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBill", arg0, arg1)
	ret0, _ := ret[0].(*models.Bill)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBill indicates an expected call of GetBill.
func (mr *MockJobDaoMockRecorder) GetBill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBill", reflect.TypeOf((*MockJobDao)(nil).GetBill), arg0, arg1)
}

// GetJobMonitorChart mocks base method.
func (m *MockJobDao) GetJobMonitorChart(arg0 context.Context, arg1 snowflake.ID, arg2 bool) (*models.MonitorChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobMonitorChart", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.MonitorChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobMonitorChart indicates an expected call of GetJobMonitorChart.
func (mr *MockJobDaoMockRecorder) GetJobMonitorChart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobMonitorChart", reflect.TypeOf((*MockJobDao)(nil).GetJobMonitorChart), arg0, arg1, arg2)
}

// GetPreSchedule mocks base method.
func (m *MockJobDao) GetPreSchedule(arg0 context.Context, arg1 snowflake.ID) (*models.PreSchedule, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreSchedule", arg0, arg1)
	ret0, _ := ret[0].(*models.PreSchedule)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPreSchedule indicates an expected call of GetPreSchedule.
func (mr *MockJobDaoMockRecorder) GetPreSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreSchedule", reflect.TypeOf((*MockJobDao)(nil).GetPreSchedule), arg0, arg1)
}

// GetUnfinishedbMonitorChart mocks base method.
func (m *MockJobDao) GetUnfinishedbMonitorChart(arg0 context.Context) ([]*models.MonitorChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfinishedbMonitorChart", arg0)
	ret0, _ := ret[0].([]*models.MonitorChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfinishedbMonitorChart indicates an expected call of GetUnfinishedbMonitorChart.
func (mr *MockJobDaoMockRecorder) GetUnfinishedbMonitorChart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfinishedbMonitorChart", reflect.TypeOf((*MockJobDao)(nil).GetUnfinishedbMonitorChart), arg0)
}

// InsertBill mocks base method.
func (m *MockJobDao) InsertBill(arg0 context.Context, arg1 *models.Bill) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBill", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBill indicates an expected call of InsertBill.
func (mr *MockJobDaoMockRecorder) InsertBill(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBill", reflect.TypeOf((*MockJobDao)(nil).InsertBill), arg0, arg1)
}

// ListInputHpcFinalSyncingJobs mocks base method.
func (m *MockJobDao) ListInputHpcFinalSyncingJobs(arg0 context.Context) (int64, []*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInputHpcFinalSyncingJobs", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*models.Job)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInputHpcFinalSyncingJobs indicates an expected call of ListInputHpcFinalSyncingJobs.
func (mr *MockJobDaoMockRecorder) ListInputHpcFinalSyncingJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInputHpcFinalSyncingJobs", reflect.TypeOf((*MockJobDao)(nil).ListInputHpcFinalSyncingJobs), arg0)
}

// ListJobs mocks base method.
func (m *MockJobDao) ListJobs(arg0 context.Context, arg1, arg2 int, arg3, arg4 snowflake.ID, arg5, arg6 string, arg7, arg8 bool) (int64, []*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobs", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*models.Job)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListJobs indicates an expected call of ListJobs.
func (mr *MockJobDaoMockRecorder) ListJobs(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobs", reflect.TypeOf((*MockJobDao)(nil).ListJobs), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
}

// ListJobsBySubStates mocks base method.
func (m *MockJobDao) ListJobsBySubStates(arg0 context.Context, arg1 ...int) (int64, []*models.Job, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListJobsBySubStates", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*models.Job)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListJobsBySubStates indicates an expected call of ListJobsBySubStates.
func (mr *MockJobDaoMockRecorder) ListJobsBySubStates(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsBySubStates", reflect.TypeOf((*MockJobDao)(nil).ListJobsBySubStates), varargs...)
}

// ListJobsFiltered mocks base method.
func (m *MockJobDao) ListJobsFiltered(arg0 context.Context, arg1, arg2 int, arg3 *joblistfiltered.Request, arg4, arg5 snowflake.ID) (int64, []*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsFiltered", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*models.Job)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListJobsFiltered indicates an expected call of ListJobsFiltered.
func (mr *MockJobDaoMockRecorder) ListJobsFiltered(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsFiltered", reflect.TypeOf((*MockJobDao)(nil).ListJobsFiltered), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListNeedFileSyncJobs mocks base method.
func (m *MockJobDao) ListNeedFileSyncJobs(arg0 context.Context, arg1 string, arg2, arg3 int64) ([]*models.Job, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNeedFileSyncJobs", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNeedFileSyncJobs indicates an expected call of ListNeedFileSyncJobs.
func (mr *MockJobDaoMockRecorder) ListNeedFileSyncJobs(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNeedFileSyncJobs", reflect.TypeOf((*MockJobDao)(nil).ListNeedFileSyncJobs), arg0, arg1, arg2, arg3)
}

// ListSchedulerTransferJobs mocks base method.
func (m *MockJobDao) ListSchedulerTransferJobs(arg0 context.Context) (int64, []*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSchedulerTransferJobs", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*models.Job)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListSchedulerTransferJobs indicates an expected call of ListSchedulerTransferJobs.
func (mr *MockJobDaoMockRecorder) ListSchedulerTransferJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSchedulerTransferJobs", reflect.TypeOf((*MockJobDao)(nil).ListSchedulerTransferJobs), arg0)
}

// ListShouldPostPaidJobs mocks base method.
func (m *MockJobDao) ListShouldPostPaidJobs(arg0 context.Context) ([]*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShouldPostPaidJobs", arg0)
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShouldPostPaidJobs indicates an expected call of ListShouldPostPaidJobs.
func (mr *MockJobDaoMockRecorder) ListShouldPostPaidJobs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShouldPostPaidJobs", reflect.TypeOf((*MockJobDao)(nil).ListShouldPostPaidJobs), arg0)
}

// MarkJobPaidFinished mocks base method.
func (m *MockJobDao) MarkJobPaidFinished(arg0 context.Context, arg1 snowflake.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkJobPaidFinished", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkJobPaidFinished indicates an expected call of MarkJobPaidFinished.
func (mr *MockJobDaoMockRecorder) MarkJobPaidFinished(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkJobPaidFinished", reflect.TypeOf((*MockJobDao)(nil).MarkJobPaidFinished), arg0, arg1)
}

// Transaction mocks base method.
func (m *MockJobDao) Transaction(arg0 context.Context, arg1 func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockJobDaoMockRecorder) Transaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockJobDao)(nil).Transaction), arg0, arg1)
}

// UpdateBilledDurationAndBillTimeByJobId mocks base method.
func (m *MockJobDao) UpdateBilledDurationAndBillTimeByJobId(arg0 context.Context, arg1 snowflake.ID, arg2 int64, arg3 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBilledDurationAndBillTimeByJobId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBilledDurationAndBillTimeByJobId indicates an expected call of UpdateBilledDurationAndBillTimeByJobId.
func (mr *MockJobDaoMockRecorder) UpdateBilledDurationAndBillTimeByJobId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBilledDurationAndBillTimeByJobId", reflect.TypeOf((*MockJobDao)(nil).UpdateBilledDurationAndBillTimeByJobId), arg0, arg1, arg2, arg3)
}

// UpdateSchedulingReason mocks base method.
func (m *MockJobDao) UpdateSchedulingReason(arg0 context.Context, arg1 *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchedulingReason", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchedulingReason indicates an expected call of UpdateSchedulingReason.
func (mr *MockJobDaoMockRecorder) UpdateSchedulingReason(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchedulingReason", reflect.TypeOf((*MockJobDao)(nil).UpdateSchedulingReason), arg0, arg1)
}

// UpdateSubmitJob mocks base method.
func (m *MockJobDao) UpdateSubmitJob(arg0 context.Context, arg1 *models.Job) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubmitJob", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubmitJob indicates an expected call of UpdateSubmitJob.
func (mr *MockJobDaoMockRecorder) UpdateSubmitJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubmitJob", reflect.TypeOf((*MockJobDao)(nil).UpdateSubmitJob), arg0, arg1)
}

// MockResidualDao is a mock of ResidualDao interface.
type MockResidualDao struct {
	ctrl     *gomock.Controller
	recorder *MockResidualDaoMockRecorder
}

// MockResidualDaoMockRecorder is the mock recorder for MockResidualDao.
type MockResidualDaoMockRecorder struct {
	mock *MockResidualDao
}

// NewMockResidualDao creates a new mock instance.
func NewMockResidualDao(ctrl *gomock.Controller) *MockResidualDao {
	mock := &MockResidualDao{ctrl: ctrl}
	mock.recorder = &MockResidualDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResidualDao) EXPECT() *MockResidualDaoMockRecorder {
	return m.recorder
}

// GetJobResidual mocks base method.
func (m *MockResidualDao) GetJobResidual(arg0 context.Context, arg1 snowflake.ID) (*models.Residual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobResidual", arg0, arg1)
	ret0, _ := ret[0].(*models.Residual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobResidual indicates an expected call of GetJobResidual.
func (mr *MockResidualDaoMockRecorder) GetJobResidual(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobResidual", reflect.TypeOf((*MockResidualDao)(nil).GetJobResidual), arg0, arg1)
}

// GetUnfinishedResidual mocks base method.
func (m *MockResidualDao) GetUnfinishedResidual(arg0 context.Context) ([]*models.Residual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnfinishedResidual", arg0)
	ret0, _ := ret[0].([]*models.Residual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnfinishedResidual indicates an expected call of GetUnfinishedResidual.
func (mr *MockResidualDaoMockRecorder) GetUnfinishedResidual(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnfinishedResidual", reflect.TypeOf((*MockResidualDao)(nil).GetUnfinishedResidual), arg0)
}

// InsertResidual mocks base method.
func (m *MockResidualDao) InsertResidual(arg0 context.Context, arg1 *models.Residual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertResidual", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertResidual indicates an expected call of InsertResidual.
func (mr *MockResidualDaoMockRecorder) InsertResidual(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertResidual", reflect.TypeOf((*MockResidualDao)(nil).InsertResidual), arg0, arg1)
}

// UpdateResidual mocks base method.
func (m *MockResidualDao) UpdateResidual(arg0 context.Context, arg1 *models.Residual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateResidual", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateResidual indicates an expected call of UpdateResidual.
func (mr *MockResidualDaoMockRecorder) UpdateResidual(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateResidual", reflect.TypeOf((*MockResidualDao)(nil).UpdateResidual), arg0, arg1)
}
