// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yuansuan/ticp/iPaaS/project-root/internal/job/dao/store (interfaces: Factory,Quota,Allow,FactoryNew,ApplicationStore,ApplicationQuotaStore,ApplicationAllowStore)

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	snowflake "github.com/yuansuan/ticp/common/go-kit/gin-boot/util/snowflake"
	consts "github.com/yuansuan/ticp/iPaaS/project-root/internal/job/consts"
	dao "github.com/yuansuan/ticp/iPaaS/project-root/internal/job/dao"
	models "github.com/yuansuan/ticp/iPaaS/project-root/internal/job/dao/models"
	xorm "xorm.io/xorm"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Applications mocks base method.
func (m *MockFactory) Applications() dao.ApplicationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Applications")
	ret0, _ := ret[0].(dao.ApplicationDao)
	return ret0
}

// Applications indicates an expected call of Applications.
func (mr *MockFactoryMockRecorder) Applications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Applications", reflect.TypeOf((*MockFactory)(nil).Applications))
}

// MockQuota is a mock of Quota interface.
type MockQuota struct {
	ctrl     *gomock.Controller
	recorder *MockQuotaMockRecorder
}

// MockQuotaMockRecorder is the mock recorder for MockQuota.
type MockQuotaMockRecorder struct {
	mock *MockQuota
}

// NewMockQuota creates a new mock instance.
func NewMockQuota(ctrl *gomock.Controller) *MockQuota {
	mock := &MockQuota{ctrl: ctrl}
	mock.recorder = &MockQuotaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuota) EXPECT() *MockQuotaMockRecorder {
	return m.recorder
}

// ApplicationQuota mocks base method.
func (m *MockQuota) ApplicationQuota() dao.ApplicationQuotaDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationQuota")
	ret0, _ := ret[0].(dao.ApplicationQuotaDao)
	return ret0
}

// ApplicationQuota indicates an expected call of ApplicationQuota.
func (mr *MockQuotaMockRecorder) ApplicationQuota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationQuota", reflect.TypeOf((*MockQuota)(nil).ApplicationQuota))
}

// MockAllow is a mock of Allow interface.
type MockAllow struct {
	ctrl     *gomock.Controller
	recorder *MockAllowMockRecorder
}

// MockAllowMockRecorder is the mock recorder for MockAllow.
type MockAllowMockRecorder struct {
	mock *MockAllow
}

// NewMockAllow creates a new mock instance.
func NewMockAllow(ctrl *gomock.Controller) *MockAllow {
	mock := &MockAllow{ctrl: ctrl}
	mock.recorder = &MockAllowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllow) EXPECT() *MockAllowMockRecorder {
	return m.recorder
}

// ApplicationAllow mocks base method.
func (m *MockAllow) ApplicationAllow() dao.ApplicationAllowDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationAllow")
	ret0, _ := ret[0].(dao.ApplicationAllowDao)
	return ret0
}

// ApplicationAllow indicates an expected call of ApplicationAllow.
func (mr *MockAllowMockRecorder) ApplicationAllow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationAllow", reflect.TypeOf((*MockAllow)(nil).ApplicationAllow))
}

// MockFactoryNew is a mock of FactoryNew interface.
type MockFactoryNew struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryNewMockRecorder
}

// MockFactoryNewMockRecorder is the mock recorder for MockFactoryNew.
type MockFactoryNewMockRecorder struct {
	mock *MockFactoryNew
}

// NewMockFactoryNew creates a new mock instance.
func NewMockFactoryNew(ctrl *gomock.Controller) *MockFactoryNew {
	mock := &MockFactoryNew{ctrl: ctrl}
	mock.recorder = &MockFactoryNewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactoryNew) EXPECT() *MockFactoryNewMockRecorder {
	return m.recorder
}

// ApplicationAllow mocks base method.
func (m *MockFactoryNew) ApplicationAllow() dao.ApplicationAllowDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationAllow")
	ret0, _ := ret[0].(dao.ApplicationAllowDao)
	return ret0
}

// ApplicationAllow indicates an expected call of ApplicationAllow.
func (mr *MockFactoryNewMockRecorder) ApplicationAllow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationAllow", reflect.TypeOf((*MockFactoryNew)(nil).ApplicationAllow))
}

// ApplicationQuota mocks base method.
func (m *MockFactoryNew) ApplicationQuota() dao.ApplicationQuotaDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationQuota")
	ret0, _ := ret[0].(dao.ApplicationQuotaDao)
	return ret0
}

// ApplicationQuota indicates an expected call of ApplicationQuota.
func (mr *MockFactoryNewMockRecorder) ApplicationQuota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationQuota", reflect.TypeOf((*MockFactoryNew)(nil).ApplicationQuota))
}

// Applications mocks base method.
func (m *MockFactoryNew) Applications() dao.ApplicationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Applications")
	ret0, _ := ret[0].(dao.ApplicationDao)
	return ret0
}

// Applications indicates an expected call of Applications.
func (mr *MockFactoryNewMockRecorder) Applications() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Applications", reflect.TypeOf((*MockFactoryNew)(nil).Applications))
}

// Engine mocks base method.
func (m *MockFactoryNew) Engine() *xorm.Engine {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Engine")
	ret0, _ := ret[0].(*xorm.Engine)
	return ret0
}

// Engine indicates an expected call of Engine.
func (mr *MockFactoryNewMockRecorder) Engine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Engine", reflect.TypeOf((*MockFactoryNew)(nil).Engine))
}

// MockApplicationStore is a mock of ApplicationStore interface.
type MockApplicationStore struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationStoreMockRecorder
}

// MockApplicationStoreMockRecorder is the mock recorder for MockApplicationStore.
type MockApplicationStoreMockRecorder struct {
	mock *MockApplicationStore
}

// NewMockApplicationStore creates a new mock instance.
func NewMockApplicationStore(ctrl *gomock.Controller) *MockApplicationStore {
	mock := &MockApplicationStore{ctrl: ctrl}
	mock.recorder = &MockApplicationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationStore) EXPECT() *MockApplicationStoreMockRecorder {
	return m.recorder
}

// AddApp mocks base method.
func (m *MockApplicationStore) AddApp(arg0 context.Context, arg1 *models.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddApp indicates an expected call of AddApp.
func (mr *MockApplicationStoreMockRecorder) AddApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApp", reflect.TypeOf((*MockApplicationStore)(nil).AddApp), arg0, arg1)
}

// GetApp mocks base method.
func (m *MockApplicationStore) GetApp(arg0 context.Context, arg1 snowflake.ID) (*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0, arg1)
	ret0, _ := ret[0].(*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockApplicationStoreMockRecorder) GetApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockApplicationStore)(nil).GetApp), arg0, arg1)
}

// ListApps mocks base method.
func (m *MockApplicationStore) ListApps(arg0 context.Context, arg1 snowflake.ID, arg2 consts.PublishStatus) ([]*models.Application, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Application)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApps indicates an expected call of ListApps.
func (mr *MockApplicationStoreMockRecorder) ListApps(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockApplicationStore)(nil).ListApps), arg0, arg1, arg2)
}

// UpdateApp mocks base method.
func (m *MockApplicationStore) UpdateApp(arg0 context.Context, arg1 *models.Application) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockApplicationStoreMockRecorder) UpdateApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockApplicationStore)(nil).UpdateApp), arg0, arg1)
}

// MockApplicationQuotaStore is a mock of ApplicationQuotaStore interface.
type MockApplicationQuotaStore struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationQuotaStoreMockRecorder
}

// MockApplicationQuotaStoreMockRecorder is the mock recorder for MockApplicationQuotaStore.
type MockApplicationQuotaStoreMockRecorder struct {
	mock *MockApplicationQuotaStore
}

// NewMockApplicationQuotaStore creates a new mock instance.
func NewMockApplicationQuotaStore(ctrl *gomock.Controller) *MockApplicationQuotaStore {
	mock := &MockApplicationQuotaStore{ctrl: ctrl}
	mock.recorder = &MockApplicationQuotaStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationQuotaStore) EXPECT() *MockApplicationQuotaStoreMockRecorder {
	return m.recorder
}

// GetByUser mocks base method.
func (m *MockApplicationQuotaStore) GetByUser(arg0 context.Context, arg1 *xorm.Session, arg2, arg3 snowflake.ID, arg4 bool) (*models.ApplicationQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUser", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.ApplicationQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUser indicates an expected call of GetByUser.
func (mr *MockApplicationQuotaStoreMockRecorder) GetByUser(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUser", reflect.TypeOf((*MockApplicationQuotaStore)(nil).GetByUser), arg0, arg1, arg2, arg3, arg4)
}

// MockApplicationAllowStore is a mock of ApplicationAllowStore interface.
type MockApplicationAllowStore struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationAllowStoreMockRecorder
}

// MockApplicationAllowStoreMockRecorder is the mock recorder for MockApplicationAllowStore.
type MockApplicationAllowStoreMockRecorder struct {
	mock *MockApplicationAllowStore
}

// NewMockApplicationAllowStore creates a new mock instance.
func NewMockApplicationAllowStore(ctrl *gomock.Controller) *MockApplicationAllowStore {
	mock := &MockApplicationAllowStore{ctrl: ctrl}
	mock.recorder = &MockApplicationAllowStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationAllowStore) EXPECT() *MockApplicationAllowStoreMockRecorder {
	return m.recorder
}

// GetByAppId mocks base method.
func (m *MockApplicationAllowStore) GetByAppId(arg0 context.Context, arg1 *xorm.Session, arg2 snowflake.ID) (*models.ApplicationAllow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAppId", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.ApplicationAllow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAppId indicates an expected call of GetByAppId.
func (mr *MockApplicationAllowStoreMockRecorder) GetByAppId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAppId", reflect.TypeOf((*MockApplicationAllowStore)(nil).GetByAppId), arg0, arg1, arg2)
}
