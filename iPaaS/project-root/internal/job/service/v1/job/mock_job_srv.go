// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yuansuan/ticp/iPaaS/project-root/internal/job/service/v1/job (interfaces: Service)

// Package job is a generated GoMock package.
package job

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	snowflake "github.com/yuansuan/ticp/common/go-kit/gin-boot/util/snowflake"
	joblistfiltered "github.com/yuansuan/ticp/common/project-root-api/job/v1/admin/joblistfiltered"
	jobretransmit "github.com/yuansuan/ticp/common/project-root-api/job/v1/admin/jobretransmit"
	jobupdate "github.com/yuansuan/ticp/common/project-root-api/job/v1/admin/jobupdate"
	jobcpuusage "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobcpuusage"
	jobcreate "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobcreate"
	jobdelete "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobdelete"
	jobget "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobget"
	joblist "github.com/yuansuan/ticp/common/project-root-api/job/v1/joblist"
	jobmonitorchart "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobmonitorchart"
	jobpreschedule "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobpreschedule"
	jobresidual "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobresidual"
	jobresume "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobresume"
	jobsnapshotget "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobsnapshotget"
	jobsnapshotlist "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobsnapshotlist"
	jobterminate "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobterminate"
	jobtransmitresume "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobtransmitresume"
	jobtransmitsuspend "github.com/yuansuan/ticp/common/project-root-api/job/v1/jobtransmitsuspend"
	jobneedsyncfile "github.com/yuansuan/ticp/common/project-root-api/job/v1/system/jobneedsyncfile"
	jobsyncfilestate "github.com/yuansuan/ticp/common/project-root-api/job/v1/system/jobsyncfilestate"
	v20230530 "github.com/yuansuan/ticp/common/project-root-api/schema/v20230530"
	models "github.com/yuansuan/ticp/iPaaS/project-root/internal/job/dao/models"
	application "github.com/yuansuan/ticp/iPaaS/project-root/internal/job/service/v1/application"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// BatchGet mocks base method.
func (m *MockService) BatchGet(arg0 context.Context, arg1 []string, arg2 snowflake.ID) ([]*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGet", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockServiceMockRecorder) BatchGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockService)(nil).BatchGet), arg0, arg1, arg2)
}

// Create mocks base method.
func (m *MockService) Create(arg0 context.Context, arg1 *jobcreate.Request, arg2 snowflake.ID, arg3 v20230530.ChargeParams, arg4 *models.Application, arg5 *models.PreSchedule, arg6 createConvertFunc) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// Delete mocks base method.
func (m *MockService) Delete(arg0 context.Context, arg1 *jobdelete.Request, arg2 snowflake.ID, arg3 allowFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), arg0, arg1, arg2, arg3)
}

// Get mocks base method.
func (m *MockService) Get(arg0 context.Context, arg1 *jobget.Request, arg2 snowflake.ID, arg3 allowFunc, arg4 bool) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockService)(nil).Get), arg0, arg1, arg2, arg3, arg4)
}

// GetCpuUsage mocks base method.
func (m *MockService) GetCpuUsage(arg0 context.Context, arg1 *jobcpuusage.Request, arg2 snowflake.ID, arg3 allowFunc) (*v20230530.JobCpuUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCpuUsage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v20230530.JobCpuUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCpuUsage indicates an expected call of GetCpuUsage.
func (mr *MockServiceMockRecorder) GetCpuUsage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCpuUsage", reflect.TypeOf((*MockService)(nil).GetCpuUsage), arg0, arg1, arg2, arg3)
}

// GetJobSnapshot mocks base method.
func (m *MockService) GetJobSnapshot(arg0 context.Context, arg1 application.AppSrv, arg2 *jobsnapshotget.Request, arg3 snowflake.ID, arg4 allowFunc) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobSnapshot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobSnapshot indicates an expected call of GetJobSnapshot.
func (mr *MockServiceMockRecorder) GetJobSnapshot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobSnapshot", reflect.TypeOf((*MockService)(nil).GetJobSnapshot), arg0, arg1, arg2, arg3, arg4)
}

// GetMonitorChart mocks base method.
func (m *MockService) GetMonitorChart(arg0 context.Context, arg1 *jobmonitorchart.Request, arg2 snowflake.ID, arg3 allowFunc) (*models.MonitorChart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitorChart", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.MonitorChart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitorChart indicates an expected call of GetMonitorChart.
func (mr *MockServiceMockRecorder) GetMonitorChart(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitorChart", reflect.TypeOf((*MockService)(nil).GetMonitorChart), arg0, arg1, arg2, arg3)
}

// GetPreSchedule mocks base method.
func (m *MockService) GetPreSchedule(arg0 context.Context, arg1 string) (*models.PreSchedule, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreSchedule", arg0, arg1)
	ret0, _ := ret[0].(*models.PreSchedule)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPreSchedule indicates an expected call of GetPreSchedule.
func (mr *MockServiceMockRecorder) GetPreSchedule(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreSchedule", reflect.TypeOf((*MockService)(nil).GetPreSchedule), arg0, arg1)
}

// GetResidual mocks base method.
func (m *MockService) GetResidual(arg0 context.Context, arg1 *jobresidual.Request, arg2 snowflake.ID, arg3 allowFunc) (*v20230530.Residual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResidual", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v20230530.Residual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResidual indicates an expected call of GetResidual.
func (mr *MockServiceMockRecorder) GetResidual(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResidual", reflect.TypeOf((*MockService)(nil).GetResidual), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockService) List(arg0 context.Context, arg1 *joblist.Request, arg2, arg3 snowflake.ID, arg4, arg5 bool) (int64, []*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*models.Job)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockServiceMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListFiltered mocks base method.
func (m *MockService) ListFiltered(arg0 context.Context, arg1 *joblistfiltered.Request, arg2, arg3 snowflake.ID) (int64, []*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFiltered", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*models.Job)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFiltered indicates an expected call of ListFiltered.
func (mr *MockServiceMockRecorder) ListFiltered(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFiltered", reflect.TypeOf((*MockService)(nil).ListFiltered), arg0, arg1, arg2, arg3)
}

// ListJobSnapshot mocks base method.
func (m *MockService) ListJobSnapshot(arg0 context.Context, arg1 application.AppSrv, arg2 *jobsnapshotlist.Request, arg3 snowflake.ID, arg4 allowFunc) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobSnapshot", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobSnapshot indicates an expected call of ListJobSnapshot.
func (mr *MockServiceMockRecorder) ListJobSnapshot(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobSnapshot", reflect.TypeOf((*MockService)(nil).ListJobSnapshot), arg0, arg1, arg2, arg3, arg4)
}

// ListNeedSyncFileJobs mocks base method.
func (m *MockService) ListNeedSyncFileJobs(arg0 context.Context, arg1 *jobneedsyncfile.Request) (*jobneedsyncfile.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNeedSyncFileJobs", arg0, arg1)
	ret0, _ := ret[0].(*jobneedsyncfile.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNeedSyncFileJobs indicates an expected call of ListNeedSyncFileJobs.
func (mr *MockServiceMockRecorder) ListNeedSyncFileJobs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNeedSyncFileJobs", reflect.TypeOf((*MockService)(nil).ListNeedSyncFileJobs), arg0, arg1)
}

// PreSchedule mocks base method.
func (m *MockService) PreSchedule(arg0 context.Context, arg1 *jobpreschedule.Request, arg2 v20230530.Zones, arg3 snowflake.ID, arg4 *models.Application) (jobpreschedule.Data, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreSchedule", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(jobpreschedule.Data)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PreSchedule indicates an expected call of PreSchedule.
func (mr *MockServiceMockRecorder) PreSchedule(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreSchedule", reflect.TypeOf((*MockService)(nil).PreSchedule), arg0, arg1, arg2, arg3, arg4)
}

// Resume mocks base method.
func (m *MockService) Resume(arg0 context.Context, arg1 *jobresume.Request, arg2 snowflake.ID, arg3 allowFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resume", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resume indicates an expected call of Resume.
func (mr *MockServiceMockRecorder) Resume(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockService)(nil).Resume), arg0, arg1, arg2, arg3)
}

// Retransmit mocks base method.
func (m *MockService) Retransmit(arg0 context.Context, arg1 *jobretransmit.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retransmit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Retransmit indicates an expected call of Retransmit.
func (mr *MockServiceMockRecorder) Retransmit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retransmit", reflect.TypeOf((*MockService)(nil).Retransmit), arg0, arg1)
}

// Terminate mocks base method.
func (m *MockService) Terminate(arg0 context.Context, arg1 *jobterminate.Request, arg2 snowflake.ID, arg3 allowFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terminate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Terminate indicates an expected call of Terminate.
func (mr *MockServiceMockRecorder) Terminate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terminate", reflect.TypeOf((*MockService)(nil).Terminate), arg0, arg1, arg2, arg3)
}

// TransmitResume mocks base method.
func (m *MockService) TransmitResume(arg0 context.Context, arg1 *jobtransmitresume.Request, arg2 snowflake.ID, arg3 allowFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransmitResume", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransmitResume indicates an expected call of TransmitResume.
func (mr *MockServiceMockRecorder) TransmitResume(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransmitResume", reflect.TypeOf((*MockService)(nil).TransmitResume), arg0, arg1, arg2, arg3)
}

// TransmitSuspend mocks base method.
func (m *MockService) TransmitSuspend(arg0 context.Context, arg1 *jobtransmitsuspend.Request, arg2 snowflake.ID, arg3 allowFunc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransmitSuspend", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransmitSuspend indicates an expected call of TransmitSuspend.
func (mr *MockServiceMockRecorder) TransmitSuspend(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransmitSuspend", reflect.TypeOf((*MockService)(nil).TransmitSuspend), arg0, arg1, arg2, arg3)
}

// TransmitUpdateState mocks base method.
func (m *MockService) TransmitUpdateState(arg0 context.Context, arg1 *jobupdate.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransmitUpdateState", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransmitUpdateState indicates an expected call of TransmitUpdateState.
func (mr *MockServiceMockRecorder) TransmitUpdateState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransmitUpdateState", reflect.TypeOf((*MockService)(nil).TransmitUpdateState), arg0, arg1)
}

// UpdateSyncFileState mocks base method.
func (m *MockService) UpdateSyncFileState(arg0 context.Context, arg1 *jobsyncfilestate.Request, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSyncFileState", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSyncFileState indicates an expected call of UpdateSyncFileState.
func (mr *MockServiceMockRecorder) UpdateSyncFileState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSyncFileState", reflect.TypeOf((*MockService)(nil).UpdateSyncFileState), arg0, arg1, arg2)
}
