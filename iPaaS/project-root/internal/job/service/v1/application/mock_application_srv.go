// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yuansuan/ticp/iPaaS/project-root/internal/job/service/v1/application (interfaces: Service,AppSrv,AppQuotaSrv,AppAllowSrv,UserGeter)

// Package application is a generated GoMock package.
package application

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	snowflake "github.com/yuansuan/ticp/common/go-kit/gin-boot/util/snowflake"
	add "github.com/yuansuan/ticp/common/project-root-api/job/v1/admin/app/add"
	update "github.com/yuansuan/ticp/common/project-root-api/job/v1/admin/app/update"
	v20230530 "github.com/yuansuan/ticp/common/project-root-api/schema/v20230530"
	consts "github.com/yuansuan/ticp/iPaaS/project-root/internal/job/consts"
	models "github.com/yuansuan/ticp/iPaaS/project-root/internal/job/dao/models"
	protos "github.com/yuansuan/ticp/iPaaS/sso/protos"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Apps mocks base method.
func (m *MockService) Apps() AppSrv {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apps")
	ret0, _ := ret[0].(AppSrv)
	return ret0
}

// Apps indicates an expected call of Apps.
func (mr *MockServiceMockRecorder) Apps() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apps", reflect.TypeOf((*MockService)(nil).Apps))
}

// AppsAllow mocks base method.
func (m *MockService) AppsAllow() AppAllowSrv {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppsAllow")
	ret0, _ := ret[0].(AppAllowSrv)
	return ret0
}

// AppsAllow indicates an expected call of AppsAllow.
func (mr *MockServiceMockRecorder) AppsAllow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppsAllow", reflect.TypeOf((*MockService)(nil).AppsAllow))
}

// AppsQuota mocks base method.
func (m *MockService) AppsQuota() AppQuotaSrv {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppsQuota")
	ret0, _ := ret[0].(AppQuotaSrv)
	return ret0
}

// AppsQuota indicates an expected call of AppsQuota.
func (mr *MockServiceMockRecorder) AppsQuota() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppsQuota", reflect.TypeOf((*MockService)(nil).AppsQuota))
}

// MockAppSrv is a mock of AppSrv interface.
type MockAppSrv struct {
	ctrl     *gomock.Controller
	recorder *MockAppSrvMockRecorder
}

// MockAppSrvMockRecorder is the mock recorder for MockAppSrv.
type MockAppSrvMockRecorder struct {
	mock *MockAppSrv
}

// NewMockAppSrv creates a new mock instance.
func NewMockAppSrv(ctrl *gomock.Controller) *MockAppSrv {
	mock := &MockAppSrv{ctrl: ctrl}
	mock.recorder = &MockAppSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppSrv) EXPECT() *MockAppSrvMockRecorder {
	return m.recorder
}

// AddApp mocks base method.
func (m *MockAppSrv) AddApp(arg0 context.Context, arg1 *add.Request) (snowflake.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddApp", arg0, arg1)
	ret0, _ := ret[0].(snowflake.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddApp indicates an expected call of AddApp.
func (mr *MockAppSrvMockRecorder) AddApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddApp", reflect.TypeOf((*MockAppSrv)(nil).AddApp), arg0, arg1)
}

// DeleteApp mocks base method.
func (m *MockAppSrv) DeleteApp(arg0 context.Context, arg1 snowflake.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApp indicates an expected call of DeleteApp.
func (mr *MockAppSrvMockRecorder) DeleteApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApp", reflect.TypeOf((*MockAppSrv)(nil).DeleteApp), arg0, arg1)
}

// GetApp mocks base method.
func (m *MockAppSrv) GetApp(arg0 context.Context, arg1 snowflake.ID) (*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApp", arg0, arg1)
	ret0, _ := ret[0].(*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApp indicates an expected call of GetApp.
func (mr *MockAppSrvMockRecorder) GetApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApp", reflect.TypeOf((*MockAppSrv)(nil).GetApp), arg0, arg1)
}

// ListApps mocks base method.
func (m *MockAppSrv) ListApps(arg0 context.Context, arg1 snowflake.ID, arg2 consts.PublishStatus) ([]*models.Application, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListApps", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Application)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListApps indicates an expected call of ListApps.
func (mr *MockAppSrvMockRecorder) ListApps(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListApps", reflect.TypeOf((*MockAppSrv)(nil).ListApps), arg0, arg1, arg2)
}

// UpdateApp mocks base method.
func (m *MockAppSrv) UpdateApp(arg0 context.Context, arg1 *update.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApp", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApp indicates an expected call of UpdateApp.
func (mr *MockAppSrvMockRecorder) UpdateApp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApp", reflect.TypeOf((*MockAppSrv)(nil).UpdateApp), arg0, arg1)
}

// MockAppQuotaSrv is a mock of AppQuotaSrv interface.
type MockAppQuotaSrv struct {
	ctrl     *gomock.Controller
	recorder *MockAppQuotaSrvMockRecorder
}

// MockAppQuotaSrvMockRecorder is the mock recorder for MockAppQuotaSrv.
type MockAppQuotaSrvMockRecorder struct {
	mock *MockAppQuotaSrv
}

// NewMockAppQuotaSrv creates a new mock instance.
func NewMockAppQuotaSrv(ctrl *gomock.Controller) *MockAppQuotaSrv {
	mock := &MockAppQuotaSrv{ctrl: ctrl}
	mock.recorder = &MockAppQuotaSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppQuotaSrv) EXPECT() *MockAppQuotaSrvMockRecorder {
	return m.recorder
}

// AddQuota mocks base method.
func (m *MockAppQuotaSrv) AddQuota(arg0 context.Context, arg1, arg2 snowflake.ID) (*v20230530.ApplicationQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQuota", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v20230530.ApplicationQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQuota indicates an expected call of AddQuota.
func (mr *MockAppQuotaSrvMockRecorder) AddQuota(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQuota", reflect.TypeOf((*MockAppQuotaSrv)(nil).AddQuota), arg0, arg1, arg2)
}

// DeleteQuota mocks base method.
func (m *MockAppQuotaSrv) DeleteQuota(arg0 context.Context, arg1, arg2 snowflake.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuota", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuota indicates an expected call of DeleteQuota.
func (mr *MockAppQuotaSrvMockRecorder) DeleteQuota(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuota", reflect.TypeOf((*MockAppQuotaSrv)(nil).DeleteQuota), arg0, arg1, arg2)
}

// GetQuota mocks base method.
func (m *MockAppQuotaSrv) GetQuota(arg0 context.Context, arg1, arg2 snowflake.ID) (*v20230530.ApplicationQuota, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v20230530.ApplicationQuota)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuota indicates an expected call of GetQuota.
func (mr *MockAppQuotaSrvMockRecorder) GetQuota(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockAppQuotaSrv)(nil).GetQuota), arg0, arg1, arg2)
}

// MockAppAllowSrv is a mock of AppAllowSrv interface.
type MockAppAllowSrv struct {
	ctrl     *gomock.Controller
	recorder *MockAppAllowSrvMockRecorder
}

// MockAppAllowSrvMockRecorder is the mock recorder for MockAppAllowSrv.
type MockAppAllowSrvMockRecorder struct {
	mock *MockAppAllowSrv
}

// NewMockAppAllowSrv creates a new mock instance.
func NewMockAppAllowSrv(ctrl *gomock.Controller) *MockAppAllowSrv {
	mock := &MockAppAllowSrv{ctrl: ctrl}
	mock.recorder = &MockAppAllowSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppAllowSrv) EXPECT() *MockAppAllowSrvMockRecorder {
	return m.recorder
}

// AddAllow mocks base method.
func (m *MockAppAllowSrv) AddAllow(arg0 context.Context, arg1 snowflake.ID) (*v20230530.ApplicationAllow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAllow", arg0, arg1)
	ret0, _ := ret[0].(*v20230530.ApplicationAllow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAllow indicates an expected call of AddAllow.
func (mr *MockAppAllowSrvMockRecorder) AddAllow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAllow", reflect.TypeOf((*MockAppAllowSrv)(nil).AddAllow), arg0, arg1)
}

// DeleteAllow mocks base method.
func (m *MockAppAllowSrv) DeleteAllow(arg0 context.Context, arg1 snowflake.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllow indicates an expected call of DeleteAllow.
func (mr *MockAppAllowSrvMockRecorder) DeleteAllow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllow", reflect.TypeOf((*MockAppAllowSrv)(nil).DeleteAllow), arg0, arg1)
}

// GetAllow mocks base method.
func (m *MockAppAllowSrv) GetAllow(arg0 context.Context, arg1 snowflake.ID) (*v20230530.ApplicationAllow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllow", arg0, arg1)
	ret0, _ := ret[0].(*v20230530.ApplicationAllow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllow indicates an expected call of GetAllow.
func (mr *MockAppAllowSrvMockRecorder) GetAllow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllow", reflect.TypeOf((*MockAppAllowSrv)(nil).GetAllow), arg0, arg1)
}

// MockUserGeter is a mock of UserGeter interface.
type MockUserGeter struct {
	ctrl     *gomock.Controller
	recorder *MockUserGeterMockRecorder
}

// MockUserGeterMockRecorder is the mock recorder for MockUserGeter.
type MockUserGeterMockRecorder struct {
	mock *MockUserGeter
}

// NewMockUserGeter creates a new mock instance.
func NewMockUserGeter(ctrl *gomock.Controller) *MockUserGeter {
	mock := &MockUserGeter{ctrl: ctrl}
	mock.recorder = &MockUserGeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGeter) EXPECT() *MockUserGeterMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockUserGeter) GetUser(arg0 context.Context, arg1 string) (*protos.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(*protos.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserGeterMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserGeter)(nil).GetUser), arg0, arg1)
}
