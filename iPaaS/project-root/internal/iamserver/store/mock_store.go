// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yuansuan/ticp/common/project-root-iam/internal/iamserver/store (interfaces: Factory,RoleStore,SecretStore,PolicyStore,RolePolicyRelationStore,PolicyAuditStore)

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ladon "github.com/ory/ladon"
	snowflake "github.com/yuansuan/ticp/iPaaS/project-root/internal/iamserver/pkg/common/snowflake"
	dao "github.com/yuansuan/ticp/iPaaS/project-root/internal/iamserver/store/dao"
)

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFactory) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFactoryMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFactory)(nil).Close))
}

// MigrateDatabase mocks base method.
func (m *MockFactory) MigrateDatabase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateDatabase")
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateDatabase indicates an expected call of MigrateDatabase.
func (mr *MockFactoryMockRecorder) MigrateDatabase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateDatabase", reflect.TypeOf((*MockFactory)(nil).MigrateDatabase))
}

// Policies mocks base method.
func (m *MockFactory) Policies() PolicyStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Policies")
	ret0, _ := ret[0].(PolicyStore)
	return ret0
}

// Policies indicates an expected call of Policies.
func (mr *MockFactoryMockRecorder) Policies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Policies", reflect.TypeOf((*MockFactory)(nil).Policies))
}

// PolicyAudits mocks base method.
func (m *MockFactory) PolicyAudits() PolicyAuditStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PolicyAudits")
	ret0, _ := ret[0].(PolicyAuditStore)
	return ret0
}

// PolicyAudits indicates an expected call of PolicyAudits.
func (mr *MockFactoryMockRecorder) PolicyAudits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PolicyAudits", reflect.TypeOf((*MockFactory)(nil).PolicyAudits))
}

// RolePolicyRelations mocks base method.
func (m *MockFactory) RolePolicyRelations() RolePolicyRelationStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RolePolicyRelations")
	ret0, _ := ret[0].(RolePolicyRelationStore)
	return ret0
}

// RolePolicyRelations indicates an expected call of RolePolicyRelations.
func (mr *MockFactoryMockRecorder) RolePolicyRelations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RolePolicyRelations", reflect.TypeOf((*MockFactory)(nil).RolePolicyRelations))
}

// Roles mocks base method.
func (m *MockFactory) Roles() RoleStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].(RoleStore)
	return ret0
}

// Roles indicates an expected call of Roles.
func (mr *MockFactoryMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockFactory)(nil).Roles))
}

// Secrets mocks base method.
func (m *MockFactory) Secrets() SecretStore {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets")
	ret0, _ := ret[0].(SecretStore)
	return ret0
}

// Secrets indicates an expected call of Secrets.
func (mr *MockFactoryMockRecorder) Secrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockFactory)(nil).Secrets))
}

// MockRoleStore is a mock of RoleStore interface.
type MockRoleStore struct {
	ctrl     *gomock.Controller
	recorder *MockRoleStoreMockRecorder
}

// MockRoleStoreMockRecorder is the mock recorder for MockRoleStore.
type MockRoleStoreMockRecorder struct {
	mock *MockRoleStore
}

// NewMockRoleStore creates a new mock instance.
func NewMockRoleStore(ctrl *gomock.Controller) *MockRoleStore {
	mock := &MockRoleStore{ctrl: ctrl}
	mock.recorder = &MockRoleStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleStore) EXPECT() *MockRoleStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRoleStore) Create(arg0 context.Context, arg1 *dao.Role) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRoleStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRoleStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRoleStore) Delete(arg0 context.Context, arg1 snowflake.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleStore)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockRoleStore) Get(arg0 context.Context, arg1, arg2 string) (*dao.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dao.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRoleStoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockRoleStore)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockRoleStore) List(arg0 context.Context, arg1 string) ([]*dao.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*dao.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRoleStoreMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRoleStore)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockRoleStore) Update(arg0 context.Context, arg1 *dao.Role, arg2 snowflake.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRoleStoreMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleStore)(nil).Update), arg0, arg1, arg2)
}

// MockSecretStore is a mock of SecretStore interface.
type MockSecretStore struct {
	ctrl     *gomock.Controller
	recorder *MockSecretStoreMockRecorder
}

// MockSecretStoreMockRecorder is the mock recorder for MockSecretStore.
type MockSecretStoreMockRecorder struct {
	mock *MockSecretStore
}

// NewMockSecretStore creates a new mock instance.
func NewMockSecretStore(ctrl *gomock.Controller) *MockSecretStore {
	mock := &MockSecretStore{ctrl: ctrl}
	mock.recorder = &MockSecretStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretStore) EXPECT() *MockSecretStoreMockRecorder {
	return m.recorder
}

// CleanExpireSecret mocks base method.
func (m *MockSecretStore) CleanExpireSecret(arg0 context.Context, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanExpireSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanExpireSecret indicates an expected call of CleanExpireSecret.
func (mr *MockSecretStoreMockRecorder) CleanExpireSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanExpireSecret", reflect.TypeOf((*MockSecretStore)(nil).CleanExpireSecret), arg0, arg1)
}

// Create mocks base method.
func (m *MockSecretStore) Create(arg0 context.Context, arg1 *dao.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSecretStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSecretStore) Delete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretStore)(nil).Delete), arg0, arg1)
}

// DeleteByParentUser mocks base method.
func (m *MockSecretStore) DeleteByParentUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByParentUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByParentUser indicates an expected call of DeleteByParentUser.
func (mr *MockSecretStoreMockRecorder) DeleteByParentUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByParentUser", reflect.TypeOf((*MockSecretStore)(nil).DeleteByParentUser), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockSecretStore) Get(arg0 context.Context, arg1 string) (*dao.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0, arg1)
	ret0, _ := ret[0].(*dao.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretStoreMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockSecretStore)(nil).Get), arg0, arg1)
}

// GetByUserID mocks base method.
func (m *MockSecretStore) GetByUserID(arg0 context.Context, arg1 string) (*dao.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", arg0, arg1)
	ret0, _ := ret[0].(*dao.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockSecretStoreMockRecorder) GetByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockSecretStore)(nil).GetByUserID), arg0, arg1)
}

// List mocks base method.
func (m *MockSecretStore) List(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*dao.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*dao.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretStoreMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretStore)(nil).List), arg0, arg1, arg2, arg3)
}

// ListAll mocks base method.
func (m *MockSecretStore) ListAll(arg0 context.Context, arg1, arg2 int) ([]*dao.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*dao.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockSecretStoreMockRecorder) ListAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockSecretStore)(nil).ListAll), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockSecretStore) Update(arg0 context.Context, arg1 *dao.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSecretStoreMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretStore)(nil).Update), arg0, arg1)
}

// MockPolicyStore is a mock of PolicyStore interface.
type MockPolicyStore struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyStoreMockRecorder
}

// MockPolicyStoreMockRecorder is the mock recorder for MockPolicyStore.
type MockPolicyStoreMockRecorder struct {
	mock *MockPolicyStore
}

// NewMockPolicyStore creates a new mock instance.
func NewMockPolicyStore(ctrl *gomock.Controller) *MockPolicyStore {
	mock := &MockPolicyStore{ctrl: ctrl}
	mock.recorder = &MockPolicyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyStore) EXPECT() *MockPolicyStoreMockRecorder {
	return m.recorder
}

// BatchCreate mocks base method.
func (m *MockPolicyStore) BatchCreate(arg0 context.Context, arg1 []*dao.Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreate", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreate indicates an expected call of BatchCreate.
func (mr *MockPolicyStoreMockRecorder) BatchCreate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreate", reflect.TypeOf((*MockPolicyStore)(nil).BatchCreate), arg0, arg1)
}

// Create mocks base method.
func (m *MockPolicyStore) Create(arg0 context.Context, arg1 *dao.Policy) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPolicyStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPolicyStore)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPolicyStore) Delete(arg0 context.Context, arg1 snowflake.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPolicyStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPolicyStore)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockPolicyStore) Get(arg0 context.Context, arg1, arg2 string) (*dao.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dao.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPolicyStoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockPolicyStore)(nil).Get), arg0, arg1, arg2)
}

// GetByIds mocks base method.
func (m *MockPolicyStore) GetByIds(arg0 context.Context, arg1 []snowflake.ID) ([]*dao.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIds", arg0, arg1)
	ret0, _ := ret[0].([]*dao.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIds indicates an expected call of GetByIds.
func (mr *MockPolicyStoreMockRecorder) GetByIds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIds", reflect.TypeOf((*MockPolicyStore)(nil).GetByIds), arg0, arg1)
}

// GetPolicy mocks base method.
func (m *MockPolicyStore) GetPolicy(arg0 string) ([]*ladon.DefaultPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", arg0)
	ret0, _ := ret[0].([]*ladon.DefaultPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockPolicyStoreMockRecorder) GetPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockPolicyStore)(nil).GetPolicy), arg0)
}

// List mocks base method.
func (m *MockPolicyStore) List(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*dao.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*dao.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPolicyStoreMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPolicyStore)(nil).List), arg0, arg1, arg2, arg3)
}

// ListByNameAndUserId mocks base method.
func (m *MockPolicyStore) ListByNameAndUserId(arg0 context.Context, arg1 string, arg2 []string) ([]*dao.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByNameAndUserId", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*dao.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByNameAndUserId indicates an expected call of ListByNameAndUserId.
func (mr *MockPolicyStoreMockRecorder) ListByNameAndUserId(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByNameAndUserId", reflect.TypeOf((*MockPolicyStore)(nil).ListByNameAndUserId), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockPolicyStore) Update(arg0 context.Context, arg1 snowflake.ID, arg2 *dao.Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPolicyStoreMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPolicyStore)(nil).Update), arg0, arg1, arg2)
}

// MockRolePolicyRelationStore is a mock of RolePolicyRelationStore interface.
type MockRolePolicyRelationStore struct {
	ctrl     *gomock.Controller
	recorder *MockRolePolicyRelationStoreMockRecorder
}

// MockRolePolicyRelationStoreMockRecorder is the mock recorder for MockRolePolicyRelationStore.
type MockRolePolicyRelationStoreMockRecorder struct {
	mock *MockRolePolicyRelationStore
}

// NewMockRolePolicyRelationStore creates a new mock instance.
func NewMockRolePolicyRelationStore(ctrl *gomock.Controller) *MockRolePolicyRelationStore {
	mock := &MockRolePolicyRelationStore{ctrl: ctrl}
	mock.recorder = &MockRolePolicyRelationStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRolePolicyRelationStore) EXPECT() *MockRolePolicyRelationStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRolePolicyRelationStore) Create(arg0 context.Context, arg1 *dao.RolePolicyRelation) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRolePolicyRelationStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRolePolicyRelationStore)(nil).Create), arg0, arg1)
}

// CreateBatch mocks base method.
func (m *MockRolePolicyRelationStore) CreateBatch(arg0 context.Context, arg1 []*dao.RolePolicyRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBatch indicates an expected call of CreateBatch.
func (mr *MockRolePolicyRelationStoreMockRecorder) CreateBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBatch", reflect.TypeOf((*MockRolePolicyRelationStore)(nil).CreateBatch), arg0, arg1)
}

// Delete mocks base method.
func (m *MockRolePolicyRelationStore) Delete(arg0 context.Context, arg1 *dao.RolePolicyRelation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRolePolicyRelationStoreMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRolePolicyRelationStore)(nil).Delete), arg0, arg1)
}

// DeleteByPolicyID mocks base method.
func (m *MockRolePolicyRelationStore) DeleteByPolicyID(arg0 context.Context, arg1 snowflake.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByPolicyID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByPolicyID indicates an expected call of DeleteByPolicyID.
func (mr *MockRolePolicyRelationStoreMockRecorder) DeleteByPolicyID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByPolicyID", reflect.TypeOf((*MockRolePolicyRelationStore)(nil).DeleteByPolicyID), arg0, arg1)
}

// DeleteByRoleID mocks base method.
func (m *MockRolePolicyRelationStore) DeleteByRoleID(arg0 context.Context, arg1 snowflake.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByRoleID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByRoleID indicates an expected call of DeleteByRoleID.
func (mr *MockRolePolicyRelationStoreMockRecorder) DeleteByRoleID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByRoleID", reflect.TypeOf((*MockRolePolicyRelationStore)(nil).DeleteByRoleID), arg0, arg1)
}

// ListPolicyByRoleId mocks base method.
func (m *MockRolePolicyRelationStore) ListPolicyByRoleId(arg0 context.Context, arg1 snowflake.ID, arg2, arg3 int) ([]snowflake.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicyByRoleId", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]snowflake.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicyByRoleId indicates an expected call of ListPolicyByRoleId.
func (mr *MockRolePolicyRelationStoreMockRecorder) ListPolicyByRoleId(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicyByRoleId", reflect.TypeOf((*MockRolePolicyRelationStore)(nil).ListPolicyByRoleId), arg0, arg1, arg2, arg3)
}

// MockPolicyAuditStore is a mock of PolicyAuditStore interface.
type MockPolicyAuditStore struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyAuditStoreMockRecorder
}

// MockPolicyAuditStoreMockRecorder is the mock recorder for MockPolicyAuditStore.
type MockPolicyAuditStoreMockRecorder struct {
	mock *MockPolicyAuditStore
}

// NewMockPolicyAuditStore creates a new mock instance.
func NewMockPolicyAuditStore(ctrl *gomock.Controller) *MockPolicyAuditStore {
	mock := &MockPolicyAuditStore{ctrl: ctrl}
	mock.recorder = &MockPolicyAuditStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyAuditStore) EXPECT() *MockPolicyAuditStoreMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPolicyAuditStore) Create(arg0 context.Context, arg1 *dao.PolicyAudit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPolicyAuditStoreMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPolicyAuditStore)(nil).Create), arg0, arg1)
}
