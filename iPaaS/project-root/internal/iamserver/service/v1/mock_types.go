// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yuansuan/ticp/common/project-root-iam/internal/iamserver/service/v1 (interfaces: Svc,SecretSvc,PolicySvc,RoleSvc)

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	iam_api "github.com/yuansuan/ticp/common/project-root-iam/iam-api"
	dao "github.com/yuansuan/ticp/iPaaS/project-root/internal/iamserver/store/dao"
)

// MockSvc is a mock of Svc interface.
type MockSvc struct {
	ctrl     *gomock.Controller
	recorder *MockSvcMockRecorder
}

// MockSvcMockRecorder is the mock recorder for MockSvc.
type MockSvcMockRecorder struct {
	mock *MockSvc
}

// NewMockSvc creates a new mock instance.
func NewMockSvc(ctrl *gomock.Controller) *MockSvc {
	mock := &MockSvc{ctrl: ctrl}
	mock.recorder = &MockSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSvc) EXPECT() *MockSvcMockRecorder {
	return m.recorder
}

// Policies mocks base method.
func (m *MockSvc) Policies() PolicySvc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Policies")
	ret0, _ := ret[0].(PolicySvc)
	return ret0
}

// Policies indicates an expected call of Policies.
func (mr *MockSvcMockRecorder) Policies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Policies", reflect.TypeOf((*MockSvc)(nil).Policies))
}

// Roles mocks base method.
func (m *MockSvc) Roles() RoleSvc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Roles")
	ret0, _ := ret[0].(RoleSvc)
	return ret0
}

// Roles indicates an expected call of Roles.
func (mr *MockSvcMockRecorder) Roles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Roles", reflect.TypeOf((*MockSvc)(nil).Roles))
}

// Secrets mocks base method.
func (m *MockSvc) Secrets() SecretSvc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Secrets")
	ret0, _ := ret[0].(SecretSvc)
	return ret0
}

// Secrets indicates an expected call of Secrets.
func (mr *MockSvcMockRecorder) Secrets() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Secrets", reflect.TypeOf((*MockSvc)(nil).Secrets))
}

// MockSecretSvc is a mock of SecretSvc interface.
type MockSecretSvc struct {
	ctrl     *gomock.Controller
	recorder *MockSecretSvcMockRecorder
}

// MockSecretSvcMockRecorder is the mock recorder for MockSecretSvc.
type MockSecretSvcMockRecorder struct {
	mock *MockSecretSvc
}

// NewMockSecretSvc creates a new mock instance.
func NewMockSecretSvc(ctrl *gomock.Controller) *MockSecretSvc {
	mock := &MockSecretSvc{ctrl: ctrl}
	mock.recorder = &MockSecretSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretSvc) EXPECT() *MockSecretSvcMockRecorder {
	return m.recorder
}

// AdminDelete mocks base method.
func (m *MockSecretSvc) AdminDelete(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminDelete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AdminDelete indicates an expected call of AdminDelete.
func (mr *MockSecretSvcMockRecorder) AdminDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminDelete", reflect.TypeOf((*MockSecretSvc)(nil).AdminDelete), arg0, arg1)
}

// CreateSecret mocks base method.
func (m *MockSecretSvc) CreateSecret(arg0 context.Context, arg1, arg2 string) (*dao.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dao.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretSvcMockRecorder) CreateSecret(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretSvc)(nil).CreateSecret), arg0, arg1, arg2)
}

// DeleteByParentUser mocks base method.
func (m *MockSecretSvc) DeleteByParentUser(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByParentUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByParentUser indicates an expected call of DeleteByParentUser.
func (mr *MockSecretSvcMockRecorder) DeleteByParentUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByParentUser", reflect.TypeOf((*MockSecretSvc)(nil).DeleteByParentUser), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockSecretSvc) Get(arg0 context.Context, arg1 string) (*dao.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0, arg1)
	ret0, _ := ret[0].(*dao.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretSvcMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockSecretSvc)(nil).Get), arg0, arg1)
}

// GetByUserID mocks base method.
func (m *MockSecretSvc) GetByUserID(arg0 context.Context, arg1 string) (*dao.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserID", arg0, arg1)
	ret0, _ := ret[0].(*dao.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserID indicates an expected call of GetByUserID.
func (mr *MockSecretSvcMockRecorder) GetByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserID", reflect.TypeOf((*MockSecretSvc)(nil).GetByUserID), arg0, arg1)
}

// List mocks base method.
func (m *MockSecretSvc) List(arg0 context.Context, arg1, arg2 int) ([]*dao.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*dao.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretSvcMockRecorder) List(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretSvc)(nil).List), arg0, arg1, arg2)
}

// ListByParentUserID mocks base method.
func (m *MockSecretSvc) ListByParentUserID(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*dao.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByParentUserID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*dao.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByParentUserID indicates an expected call of ListByParentUserID.
func (mr *MockSecretSvcMockRecorder) ListByParentUserID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByParentUserID", reflect.TypeOf((*MockSecretSvc)(nil).ListByParentUserID), arg0, arg1, arg2, arg3)
}

// MockPolicySvc is a mock of PolicySvc interface.
type MockPolicySvc struct {
	ctrl     *gomock.Controller
	recorder *MockPolicySvcMockRecorder
}

// MockPolicySvcMockRecorder is the mock recorder for MockPolicySvc.
type MockPolicySvcMockRecorder struct {
	mock *MockPolicySvc
}

// NewMockPolicySvc creates a new mock instance.
func NewMockPolicySvc(ctrl *gomock.Controller) *MockPolicySvc {
	mock := &MockPolicySvc{ctrl: ctrl}
	mock.recorder = &MockPolicySvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicySvc) EXPECT() *MockPolicySvcMockRecorder {
	return m.recorder
}

// AddPolicy mocks base method.
func (m *MockPolicySvc) AddPolicy(arg0 context.Context, arg1 string, arg2 *iam_api.AddPolicyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPolicy indicates an expected call of AddPolicy.
func (mr *MockPolicySvcMockRecorder) AddPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPolicy", reflect.TypeOf((*MockPolicySvc)(nil).AddPolicy), arg0, arg1, arg2)
}

// DeletePolicy mocks base method.
func (m *MockPolicySvc) DeletePolicy(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockPolicySvcMockRecorder) DeletePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockPolicySvc)(nil).DeletePolicy), arg0, arg1, arg2)
}

// GetByPolicyName mocks base method.
func (m *MockPolicySvc) GetByPolicyName(arg0 context.Context, arg1, arg2 string) (*dao.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPolicyName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dao.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPolicyName indicates an expected call of GetByPolicyName.
func (mr *MockPolicySvcMockRecorder) GetByPolicyName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPolicyName", reflect.TypeOf((*MockPolicySvc)(nil).GetByPolicyName), arg0, arg1, arg2)
}

// ListPolicy mocks base method.
func (m *MockPolicySvc) ListPolicy(arg0 context.Context, arg1 string, arg2, arg3 int) ([]*dao.Policy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPolicy", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*dao.Policy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPolicy indicates an expected call of ListPolicy.
func (mr *MockPolicySvcMockRecorder) ListPolicy(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPolicy", reflect.TypeOf((*MockPolicySvc)(nil).ListPolicy), arg0, arg1, arg2, arg3)
}

// UpdatePolicy mocks base method.
func (m *MockPolicySvc) UpdatePolicy(arg0 context.Context, arg1 string, arg2 *iam_api.AddPolicyRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePolicy indicates an expected call of UpdatePolicy.
func (mr *MockPolicySvcMockRecorder) UpdatePolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePolicy", reflect.TypeOf((*MockPolicySvc)(nil).UpdatePolicy), arg0, arg1, arg2)
}

// MockRoleSvc is a mock of RoleSvc interface.
type MockRoleSvc struct {
	ctrl     *gomock.Controller
	recorder *MockRoleSvcMockRecorder
}

// MockRoleSvcMockRecorder is the mock recorder for MockRoleSvc.
type MockRoleSvcMockRecorder struct {
	mock *MockRoleSvc
}

// NewMockRoleSvc creates a new mock instance.
func NewMockRoleSvc(ctrl *gomock.Controller) *MockRoleSvc {
	mock := &MockRoleSvc{ctrl: ctrl}
	mock.recorder = &MockRoleSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRoleSvc) EXPECT() *MockRoleSvcMockRecorder {
	return m.recorder
}

// AddRole mocks base method.
func (m *MockRoleSvc) AddRole(arg0 context.Context, arg1 string, arg2 *iam_api.AddRoleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddRole indicates an expected call of AddRole.
func (mr *MockRoleSvcMockRecorder) AddRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRole", reflect.TypeOf((*MockRoleSvc)(nil).AddRole), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockRoleSvc) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRoleSvcMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRoleSvc)(nil).Delete), arg0, arg1, arg2)
}

// DetachPolicy mocks base method.
func (m *MockRoleSvc) DetachPolicy(arg0 context.Context, arg1 *dao.Role, arg2 *dao.Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetachPolicy indicates an expected call of DetachPolicy.
func (mr *MockRoleSvcMockRecorder) DetachPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicy", reflect.TypeOf((*MockRoleSvc)(nil).DetachPolicy), arg0, arg1, arg2)
}

// GetRole mocks base method.
func (m *MockRoleSvc) GetRole(arg0 context.Context, arg1, arg2 string) (*dao.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dao.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockRoleSvcMockRecorder) GetRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRoleSvc)(nil).GetRole), arg0, arg1, arg2)
}

// ListRole mocks base method.
func (m *MockRoleSvc) ListRole(arg0 context.Context, arg1 string) ([]*dao.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRole", arg0, arg1)
	ret0, _ := ret[0].([]*dao.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRole indicates an expected call of ListRole.
func (mr *MockRoleSvcMockRecorder) ListRole(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockRoleSvc)(nil).ListRole), arg0, arg1)
}

// PatchPolicy mocks base method.
func (m *MockRoleSvc) PatchPolicy(arg0 context.Context, arg1 *dao.Role, arg2 *dao.Policy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchPolicy", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchPolicy indicates an expected call of PatchPolicy.
func (mr *MockRoleSvcMockRecorder) PatchPolicy(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchPolicy", reflect.TypeOf((*MockRoleSvc)(nil).PatchPolicy), arg0, arg1, arg2)
}

// UpdateRole mocks base method.
func (m *MockRoleSvc) UpdateRole(arg0 context.Context, arg1 string, arg2 *iam_api.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockRoleSvcMockRecorder) UpdateRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockRoleSvc)(nil).UpdateRole), arg0, arg1, arg2)
}
