// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yuansuan/ticp/iPaaS/project-root/internal/storage/dao (interfaces: StorageOperationLogDao)

// Package dao is a generated GoMock package.
package dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/yuansuan/ticp/iPaaS/project-root/internal/storage/dao/model"
	xorm "xorm.io/xorm"
)

// MockStorageOperationLogDao is a mock of StorageOperationLogDao interface.
type MockStorageOperationLogDao struct {
	ctrl     *gomock.Controller
	recorder *MockStorageOperationLogDaoMockRecorder
}

// MockStorageOperationLogDaoMockRecorder is the mock recorder for MockStorageOperationLogDao.
type MockStorageOperationLogDaoMockRecorder struct {
	mock *MockStorageOperationLogDao
}

// NewMockStorageOperationLogDao creates a new mock instance.
func NewMockStorageOperationLogDao(ctrl *gomock.Controller) *MockStorageOperationLogDao {
	mock := &MockStorageOperationLogDao{ctrl: ctrl}
	mock.recorder = &MockStorageOperationLogDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageOperationLogDao) EXPECT() *MockStorageOperationLogDaoMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockStorageOperationLogDao) Count(arg0 *xorm.Session, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockStorageOperationLogDaoMockRecorder) Count(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockStorageOperationLogDao)(nil).Count), arg0, arg1)
}

// DeleteExpiredLog mocks base method.
func (m *MockStorageOperationLogDao) DeleteExpiredLog(arg0 *xorm.Session, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredLog indicates an expected call of DeleteExpiredLog.
func (mr *MockStorageOperationLogDaoMockRecorder) DeleteExpiredLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredLog", reflect.TypeOf((*MockStorageOperationLogDao)(nil).DeleteExpiredLog), arg0, arg1)
}

// DeleteExpiredUserLog mocks base method.
func (m *MockStorageOperationLogDao) DeleteExpiredUserLog(arg0 *xorm.Session, arg1 string, arg2 int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredUserLog", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExpiredUserLog indicates an expected call of DeleteExpiredUserLog.
func (mr *MockStorageOperationLogDaoMockRecorder) DeleteExpiredUserLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredUserLog", reflect.TypeOf((*MockStorageOperationLogDao)(nil).DeleteExpiredUserLog), arg0, arg1, arg2)
}

// GetUserIDs mocks base method.
func (m *MockStorageOperationLogDao) GetUserIDs(arg0 *xorm.Session) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDs", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDs indicates an expected call of GetUserIDs.
func (mr *MockStorageOperationLogDaoMockRecorder) GetUserIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDs", reflect.TypeOf((*MockStorageOperationLogDao)(nil).GetUserIDs), arg0)
}

// Insert mocks base method.
func (m *MockStorageOperationLogDao) Insert(arg0 *xorm.Session, arg1 *model.StorageOperationLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockStorageOperationLogDaoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockStorageOperationLogDao)(nil).Insert), arg0, arg1)
}

// List mocks base method.
func (m *MockStorageOperationLogDao) List(arg0 *xorm.Session, arg1 *StorageOperationLogQueryParam) ([]*model.StorageOperationLog, error, int64, int64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*model.StorageOperationLog)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int64)
	ret3, _ := ret[3].(int64)
	return ret0, ret1, ret2, ret3
}

// List indicates an expected call of List.
func (mr *MockStorageOperationLogDaoMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageOperationLogDao)(nil).List), arg0, arg1)
}
