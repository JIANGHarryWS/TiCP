// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yuansuan/ticp/iPaaS/project-root/internal/storage/dao (interfaces: DirectoryUsageDao)

// Package dao is a generated GoMock package.
package dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/yuansuan/ticp/iPaaS/project-root/internal/storage/dao/model"
	xorm "xorm.io/xorm"
)

// MockDirectoryUsageDao is a mock of DirectoryUsageDao interface.
type MockDirectoryUsageDao struct {
	ctrl     *gomock.Controller
	recorder *MockDirectoryUsageDaoMockRecorder
}

// MockDirectoryUsageDaoMockRecorder is the mock recorder for MockDirectoryUsageDao.
type MockDirectoryUsageDaoMockRecorder struct {
	mock *MockDirectoryUsageDao
}

// NewMockDirectoryUsageDao creates a new mock instance.
func NewMockDirectoryUsageDao(ctrl *gomock.Controller) *MockDirectoryUsageDao {
	mock := &MockDirectoryUsageDao{ctrl: ctrl}
	mock.recorder = &MockDirectoryUsageDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDirectoryUsageDao) EXPECT() *MockDirectoryUsageDaoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockDirectoryUsageDao) Get(arg0 *xorm.Session, arg1 string) (bool, *model.DirectoryUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.DirectoryUsage)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDirectoryUsageDaoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockDirectoryUsageDao)(nil).Get), arg0, arg1)
}

// Insert mocks base method.
func (m *MockDirectoryUsageDao) Insert(arg0 *xorm.Session, arg1 *model.DirectoryUsage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDirectoryUsageDaoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDirectoryUsageDao)(nil).Insert), arg0, arg1)
}

// ListCalculatingTask mocks base method.
func (m *MockDirectoryUsageDao) ListCalculatingTask(arg0 *xorm.Session) ([]*model.DirectoryUsage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCalculatingTask", arg0)
	ret0, _ := ret[0].([]*model.DirectoryUsage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCalculatingTask indicates an expected call of ListCalculatingTask.
func (mr *MockDirectoryUsageDaoMockRecorder) ListCalculatingTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCalculatingTask", reflect.TypeOf((*MockDirectoryUsageDao)(nil).ListCalculatingTask), arg0)
}

// Update mocks base method.
func (m *MockDirectoryUsageDao) Update(arg0 *xorm.Session, arg1 *model.DirectoryUsage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDirectoryUsageDaoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDirectoryUsageDao)(nil).Update), arg0, arg1)
}
