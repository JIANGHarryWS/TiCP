// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/yuansuan/ticp/iPaaS/project-root/internal/storage/dao (interfaces: UploadInfoDao)

// Package dao is a generated GoMock package.
package dao

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/yuansuan/ticp/iPaaS/project-root/internal/storage/dao/model"
	xorm "xorm.io/xorm"
)

// MockUploadInfoDao is a mock of UploadInfoDao interface.
type MockUploadInfoDao struct {
	ctrl     *gomock.Controller
	recorder *MockUploadInfoDaoMockRecorder
}

// MockUploadInfoDaoMockRecorder is the mock recorder for MockUploadInfoDao.
type MockUploadInfoDaoMockRecorder struct {
	mock *MockUploadInfoDao
}

// NewMockUploadInfoDao creates a new mock instance.
func NewMockUploadInfoDao(ctrl *gomock.Controller) *MockUploadInfoDao {
	mock := &MockUploadInfoDao{ctrl: ctrl}
	mock.recorder = &MockUploadInfoDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadInfoDao) EXPECT() *MockUploadInfoDaoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockUploadInfoDao) Get(arg0 *xorm.Session, arg1 *model.UploadInfo) (bool, *model.UploadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuota", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.UploadInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockUploadInfoDaoMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuota", reflect.TypeOf((*MockUploadInfoDao)(nil).Get), arg0, arg1)
}

// Insert mocks base method.
func (m *MockUploadInfoDao) Insert(arg0 *xorm.Session, arg1 *model.UploadInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUploadInfoDaoMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUploadInfoDao)(nil).Insert), arg0, arg1)
}
